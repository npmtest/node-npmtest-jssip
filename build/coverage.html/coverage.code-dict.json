{"/home/travis/build/npmtest/node-npmtest-jssip/test.js":"/* istanbul instrument in package npmtest_jssip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jssip/lib.npmtest_jssip.js":"/* istanbul instrument in package npmtest_jssip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jssip = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jssip = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jssip/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jssip && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jssip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jssip\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jssip.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jssip.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jssip.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jssip.__dirname + '/lib.npmtest_jssip.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/JsSIP.js":"/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP');\nvar adapter = require('webrtc-adapter');\nvar pkg = require('../package.json');\n\ndebug('version %s', pkg.version);\n\nvar C = require('./Constants');\nvar Exceptions = require('./Exceptions');\nvar Utils = require('./Utils');\nvar UA = require('./UA');\nvar URI = require('./URI');\nvar NameAddrHeader = require('./NameAddrHeader');\nvar Grammar = require('./Grammar');\nvar WebSocketInterface = require('./WebSocketInterface');\n\n\n/**\n * Expose the JsSIP module.\n */\nvar JsSIP = module.exports = {\n  C: C,\n  Exceptions: Exceptions,\n  Utils: Utils,\n  UA: UA,\n  URI: URI,\n  NameAddrHeader: NameAddrHeader,\n  WebSocketInterface: WebSocketInterface,\n  Grammar: Grammar,\n  // Expose the debug module.\n  debug: require('debug'),\n  // Expose the adapter module.\n  adapter: adapter\n};\n\n\nObject.defineProperties(JsSIP, {\n  name: {\n    get: function() { return pkg.title; }\n  },\n\n  version: {\n    get: function() { return pkg.version; }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Constants.js":"var pkg = require('../package.json');\n\nvar C = {\n  USER_AGENT: pkg.title + ' ' + pkg.version,\n\n  // SIP scheme\n  SIP:  'sip',\n  SIPS: 'sips',\n\n  // End and Failure causes\n  causes: {\n    // Generic error causes\n    CONNECTION_ERROR:         'Connection Error',\n    REQUEST_TIMEOUT:          'Request Timeout',\n    SIP_FAILURE_CODE:         'SIP Failure Code',\n    INTERNAL_ERROR:           'Internal Error',\n\n    // SIP error causes\n    BUSY:                     'Busy',\n    REJECTED:                 'Rejected',\n    REDIRECTED:               'Redirected',\n    UNAVAILABLE:              'Unavailable',\n    NOT_FOUND:                'Not Found',\n    ADDRESS_INCOMPLETE:       'Address Incomplete',\n    INCOMPATIBLE_SDP:         'Incompatible SDP',\n    MISSING_SDP:              'Missing SDP',\n    AUTHENTICATION_ERROR:     'Authentication Error',\n\n    // Session error causes\n    BYE:                      'Terminated',\n    WEBRTC_ERROR:             'WebRTC Error',\n    CANCELED:                 'Canceled',\n    NO_ANSWER:                'No Answer',\n    EXPIRES:                  'Expires',\n    NO_ACK:                   'No ACK',\n    DIALOG_ERROR:             'Dialog Error',\n    USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',\n    BAD_MEDIA_DESCRIPTION:    'Bad Media Description',\n    RTP_TIMEOUT:              'RTP Timeout'\n  },\n\n  SIP_ERROR_CAUSES: {\n    REDIRECTED: [300,301,302,305,380],\n    BUSY: [486,600],\n    REJECTED: [403,603],\n    NOT_FOUND: [404,604],\n    UNAVAILABLE: [480,410,408,430],\n    ADDRESS_INCOMPLETE: [484, 424],\n    INCOMPATIBLE_SDP: [488,606],\n    AUTHENTICATION_ERROR:[401,407]\n  },\n\n  // SIP Methods\n  ACK:        'ACK',\n  BYE:        'BYE',\n  CANCEL:     'CANCEL',\n  INFO:       'INFO',\n  INVITE:     'INVITE',\n  MESSAGE:    'MESSAGE',\n  NOTIFY:     'NOTIFY',\n  OPTIONS:    'OPTIONS',\n  REGISTER:   'REGISTER',\n  REFER:      'REFER',\n  UPDATE:     'UPDATE',\n  SUBSCRIBE:  'SUBSCRIBE',\n\n  /* SIP Response Reasons\n   * DOC: http://www.iana.org/assignments/sip-parameters\n   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\n   */\n  REASON_PHRASE: {\n    100: 'Trying',\n    180: 'Ringing',\n    181: 'Call Is Being Forwarded',\n    182: 'Queued',\n    183: 'Session Progress',\n    199: 'Early Dialog Terminated',  // draft-ietf-sipcore-199\n    200: 'OK',\n    202: 'Accepted',  // RFC 3265\n    204: 'No Notification',  //RFC 5839\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    305: 'Use Proxy',\n    380: 'Alternative Service',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    410: 'Gone',\n    412: 'Conditional Request Failed',  // RFC 3903\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Unsupported URI Scheme',\n    417: 'Unknown Resource-Priority',  // RFC 4412\n    420: 'Bad Extension',\n    421: 'Extension Required',\n    422: 'Session Interval Too Small',  // RFC 4028\n    423: 'Interval Too Brief',\n    424: 'Bad Location Information',  // RFC 6442\n    428: 'Use Identity Header',  // RFC 4474\n    429: 'Provide Referrer Identity',  // RFC 3892\n    430: 'Flow Failed',  // RFC 5626\n    433: 'Anonymity Disallowed',  // RFC 5079\n    436: 'Bad Identity-Info',  // RFC 4474\n    437: 'Unsupported Certificate',  // RFC 4744\n    438: 'Invalid Identity Header',  // RFC 4744\n    439: 'First Hop Lacks Outbound Support',  // RFC 5626\n    440: 'Max-Breadth Exceeded',  // RFC 5393\n    469: 'Bad Info Package',  // draft-ietf-sipcore-info-events\n    470: 'Consent Needed',  // RFC 5360\n    478: 'Unresolvable Destination',  // Custom code copied from Kamailio.\n    480: 'Temporarily Unavailable',\n    481: 'Call/Transaction Does Not Exist',\n    482: 'Loop Detected',\n    483: 'Too Many Hops',\n    484: 'Address Incomplete',\n    485: 'Ambiguous',\n    486: 'Busy Here',\n    487: 'Request Terminated',\n    488: 'Not Acceptable Here',\n    489: 'Bad Event',  // RFC 3265\n    491: 'Request Pending',\n    493: 'Undecipherable',\n    494: 'Security Agreement Required',  // RFC 3329\n    500: 'JsSIP Internal Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Server Time-out',\n    505: 'Version Not Supported',\n    513: 'Message Too Large',\n    580: 'Precondition Failure',  // RFC 3312\n    600: 'Busy Everywhere',\n    603: 'Decline',\n    604: 'Does Not Exist Anywhere',\n    606: 'Not Acceptable'\n  },\n\n  ALLOWED_METHODS: 'INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO',\n  ACCEPTED_BODY_TYPES: 'application/sdp, application/dtmf-relay',\n  MAX_FORWARDS: 69,\n  SESSION_EXPIRES: 90,\n  MIN_SESSION_EXPIRES: 60\n};\n\n\nmodule.exports = C;\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Exceptions.js":"/**\n * @namespace Exceptions\n * @memberOf JsSIP\n */\nvar Exceptions = {\n  /**\n   * Exception thrown when a valid parameter is given to the JsSIP.UA constructor.\n   * @class ConfigurationError\n   * @memberOf JsSIP.Exceptions\n   */\n  ConfigurationError: (function(){\n    var exception = function(parameter, value) {\n      this.code = 1;\n      this.name = 'CONFIGURATION_ERROR';\n      this.parameter = parameter;\n      this.value = value;\n      this.message = (!this.value)? 'Missing parameter: '+ this.parameter : 'Invalid value '+ JSON.stringify(this.value) +' for parameter \"'+ this.parameter +'\"';\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  InvalidStateError: (function(){\n    var exception = function(status) {\n      this.code = 2;\n      this.name = 'INVALID_STATE_ERROR';\n      this.status = status;\n      this.message = 'Invalid status: '+ status;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotSupportedError: (function(){\n    var exception = function(message) {\n      this.code = 3;\n      this.name = 'NOT_SUPPORTED_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotReadyError: (function(){\n    var exception = function(message) {\n      this.code = 4;\n      this.name = 'NOT_READY_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }())\n};\n\n\nmodule.exports = Exceptions;\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Utils.js":"var Utils = {};\n\nmodule.exports = Utils;\n\n\n/**\n * Dependencies.\n */\nvar JsSIP_C = require('./Constants');\nvar URI = require('./URI');\nvar Grammar = require('./Grammar');\n\n\nUtils.str_utf8_length = function(string) {\n  return unescape(encodeURIComponent(string)).length;\n};\n\nUtils.isFunction = function(fn) {\n  if (fn !== undefined) {\n    return (Object.prototype.toString.call(fn) === '[object Function]')? true : false;\n  } else {\n    return false;\n  }\n};\n\nUtils.isString = function(str) {\n  if (str !== undefined) {\n    return (Object.prototype.toString.call(str) === '[object String]')? true : false;\n  } else {\n    return false;\n  }\n};\n\nUtils.isDecimal = function(num) {\n  return !isNaN(num) && (parseFloat(num) === parseInt(num,10));\n};\n\nUtils.isEmpty = function(value) {\n  if (value === null || value === '' || value === undefined || (Array.isArray(value) && value.length === 0) || (typeof(value) === 'number' && isNaN(value))) {\n    return true;\n  }\n};\n\nUtils.hasMethods = function(obj /*, method list as strings */){\n  var i = 1, methodName;\n  while((methodName = arguments[i++])){\n    if(this.isFunction(obj[methodName])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nUtils.createRandomToken = function(size, base) {\n  var i, r,\n    token = '';\n\n  base = base || 32;\n\n  for( i=0; i < size; i++ ) {\n    r = Math.random() * base|0;\n    token += r.toString(base);\n  }\n  return token;\n};\n\nUtils.newTag = function() {\n  return Utils.createRandomToken(10);\n};\n\n// http://stackoverflow.com/users/109538/broofa\nUtils.newUUID = function() {\n  var UUID = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\n    return v.toString(16);\n  });\n\n  return UUID;\n};\n\nUtils.hostType = function(host) {\n  if (!host) {\n    return;\n  } else {\n    host = Grammar.parse(host,'host');\n    if (host !== -1) {\n      return host.host_type;\n    }\n  }\n};\n\n/**\n* Normalize SIP URI.\n* NOTE: It does not allow a SIP URI without username.\n* Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\n* Detects the domain part (if given) and properly hex-escapes the user portion.\n* If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\n*/\nUtils.normalizeTarget = function(target, domain) {\n  var uri, target_array, target_user, target_domain;\n\n  // If no target is given then raise an error.\n  if (!target) {\n    return;\n  // If a URI instance is given then return it.\n  } else if (target instanceof URI) {\n    return target;\n\n  // If a string is given split it by '@':\n  // - Last fragment is the desired domain.\n  // - Otherwise append the given domain argument.\n  } else if (typeof target === 'string') {\n    target_array = target.split('@');\n\n    switch(target_array.length) {\n      case 1:\n        if (!domain) {\n          return;\n        }\n        target_user = target;\n        target_domain = domain;\n        break;\n      case 2:\n        target_user = target_array[0];\n        target_domain = target_array[1];\n        break;\n      default:\n        target_user = target_array.slice(0, target_array.length-1).join('@');\n        target_domain = target_array[target_array.length-1];\n    }\n\n    // Remove the URI scheme (if present).\n    target_user = target_user.replace(/^(sips?|tel):/i, '');\n\n    // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\n    if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(target_user)) {\n      target_user = target_user.replace(/[\\-\\.\\(\\)]/g, '');\n    }\n\n    // Build the complete SIP URI.\n    target = JsSIP_C.SIP + ':' + Utils.escapeUser(target_user) + '@' + target_domain;\n\n    // Finally parse the resulting URI.\n    if ((uri = URI.parse(target))) {\n      return uri;\n    } else {\n      return;\n    }\n  } else {\n    return;\n  }\n};\n\n/**\n* Hex-escape a SIP URI user.\n*/\nUtils.escapeUser = function(user) {\n  // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n  return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');\n};\n\nUtils.headerize = function(string) {\n  var exceptions = {\n    'Call-Id': 'Call-ID',\n    'Cseq': 'CSeq',\n    'Www-Authenticate': 'WWW-Authenticate'\n    },\n    name = string.toLowerCase().replace(/_/g,'-').split('-'),\n    hname = '',\n    parts = name.length, part;\n\n  for (part = 0; part < parts; part++) {\n    if (part !== 0) {\n      hname +='-';\n    }\n    hname += name[part].charAt(0).toUpperCase()+name[part].substring(1);\n  }\n  if (exceptions[hname]) {\n    hname = exceptions[hname];\n  }\n  return hname;\n};\n\nUtils.sipErrorCause = function(status_code) {\n  var cause;\n\n  for (cause in JsSIP_C.SIP_ERROR_CAUSES) {\n    if (JsSIP_C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {\n      return JsSIP_C.causes[cause];\n    }\n  }\n\n  return JsSIP_C.causes.SIP_FAILURE_CODE;\n};\n\n/**\n* Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)\n*/\nUtils.getRandomTestNetIP = function() {\n  function getOctet(from,to) {\n    return Math.floor(Math.random()*(to-from+1)+from);\n  }\n  return '192.0.2.' + getOctet(1, 254);\n};\n\n// MD5 (Message-Digest Algorithm) http://www.webtoolkit.info\nUtils.calculateMD5 = function(string) {\n  function rotateLeft(lValue, iShiftBits) {\n    return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n  }\n\n  function addUnsigned(lX,lY) {\n    var lX4,lY4,lX8,lY8,lResult;\n    lX8 = (lX & 0x80000000);\n    lY8 = (lY & 0x80000000);\n    lX4 = (lX & 0x40000000);\n    lY4 = (lY & 0x40000000);\n    lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n    if (lX4 & lY4) {\n      return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n    }\n    if (lX4 | lY4) {\n      if (lResult & 0x40000000) {\n        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n      } else {\n        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n      }\n    } else {\n      return (lResult ^ lX8 ^ lY8);\n    }\n  }\n\n  function doF(x,y,z) {\n    return (x & y) | ((~x) & z);\n  }\n\n  function doG(x,y,z) {\n    return (x & z) | (y & (~z));\n  }\n\n  function doH(x,y,z) {\n    return (x ^ y ^ z);\n  }\n\n  function doI(x,y,z) {\n    return (y ^ (x | (~z)));\n  }\n\n  function doFF(a,b,c,d,x,s,ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(doF(b, c, d), x), ac));\n    return addUnsigned(rotateLeft(a, s), b);\n  }\n\n  function doGG(a,b,c,d,x,s,ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(doG(b, c, d), x), ac));\n    return addUnsigned(rotateLeft(a, s), b);\n  }\n\n  function doHH(a,b,c,d,x,s,ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(doH(b, c, d), x), ac));\n    return addUnsigned(rotateLeft(a, s), b);\n  }\n\n  function doII(a,b,c,d,x,s,ac) {\n    a = addUnsigned(a, addUnsigned(addUnsigned(doI(b, c, d), x), ac));\n    return addUnsigned(rotateLeft(a, s), b);\n  }\n\n  function convertToWordArray(string) {\n    var lWordCount;\n    var lMessageLength = string.length;\n    var lNumberOfWords_temp1=lMessageLength + 8;\n    var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n    var lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n    var lWordArray = new Array(lNumberOfWords-1);\n    var lBytePosition = 0;\n    var lByteCount = 0;\n    while ( lByteCount < lMessageLength ) {\n      lWordCount = (lByteCount-(lByteCount % 4))/4;\n      lBytePosition = (lByteCount % 4)*8;\n      lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));\n      lByteCount++;\n    }\n    lWordCount = (lByteCount-(lByteCount % 4))/4;\n    lBytePosition = (lByteCount % 4)*8;\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n    lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n    lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n    return lWordArray;\n  }\n\n  function wordToHex(lValue) {\n    var wordToHexValue='',wordToHexValue_temp='',lByte,lCount;\n    for (lCount = 0;lCount<=3;lCount++) {\n      lByte = (lValue>>>(lCount*8)) & 255;\n      wordToHexValue_temp = '0' + lByte.toString(16);\n      wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length-2,2);\n    }\n    return wordToHexValue;\n  }\n\n  function utf8Encode(string) {\n    string = string.replace(/\\r\\n/g, '\\n');\n    var utftext = '';\n\n    for (var n = 0; n < string.length; n++) {\n      var c = string.charCodeAt(n);\n\n      if (c < 128) {\n        utftext += String.fromCharCode(c);\n      }\n      else if((c > 127) && (c < 2048)) {\n        utftext += String.fromCharCode((c >> 6) | 192);\n        utftext += String.fromCharCode((c & 63) | 128);\n      }\n      else {\n        utftext += String.fromCharCode((c >> 12) | 224);\n        utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n        utftext += String.fromCharCode((c & 63) | 128);\n      }\n    }\n    return utftext;\n  }\n\n  var x=[];\n  var k,AA,BB,CC,DD,a,b,c,d;\n  var S11=7, S12=12, S13=17, S14=22;\n  var S21=5, S22=9 , S23=14, S24=20;\n  var S31=4, S32=11, S33=16, S34=23;\n  var S41=6, S42=10, S43=15, S44=21;\n\n  string = utf8Encode(string);\n\n  x = convertToWordArray(string);\n\n  a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n  for (k=0;k<x.length;k+=16) {\n    AA=a; BB=b; CC=c; DD=d;\n    a=doFF(a,b,c,d,x[k+0], S11,0xD76AA478);\n    d=doFF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n    c=doFF(c,d,a,b,x[k+2], S13,0x242070DB);\n    b=doFF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n    a=doFF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n    d=doFF(d,a,b,c,x[k+5], S12,0x4787C62A);\n    c=doFF(c,d,a,b,x[k+6], S13,0xA8304613);\n    b=doFF(b,c,d,a,x[k+7], S14,0xFD469501);\n    a=doFF(a,b,c,d,x[k+8], S11,0x698098D8);\n    d=doFF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n    c=doFF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n    b=doFF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n    a=doFF(a,b,c,d,x[k+12],S11,0x6B901122);\n    d=doFF(d,a,b,c,x[k+13],S12,0xFD987193);\n    c=doFF(c,d,a,b,x[k+14],S13,0xA679438E);\n    b=doFF(b,c,d,a,x[k+15],S14,0x49B40821);\n    a=doGG(a,b,c,d,x[k+1], S21,0xF61E2562);\n    d=doGG(d,a,b,c,x[k+6], S22,0xC040B340);\n    c=doGG(c,d,a,b,x[k+11],S23,0x265E5A51);\n    b=doGG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n    a=doGG(a,b,c,d,x[k+5], S21,0xD62F105D);\n    d=doGG(d,a,b,c,x[k+10],S22,0x2441453);\n    c=doGG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n    b=doGG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n    a=doGG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n    d=doGG(d,a,b,c,x[k+14],S22,0xC33707D6);\n    c=doGG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n    b=doGG(b,c,d,a,x[k+8], S24,0x455A14ED);\n    a=doGG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n    d=doGG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n    c=doGG(c,d,a,b,x[k+7], S23,0x676F02D9);\n    b=doGG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n    a=doHH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n    d=doHH(d,a,b,c,x[k+8], S32,0x8771F681);\n    c=doHH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n    b=doHH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n    a=doHH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n    d=doHH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n    c=doHH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n    b=doHH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n    a=doHH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n    d=doHH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n    c=doHH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n    b=doHH(b,c,d,a,x[k+6], S34,0x4881D05);\n    a=doHH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n    d=doHH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n    c=doHH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n    b=doHH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n    a=doII(a,b,c,d,x[k+0], S41,0xF4292244);\n    d=doII(d,a,b,c,x[k+7], S42,0x432AFF97);\n    c=doII(c,d,a,b,x[k+14],S43,0xAB9423A7);\n    b=doII(b,c,d,a,x[k+5], S44,0xFC93A039);\n    a=doII(a,b,c,d,x[k+12],S41,0x655B59C3);\n    d=doII(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n    c=doII(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n    b=doII(b,c,d,a,x[k+1], S44,0x85845DD1);\n    a=doII(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n    d=doII(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n    c=doII(c,d,a,b,x[k+6], S43,0xA3014314);\n    b=doII(b,c,d,a,x[k+13],S44,0x4E0811A1);\n    a=doII(a,b,c,d,x[k+4], S41,0xF7537E82);\n    d=doII(d,a,b,c,x[k+11],S42,0xBD3AF235);\n    c=doII(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n    b=doII(b,c,d,a,x[k+9], S44,0xEB86D391);\n    a=addUnsigned(a,AA);\n    b=addUnsigned(b,BB);\n    c=addUnsigned(c,CC);\n    d=addUnsigned(d,DD);\n  }\n\n  var temp = wordToHex(a)+wordToHex(b)+wordToHex(c)+wordToHex(d);\n\n  return temp.toLowerCase();\n};\n\nUtils.closeMediaStream = function(stream) {\n  if (!stream) {\n    return;\n  }\n\n  // Latest spec states that MediaStream has no stop() method and instead must\n  // call stop() on every MediaStreamTrack.\n  try {\n    var tracks, i, len;\n\n    if (stream.getTracks) {\n      tracks = stream.getTracks();\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n    } else {\n      tracks = stream.getAudioTracks();\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n      tracks = stream.getVideoTracks();\n      for (i = 0, len = tracks.length; i < len; i += 1) {\n        tracks[i].stop();\n      }\n    }\n  } catch (error) {\n    // Deprecated by the spec, but still in use.\n    // NOTE: In Temasys IE plugin stream.stop is a callable 'object'.\n    if (typeof stream.stop === 'function' || typeof stream.stop === 'object') {\n      stream.stop();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/URI.js":"module.exports = URI;\n\n\n/**\n * Dependencies.\n */\nvar JsSIP_C = require('./Constants');\nvar Utils = require('./Utils');\nvar Grammar = require('./Grammar');\n\n\n/**\n * -param {String} [scheme]\n * -param {String} [user]\n * -param {String} host\n * -param {String} [port]\n * -param {Object} [parameters]\n * -param {Object} [headers]\n *\n */\nfunction URI(scheme, user, host, port, parameters, headers) {\n  var param, header;\n\n  // Checks\n  if(!host) {\n    throw new TypeError('missing or invalid \"host\" parameter');\n  }\n\n  // Initialize parameters\n  scheme = scheme || JsSIP_C.SIP;\n  this.parameters = {};\n  this.headers = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  for (header in headers) {\n    this.setHeader(header, headers[header]);\n  }\n\n  Object.defineProperties(this, {\n    scheme: {\n      get: function(){ return scheme; },\n      set: function(value){\n        scheme = value.toLowerCase();\n      }\n    },\n\n    user: {\n      get: function(){ return user; },\n      set: function(value){\n        user = value;\n      }\n    },\n\n    host: {\n      get: function(){ return host; },\n      set: function(value){\n        host = value.toLowerCase();\n      }\n    },\n\n    port: {\n      get: function(){ return port; },\n      set: function(value){\n        port = value === 0 ? value : (parseInt(value,10) || null);\n      }\n    }\n  });\n}\n\n\nURI.prototype = {\n  setParam: function(key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();\n    }\n  },\n\n  getParam: function(key) {\n    if(key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  },\n\n  hasParam: function(key) {\n    if(key) {\n      return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;\n    }\n  },\n\n  deleteParam: function(parameter) {\n    var value;\n    parameter = parameter.toLowerCase();\n    if (this.parameters.hasOwnProperty(parameter)) {\n      value = this.parameters[parameter];\n      delete this.parameters[parameter];\n      return value;\n    }\n  },\n\n  clearParams: function() {\n    this.parameters = {};\n  },\n\n  setHeader: function(name, value) {\n    this.headers[Utils.headerize(name)] = (Array.isArray(value)) ? value : [value];\n  },\n\n  getHeader: function(name) {\n    if(name) {\n      return this.headers[Utils.headerize(name)];\n    }\n  },\n\n  hasHeader: function(name) {\n    if(name) {\n      return (this.headers.hasOwnProperty(Utils.headerize(name)) && true) || false;\n    }\n  },\n\n  deleteHeader: function(header) {\n    var value;\n    header = Utils.headerize(header);\n    if(this.headers.hasOwnProperty(header)) {\n      value = this.headers[header];\n      delete this.headers[header];\n      return value;\n    }\n  },\n\n  clearHeaders: function() {\n    this.headers = {};\n  },\n\n  clone: function() {\n    return new URI(\n      this.scheme,\n      this.user,\n      this.host,\n      this.port,\n      JSON.parse(JSON.stringify(this.parameters)),\n      JSON.parse(JSON.stringify(this.headers)));\n  },\n\n  toString: function(){\n    var header, parameter, idx, uri,\n      headers = [];\n\n    uri  = this.scheme + ':';\n    if (this.user) {\n      uri += Utils.escapeUser(this.user) + '@';\n    }\n    uri += this.host;\n    if (this.port || this.port === 0) {\n      uri += ':' + this.port;\n    }\n\n    for (parameter in this.parameters) {\n      uri += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        uri += '='+ this.parameters[parameter];\n      }\n    }\n\n    for(header in this.headers) {\n      for(idx = 0; idx < this.headers[header].length; idx++) {\n        headers.push(header + '=' + this.headers[header][idx]);\n      }\n    }\n\n    if (headers.length > 0) {\n      uri += '?' + headers.join('&');\n    }\n\n    return uri;\n  },\n\n  toAor: function(show_port){\n      var aor;\n\n      aor  = this.scheme + ':';\n      if (this.user) {\n        aor += Utils.escapeUser(this.user) + '@';\n      }\n      aor += this.host;\n      if (show_port && (this.port || this.port === 0)) {\n        aor += ':' + this.port;\n      }\n\n      return aor;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a JsSIP.URI instance or undefined if\n  * it is an invalid URI.\n  */\nURI.parse = function(uri) {\n  uri = Grammar.parse(uri,'SIP_URI');\n\n  if (uri !== -1) {\n    return uri;\n  } else {\n    return undefined;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Grammar.js":"module.exports = (function(){\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n     return '\"' + s\n      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n      .replace(/\"/g, '\\\\\"')    // closing quote character\n      .replace(/\\x08/g, '\\\\b') // backspace\n      .replace(/\\t/g, '\\\\t')   // horizontal tab\n      .replace(/\\n/g, '\\\\n')   // line feed\n      .replace(/\\f/g, '\\\\f')   // form feed\n      .replace(/\\r/g, '\\\\r')   // carriage return\n      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n      + '\"';\n  }\n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function(input, startRule) {\n      var parseFunctions = {\n        \"CRLF\": parse_CRLF,\n        \"DIGIT\": parse_DIGIT,\n        \"ALPHA\": parse_ALPHA,\n        \"HEXDIG\": parse_HEXDIG,\n        \"WSP\": parse_WSP,\n        \"OCTET\": parse_OCTET,\n        \"DQUOTE\": parse_DQUOTE,\n        \"SP\": parse_SP,\n        \"HTAB\": parse_HTAB,\n        \"alphanum\": parse_alphanum,\n        \"reserved\": parse_reserved,\n        \"unreserved\": parse_unreserved,\n        \"mark\": parse_mark,\n        \"escaped\": parse_escaped,\n        \"LWS\": parse_LWS,\n        \"SWS\": parse_SWS,\n        \"HCOLON\": parse_HCOLON,\n        \"TEXT_UTF8_TRIM\": parse_TEXT_UTF8_TRIM,\n        \"TEXT_UTF8char\": parse_TEXT_UTF8char,\n        \"UTF8_NONASCII\": parse_UTF8_NONASCII,\n        \"UTF8_CONT\": parse_UTF8_CONT,\n        \"LHEX\": parse_LHEX,\n        \"token\": parse_token,\n        \"token_nodot\": parse_token_nodot,\n        \"separators\": parse_separators,\n        \"word\": parse_word,\n        \"STAR\": parse_STAR,\n        \"SLASH\": parse_SLASH,\n        \"EQUAL\": parse_EQUAL,\n        \"LPAREN\": parse_LPAREN,\n        \"RPAREN\": parse_RPAREN,\n        \"RAQUOT\": parse_RAQUOT,\n        \"LAQUOT\": parse_LAQUOT,\n        \"COMMA\": parse_COMMA,\n        \"SEMI\": parse_SEMI,\n        \"COLON\": parse_COLON,\n        \"LDQUOT\": parse_LDQUOT,\n        \"RDQUOT\": parse_RDQUOT,\n        \"comment\": parse_comment,\n        \"ctext\": parse_ctext,\n        \"quoted_string\": parse_quoted_string,\n        \"quoted_string_clean\": parse_quoted_string_clean,\n        \"qdtext\": parse_qdtext,\n        \"quoted_pair\": parse_quoted_pair,\n        \"SIP_URI_noparams\": parse_SIP_URI_noparams,\n        \"SIP_URI\": parse_SIP_URI,\n        \"uri_scheme\": parse_uri_scheme,\n        \"uri_scheme_sips\": parse_uri_scheme_sips,\n        \"uri_scheme_sip\": parse_uri_scheme_sip,\n        \"userinfo\": parse_userinfo,\n        \"user\": parse_user,\n        \"user_unreserved\": parse_user_unreserved,\n        \"password\": parse_password,\n        \"hostport\": parse_hostport,\n        \"host\": parse_host,\n        \"hostname\": parse_hostname,\n        \"domainlabel\": parse_domainlabel,\n        \"toplabel\": parse_toplabel,\n        \"IPv6reference\": parse_IPv6reference,\n        \"IPv6address\": parse_IPv6address,\n        \"h16\": parse_h16,\n        \"ls32\": parse_ls32,\n        \"IPv4address\": parse_IPv4address,\n        \"dec_octet\": parse_dec_octet,\n        \"port\": parse_port,\n        \"uri_parameters\": parse_uri_parameters,\n        \"uri_parameter\": parse_uri_parameter,\n        \"transport_param\": parse_transport_param,\n        \"user_param\": parse_user_param,\n        \"method_param\": parse_method_param,\n        \"ttl_param\": parse_ttl_param,\n        \"maddr_param\": parse_maddr_param,\n        \"lr_param\": parse_lr_param,\n        \"other_param\": parse_other_param,\n        \"pname\": parse_pname,\n        \"pvalue\": parse_pvalue,\n        \"paramchar\": parse_paramchar,\n        \"param_unreserved\": parse_param_unreserved,\n        \"headers\": parse_headers,\n        \"header\": parse_header,\n        \"hname\": parse_hname,\n        \"hvalue\": parse_hvalue,\n        \"hnv_unreserved\": parse_hnv_unreserved,\n        \"Request_Response\": parse_Request_Response,\n        \"Request_Line\": parse_Request_Line,\n        \"Request_URI\": parse_Request_URI,\n        \"absoluteURI\": parse_absoluteURI,\n        \"hier_part\": parse_hier_part,\n        \"net_path\": parse_net_path,\n        \"abs_path\": parse_abs_path,\n        \"opaque_part\": parse_opaque_part,\n        \"uric\": parse_uric,\n        \"uric_no_slash\": parse_uric_no_slash,\n        \"path_segments\": parse_path_segments,\n        \"segment\": parse_segment,\n        \"param\": parse_param,\n        \"pchar\": parse_pchar,\n        \"scheme\": parse_scheme,\n        \"authority\": parse_authority,\n        \"srvr\": parse_srvr,\n        \"reg_name\": parse_reg_name,\n        \"query\": parse_query,\n        \"SIP_Version\": parse_SIP_Version,\n        \"INVITEm\": parse_INVITEm,\n        \"ACKm\": parse_ACKm,\n        \"OPTIONSm\": parse_OPTIONSm,\n        \"BYEm\": parse_BYEm,\n        \"CANCELm\": parse_CANCELm,\n        \"REGISTERm\": parse_REGISTERm,\n        \"SUBSCRIBEm\": parse_SUBSCRIBEm,\n        \"NOTIFYm\": parse_NOTIFYm,\n        \"REFERm\": parse_REFERm,\n        \"Method\": parse_Method,\n        \"Status_Line\": parse_Status_Line,\n        \"Status_Code\": parse_Status_Code,\n        \"extension_code\": parse_extension_code,\n        \"Reason_Phrase\": parse_Reason_Phrase,\n        \"Allow_Events\": parse_Allow_Events,\n        \"Call_ID\": parse_Call_ID,\n        \"Contact\": parse_Contact,\n        \"contact_param\": parse_contact_param,\n        \"name_addr\": parse_name_addr,\n        \"display_name\": parse_display_name,\n        \"contact_params\": parse_contact_params,\n        \"c_p_q\": parse_c_p_q,\n        \"c_p_expires\": parse_c_p_expires,\n        \"delta_seconds\": parse_delta_seconds,\n        \"qvalue\": parse_qvalue,\n        \"generic_param\": parse_generic_param,\n        \"gen_value\": parse_gen_value,\n        \"Content_Disposition\": parse_Content_Disposition,\n        \"disp_type\": parse_disp_type,\n        \"disp_param\": parse_disp_param,\n        \"handling_param\": parse_handling_param,\n        \"Content_Encoding\": parse_Content_Encoding,\n        \"Content_Length\": parse_Content_Length,\n        \"Content_Type\": parse_Content_Type,\n        \"media_type\": parse_media_type,\n        \"m_type\": parse_m_type,\n        \"discrete_type\": parse_discrete_type,\n        \"composite_type\": parse_composite_type,\n        \"extension_token\": parse_extension_token,\n        \"x_token\": parse_x_token,\n        \"m_subtype\": parse_m_subtype,\n        \"m_parameter\": parse_m_parameter,\n        \"m_value\": parse_m_value,\n        \"CSeq\": parse_CSeq,\n        \"CSeq_value\": parse_CSeq_value,\n        \"Expires\": parse_Expires,\n        \"Event\": parse_Event,\n        \"event_type\": parse_event_type,\n        \"From\": parse_From,\n        \"from_param\": parse_from_param,\n        \"tag_param\": parse_tag_param,\n        \"Max_Forwards\": parse_Max_Forwards,\n        \"Min_Expires\": parse_Min_Expires,\n        \"Name_Addr_Header\": parse_Name_Addr_Header,\n        \"Proxy_Authenticate\": parse_Proxy_Authenticate,\n        \"challenge\": parse_challenge,\n        \"other_challenge\": parse_other_challenge,\n        \"auth_param\": parse_auth_param,\n        \"digest_cln\": parse_digest_cln,\n        \"realm\": parse_realm,\n        \"realm_value\": parse_realm_value,\n        \"domain\": parse_domain,\n        \"URI\": parse_URI,\n        \"nonce\": parse_nonce,\n        \"nonce_value\": parse_nonce_value,\n        \"opaque\": parse_opaque,\n        \"stale\": parse_stale,\n        \"algorithm\": parse_algorithm,\n        \"qop_options\": parse_qop_options,\n        \"qop_value\": parse_qop_value,\n        \"Proxy_Require\": parse_Proxy_Require,\n        \"Record_Route\": parse_Record_Route,\n        \"rec_route\": parse_rec_route,\n        \"Reason\": parse_Reason,\n        \"reason_param\": parse_reason_param,\n        \"reason_cause\": parse_reason_cause,\n        \"Require\": parse_Require,\n        \"Route\": parse_Route,\n        \"route_param\": parse_route_param,\n        \"Subscription_State\": parse_Subscription_State,\n        \"substate_value\": parse_substate_value,\n        \"subexp_params\": parse_subexp_params,\n        \"event_reason_value\": parse_event_reason_value,\n        \"Subject\": parse_Subject,\n        \"Supported\": parse_Supported,\n        \"To\": parse_To,\n        \"to_param\": parse_to_param,\n        \"Via\": parse_Via,\n        \"via_param\": parse_via_param,\n        \"via_params\": parse_via_params,\n        \"via_ttl\": parse_via_ttl,\n        \"via_maddr\": parse_via_maddr,\n        \"via_received\": parse_via_received,\n        \"via_branch\": parse_via_branch,\n        \"response_port\": parse_response_port,\n        \"sent_protocol\": parse_sent_protocol,\n        \"protocol_name\": parse_protocol_name,\n        \"transport\": parse_transport,\n        \"sent_by\": parse_sent_by,\n        \"via_host\": parse_via_host,\n        \"via_port\": parse_via_port,\n        \"ttl\": parse_ttl,\n        \"WWW_Authenticate\": parse_WWW_Authenticate,\n        \"Session_Expires\": parse_Session_Expires,\n        \"s_e_expires\": parse_s_e_expires,\n        \"s_e_params\": parse_s_e_params,\n        \"s_e_refresher\": parse_s_e_refresher,\n        \"extension_header\": parse_extension_header,\n        \"header_value\": parse_header_value,\n        \"message_body\": parse_message_body,\n        \"uuid_URI\": parse_uuid_URI,\n        \"uuid\": parse_uuid,\n        \"hex4\": parse_hex4,\n        \"hex8\": parse_hex8,\n        \"hex12\": parse_hex12,\n        \"Refer_To\": parse_Refer_To,\n        \"Replaces\": parse_Replaces,\n        \"call_id\": parse_call_id,\n        \"replaces_param\": parse_replaces_param,\n        \"to_tag\": parse_to_tag,\n        \"from_tag\": parse_from_tag,\n        \"early_flag\": parse_early_flag\n      };\n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"CRLF\";\n      }\n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      function padLeft(input, padding, length) {\n        var result = input;\n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        return result;\n      }\n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        rightmostFailuresExpected.push(failure);\n      }\n      function parse_CRLF() {\n        var result0;\n        if (input.substr(pos, 2) === \"\\r\\n\") {\n          result0 = \"\\r\\n\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\r\\\\n\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_DIGIT() {\n        var result0;\n        if (/^[0-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9]\");\n          }\n        }\n        return result0;\n      }\n      function parse_ALPHA() {\n        var result0;\n        if (/^[a-zA-Z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[a-zA-Z]\");\n          }\n        }\n        return result0;\n      }\n      function parse_HEXDIG() {\n        var result0;\n        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9a-fA-F]\");\n          }\n        }\n        return result0;\n      }\n      function parse_WSP() {\n        var result0;\n        result0 = parse_SP();\n        if (result0 === null) {\n          result0 = parse_HTAB();\n        }\n        return result0;\n      }\n      function parse_OCTET() {\n        var result0;\n        if (/^[\\0-\\xFF]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\0-\\\\xFF]\");\n          }\n        }\n        return result0;\n      }\n      function parse_DQUOTE() {\n        var result0;\n        if (/^[\"]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\"]\");\n          }\n        }\n        return result0;\n      }\n      function parse_SP() {\n        var result0;\n        if (input.charCodeAt(pos) === 32) {\n          result0 = \" \";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\" \\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_HTAB() {\n        var result0;\n        if (input.charCodeAt(pos) === 9) {\n          result0 = \"\\t\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\t\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_alphanum() {\n        var result0;\n        if (/^[a-zA-Z0-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[a-zA-Z0-9]\");\n          }\n        }\n        return result0;\n      }\n      function parse_reserved() {\n        var result0;\n        if (input.charCodeAt(pos) === 59) {\n          result0 = \";\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\";\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 47) {\n            result0 = \"/\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 63) {\n              result0 = \"?\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"?\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 58) {\n                result0 = \":\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\":\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 64) {\n                  result0 = \"@\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"@\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 38) {\n                    result0 = \"&\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"&\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 61) {\n                      result0 = \"=\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"=\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 43) {\n                        result0 = \"+\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"+\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 36) {\n                          result0 = \"$\";\n                          pos++;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"$\\\"\");\n                          }\n                        }\n                        if (result0 === null) {\n                          if (input.charCodeAt(pos) === 44) {\n                            result0 = \",\";\n                            pos++;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\",\\\"\");\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_unreserved() {\n        var result0;\n        result0 = parse_alphanum();\n        if (result0 === null) {\n          result0 = parse_mark();\n        }\n        return result0;\n      }\n      function parse_mark() {\n        var result0;\n        if (input.charCodeAt(pos) === 45) {\n          result0 = \"-\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"-\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 95) {\n            result0 = \"_\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"_\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 46) {\n              result0 = \".\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\".\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 33) {\n                result0 = \"!\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"!\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 126) {\n                  result0 = \"~\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"~\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 42) {\n                    result0 = \"*\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"*\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 39) {\n                      result0 = \"'\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"'\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 40) {\n                        result0 = \"(\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"(\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 41) {\n                          result0 = \")\";\n                          pos++;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\")\\\"\");\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_escaped() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 37) {\n          result0 = \"%\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"%\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_HEXDIG();\n          if (result1 !== null) {\n            result2 = parse_HEXDIG();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, escaped) {return escaped.join(''); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_LWS() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        pos2 = pos;\n        result0 = [];\n        result1 = parse_WSP();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_WSP();\n        }\n        if (result0 !== null) {\n          result1 = parse_CRLF();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos2;\n          }\n        } else {\n          result0 = null;\n          pos = pos2;\n        }\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result2 = parse_WSP();\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_WSP();\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \" \"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_SWS() {\n        var result0;\n        result0 = parse_LWS();\n        result0 = result0 !== null ? result0 : \"\";\n        return result0;\n      }\n      function parse_HCOLON() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        result1 = parse_SP();\n        if (result1 === null) {\n          result1 = parse_HTAB();\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_SP();\n          if (result1 === null) {\n            result1 = parse_HTAB();\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return ':'; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_TEXT_UTF8_TRIM() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result1 = parse_TEXT_UTF8char();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_TEXT_UTF8char();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = [];\n          result3 = parse_LWS();\n          while (result3 !== null) {\n            result2.push(result3);\n            result3 = parse_LWS();\n          }\n          if (result2 !== null) {\n            result3 = parse_TEXT_UTF8char();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = [];\n            result3 = parse_LWS();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_LWS();\n            }\n            if (result2 !== null) {\n              result3 = parse_TEXT_UTF8char();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_TEXT_UTF8char() {\n        var result0;\n        if (/^[!-~]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[!-~]\");\n          }\n        }\n        if (result0 === null) {\n          result0 = parse_UTF8_NONASCII();\n        }\n        return result0;\n      }\n      function parse_UTF8_NONASCII() {\n        var result0;\n        if (/^[\\x80-\\uFFFF]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\x80-\\\\uFFFF]\");\n          }\n        }\n        return result0;\n      }\n      function parse_UTF8_CONT() {\n        var result0;\n        if (/^[\\x80-\\xBF]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\x80-\\\\xBF]\");\n          }\n        }\n        return result0;\n      }\n      function parse_LHEX() {\n        var result0;\n        result0 = parse_DIGIT();\n        if (result0 === null) {\n          if (/^[a-f]/.test(input.charAt(pos))) {\n            result0 = input.charAt(pos);\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[a-f]\");\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_token() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_alphanum();\n        if (result1 === null) {\n          if (input.charCodeAt(pos) === 45) {\n            result1 = \"-\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"-\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 46) {\n              result1 = \".\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\".\\\"\");\n              }\n            }\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 33) {\n                result1 = \"!\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"!\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 37) {\n                  result1 = \"%\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"%\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 42) {\n                    result1 = \"*\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"*\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 95) {\n                      result1 = \"_\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"_\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 43) {\n                        result1 = \"+\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"+\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 96) {\n                          result1 = \"`\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"`\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 39) {\n                            result1 = \"'\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"'\\\"\");\n                            }\n                          }\n                          if (result1 === null) {\n                            if (input.charCodeAt(pos) === 126) {\n                              result1 = \"~\";\n                              pos++;\n                            } else {\n                              result1 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"~\\\"\");\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_alphanum();\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 45) {\n                result1 = \"-\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"-\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 46) {\n                  result1 = \".\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\".\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 33) {\n                    result1 = \"!\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"!\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 37) {\n                      result1 = \"%\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"%\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 42) {\n                        result1 = \"*\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"*\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 95) {\n                          result1 = \"_\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"_\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 43) {\n                            result1 = \"+\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"+\\\"\");\n                            }\n                          }\n                          if (result1 === null) {\n                            if (input.charCodeAt(pos) === 96) {\n                              result1 = \"`\";\n                              pos++;\n                            } else {\n                              result1 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"`\\\"\");\n                              }\n                            }\n                            if (result1 === null) {\n                              if (input.charCodeAt(pos) === 39) {\n                                result1 = \"'\";\n                                pos++;\n                              } else {\n                                result1 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"'\\\"\");\n                                }\n                              }\n                              if (result1 === null) {\n                                if (input.charCodeAt(pos) === 126) {\n                                  result1 = \"~\";\n                                  pos++;\n                                } else {\n                                  result1 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\"~\\\"\");\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_token_nodot() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_alphanum();\n        if (result1 === null) {\n          if (input.charCodeAt(pos) === 45) {\n            result1 = \"-\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"-\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 33) {\n              result1 = \"!\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"!\\\"\");\n              }\n            }\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 37) {\n                result1 = \"%\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"%\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 42) {\n                  result1 = \"*\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"*\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 95) {\n                    result1 = \"_\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"_\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 43) {\n                      result1 = \"+\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"+\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 96) {\n                        result1 = \"`\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"`\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 39) {\n                          result1 = \"'\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"'\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 126) {\n                            result1 = \"~\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"~\\\"\");\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_alphanum();\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 45) {\n                result1 = \"-\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"-\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 33) {\n                  result1 = \"!\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"!\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 37) {\n                    result1 = \"%\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"%\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 42) {\n                      result1 = \"*\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"*\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 95) {\n                        result1 = \"_\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"_\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 43) {\n                          result1 = \"+\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"+\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 96) {\n                            result1 = \"`\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"`\\\"\");\n                            }\n                          }\n                          if (result1 === null) {\n                            if (input.charCodeAt(pos) === 39) {\n                              result1 = \"'\";\n                              pos++;\n                            } else {\n                              result1 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"'\\\"\");\n                              }\n                            }\n                            if (result1 === null) {\n                              if (input.charCodeAt(pos) === 126) {\n                                result1 = \"~\";\n                                pos++;\n                              } else {\n                                result1 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"~\\\"\");\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_separators() {\n        var result0;\n        if (input.charCodeAt(pos) === 40) {\n          result0 = \"(\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"(\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 41) {\n            result0 = \")\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\")\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 60) {\n              result0 = \"<\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"<\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 62) {\n                result0 = \">\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\">\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 64) {\n                  result0 = \"@\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"@\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 44) {\n                    result0 = \",\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\",\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 59) {\n                      result0 = \";\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\";\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 58) {\n                        result0 = \":\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\":\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 92) {\n                          result0 = \"\\\\\";\n                          pos++;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"\\\\\\\\\\\"\");\n                          }\n                        }\n                        if (result0 === null) {\n                          result0 = parse_DQUOTE();\n                          if (result0 === null) {\n                            if (input.charCodeAt(pos) === 47) {\n                              result0 = \"/\";\n                              pos++;\n                            } else {\n                              result0 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"/\\\"\");\n                              }\n                            }\n                            if (result0 === null) {\n                              if (input.charCodeAt(pos) === 91) {\n                                result0 = \"[\";\n                                pos++;\n                              } else {\n                                result0 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"[\\\"\");\n                                }\n                              }\n                              if (result0 === null) {\n                                if (input.charCodeAt(pos) === 93) {\n                                  result0 = \"]\";\n                                  pos++;\n                                } else {\n                                  result0 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\"]\\\"\");\n                                  }\n                                }\n                                if (result0 === null) {\n                                  if (input.charCodeAt(pos) === 63) {\n                                    result0 = \"?\";\n                                    pos++;\n                                  } else {\n                                    result0 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\"?\\\"\");\n                                    }\n                                  }\n                                  if (result0 === null) {\n                                    if (input.charCodeAt(pos) === 61) {\n                                      result0 = \"=\";\n                                      pos++;\n                                    } else {\n                                      result0 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\"=\\\"\");\n                                      }\n                                    }\n                                    if (result0 === null) {\n                                      if (input.charCodeAt(pos) === 123) {\n                                        result0 = \"{\";\n                                        pos++;\n                                      } else {\n                                        result0 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\"{\\\"\");\n                                        }\n                                      }\n                                      if (result0 === null) {\n                                        if (input.charCodeAt(pos) === 125) {\n                                          result0 = \"}\";\n                                          pos++;\n                                        } else {\n                                          result0 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\"}\\\"\");\n                                          }\n                                        }\n                                        if (result0 === null) {\n                                          result0 = parse_SP();\n                                          if (result0 === null) {\n                                            result0 = parse_HTAB();\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_word() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_alphanum();\n        if (result1 === null) {\n          if (input.charCodeAt(pos) === 45) {\n            result1 = \"-\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"-\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 46) {\n              result1 = \".\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\".\\\"\");\n              }\n            }\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 33) {\n                result1 = \"!\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"!\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 37) {\n                  result1 = \"%\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"%\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 42) {\n                    result1 = \"*\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"*\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 95) {\n                      result1 = \"_\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"_\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 43) {\n                        result1 = \"+\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"+\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 96) {\n                          result1 = \"`\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"`\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 39) {\n                            result1 = \"'\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"'\\\"\");\n                            }\n                          }\n                          if (result1 === null) {\n                            if (input.charCodeAt(pos) === 126) {\n                              result1 = \"~\";\n                              pos++;\n                            } else {\n                              result1 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"~\\\"\");\n                              }\n                            }\n                            if (result1 === null) {\n                              if (input.charCodeAt(pos) === 40) {\n                                result1 = \"(\";\n                                pos++;\n                              } else {\n                                result1 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"(\\\"\");\n                                }\n                              }\n                              if (result1 === null) {\n                                if (input.charCodeAt(pos) === 41) {\n                                  result1 = \")\";\n                                  pos++;\n                                } else {\n                                  result1 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\")\\\"\");\n                                  }\n                                }\n                                if (result1 === null) {\n                                  if (input.charCodeAt(pos) === 60) {\n                                    result1 = \"<\";\n                                    pos++;\n                                  } else {\n                                    result1 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\"<\\\"\");\n                                    }\n                                  }\n                                  if (result1 === null) {\n                                    if (input.charCodeAt(pos) === 62) {\n                                      result1 = \">\";\n                                      pos++;\n                                    } else {\n                                      result1 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\">\\\"\");\n                                      }\n                                    }\n                                    if (result1 === null) {\n                                      if (input.charCodeAt(pos) === 58) {\n                                        result1 = \":\";\n                                        pos++;\n                                      } else {\n                                        result1 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\":\\\"\");\n                                        }\n                                      }\n                                      if (result1 === null) {\n                                        if (input.charCodeAt(pos) === 92) {\n                                          result1 = \"\\\\\";\n                                          pos++;\n                                        } else {\n                                          result1 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\"\\\\\\\\\\\"\");\n                                          }\n                                        }\n                                        if (result1 === null) {\n                                          result1 = parse_DQUOTE();\n                                          if (result1 === null) {\n                                            if (input.charCodeAt(pos) === 47) {\n                                              result1 = \"/\";\n                                              pos++;\n                                            } else {\n                                              result1 = null;\n                                              if (reportFailures === 0) {\n                                                matchFailed(\"\\\"/\\\"\");\n                                              }\n                                            }\n                                            if (result1 === null) {\n                                              if (input.charCodeAt(pos) === 91) {\n                                                result1 = \"[\";\n                                                pos++;\n                                              } else {\n                                                result1 = null;\n                                                if (reportFailures === 0) {\n                                                  matchFailed(\"\\\"[\\\"\");\n                                                }\n                                              }\n                                              if (result1 === null) {\n                                                if (input.charCodeAt(pos) === 93) {\n                                                  result1 = \"]\";\n                                                  pos++;\n                                                } else {\n                                                  result1 = null;\n                                                  if (reportFailures === 0) {\n                                                    matchFailed(\"\\\"]\\\"\");\n                                                  }\n                                                }\n                                                if (result1 === null) {\n                                                  if (input.charCodeAt(pos) === 63) {\n                                                    result1 = \"?\";\n                                                    pos++;\n                                                  } else {\n                                                    result1 = null;\n                                                    if (reportFailures === 0) {\n                                                      matchFailed(\"\\\"?\\\"\");\n                                                    }\n                                                  }\n                                                  if (result1 === null) {\n                                                    if (input.charCodeAt(pos) === 123) {\n                                                      result1 = \"{\";\n                                                      pos++;\n                                                    } else {\n                                                      result1 = null;\n                                                      if (reportFailures === 0) {\n                                                        matchFailed(\"\\\"{\\\"\");\n                                                      }\n                                                    }\n                                                    if (result1 === null) {\n                                                      if (input.charCodeAt(pos) === 125) {\n                                                        result1 = \"}\";\n                                                        pos++;\n                                                      } else {\n                                                        result1 = null;\n                                                        if (reportFailures === 0) {\n                                                          matchFailed(\"\\\"}\\\"\");\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_alphanum();\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 45) {\n                result1 = \"-\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"-\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 46) {\n                  result1 = \".\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\".\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 33) {\n                    result1 = \"!\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"!\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 37) {\n                      result1 = \"%\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"%\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 42) {\n                        result1 = \"*\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"*\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 95) {\n                          result1 = \"_\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"_\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 43) {\n                            result1 = \"+\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"+\\\"\");\n                            }\n                          }\n                          if (result1 === null) {\n                            if (input.charCodeAt(pos) === 96) {\n                              result1 = \"`\";\n                              pos++;\n                            } else {\n                              result1 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"`\\\"\");\n                              }\n                            }\n                            if (result1 === null) {\n                              if (input.charCodeAt(pos) === 39) {\n                                result1 = \"'\";\n                                pos++;\n                              } else {\n                                result1 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"'\\\"\");\n                                }\n                              }\n                              if (result1 === null) {\n                                if (input.charCodeAt(pos) === 126) {\n                                  result1 = \"~\";\n                                  pos++;\n                                } else {\n                                  result1 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\"~\\\"\");\n                                  }\n                                }\n                                if (result1 === null) {\n                                  if (input.charCodeAt(pos) === 40) {\n                                    result1 = \"(\";\n                                    pos++;\n                                  } else {\n                                    result1 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\"(\\\"\");\n                                    }\n                                  }\n                                  if (result1 === null) {\n                                    if (input.charCodeAt(pos) === 41) {\n                                      result1 = \")\";\n                                      pos++;\n                                    } else {\n                                      result1 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\")\\\"\");\n                                      }\n                                    }\n                                    if (result1 === null) {\n                                      if (input.charCodeAt(pos) === 60) {\n                                        result1 = \"<\";\n                                        pos++;\n                                      } else {\n                                        result1 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\"<\\\"\");\n                                        }\n                                      }\n                                      if (result1 === null) {\n                                        if (input.charCodeAt(pos) === 62) {\n                                          result1 = \">\";\n                                          pos++;\n                                        } else {\n                                          result1 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\">\\\"\");\n                                          }\n                                        }\n                                        if (result1 === null) {\n                                          if (input.charCodeAt(pos) === 58) {\n                                            result1 = \":\";\n                                            pos++;\n                                          } else {\n                                            result1 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\":\\\"\");\n                                            }\n                                          }\n                                          if (result1 === null) {\n                                            if (input.charCodeAt(pos) === 92) {\n                                              result1 = \"\\\\\";\n                                              pos++;\n                                            } else {\n                                              result1 = null;\n                                              if (reportFailures === 0) {\n                                                matchFailed(\"\\\"\\\\\\\\\\\"\");\n                                              }\n                                            }\n                                            if (result1 === null) {\n                                              result1 = parse_DQUOTE();\n                                              if (result1 === null) {\n                                                if (input.charCodeAt(pos) === 47) {\n                                                  result1 = \"/\";\n                                                  pos++;\n                                                } else {\n                                                  result1 = null;\n                                                  if (reportFailures === 0) {\n                                                    matchFailed(\"\\\"/\\\"\");\n                                                  }\n                                                }\n                                                if (result1 === null) {\n                                                  if (input.charCodeAt(pos) === 91) {\n                                                    result1 = \"[\";\n                                                    pos++;\n                                                  } else {\n                                                    result1 = null;\n                                                    if (reportFailures === 0) {\n                                                      matchFailed(\"\\\"[\\\"\");\n                                                    }\n                                                  }\n                                                  if (result1 === null) {\n                                                    if (input.charCodeAt(pos) === 93) {\n                                                      result1 = \"]\";\n                                                      pos++;\n                                                    } else {\n                                                      result1 = null;\n                                                      if (reportFailures === 0) {\n                                                        matchFailed(\"\\\"]\\\"\");\n                                                      }\n                                                    }\n                                                    if (result1 === null) {\n                                                      if (input.charCodeAt(pos) === 63) {\n                                                        result1 = \"?\";\n                                                        pos++;\n                                                      } else {\n                                                        result1 = null;\n                                                        if (reportFailures === 0) {\n                                                          matchFailed(\"\\\"?\\\"\");\n                                                        }\n                                                      }\n                                                      if (result1 === null) {\n                                                        if (input.charCodeAt(pos) === 123) {\n                                                          result1 = \"{\";\n                                                          pos++;\n                                                        } else {\n                                                          result1 = null;\n                                                          if (reportFailures === 0) {\n                                                            matchFailed(\"\\\"{\\\"\");\n                                                          }\n                                                        }\n                                                        if (result1 === null) {\n                                                          if (input.charCodeAt(pos) === 125) {\n                                                            result1 = \"}\";\n                                                            pos++;\n                                                          } else {\n                                                            result1 = null;\n                                                            if (reportFailures === 0) {\n                                                              matchFailed(\"\\\"}\\\"\");\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_STAR() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 42) {\n            result1 = \"*\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"*\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \"*\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_SLASH() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 47) {\n            result1 = \"/\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \"/\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_EQUAL() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 61) {\n            result1 = \"=\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"=\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \"=\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_LPAREN() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 40) {\n            result1 = \"(\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"(\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \"(\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_RPAREN() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 41) {\n            result1 = \")\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\")\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \")\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_RAQUOT() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 62) {\n          result0 = \">\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\">\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_SWS();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \">\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_LAQUOT() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 60) {\n            result1 = \"<\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"<\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \"<\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_COMMA() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 44) {\n            result1 = \",\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\",\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \",\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_SEMI() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 59) {\n            result1 = \";\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\";\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \";\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_COLON() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_SWS();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \":\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_LDQUOT() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          result1 = parse_DQUOTE();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \"\\\"\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_RDQUOT() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_DQUOTE();\n        if (result0 !== null) {\n          result1 = parse_SWS();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {return \"\\\"\"; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_comment() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_LPAREN();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_ctext();\n          if (result2 === null) {\n            result2 = parse_quoted_pair();\n            if (result2 === null) {\n              result2 = parse_comment();\n            }\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_ctext();\n            if (result2 === null) {\n              result2 = parse_quoted_pair();\n              if (result2 === null) {\n                result2 = parse_comment();\n              }\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_RPAREN();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_ctext() {\n        var result0;\n        if (/^[!-']/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[!-']\");\n          }\n        }\n        if (result0 === null) {\n          if (/^[*-[]/.test(input.charAt(pos))) {\n            result0 = input.charAt(pos);\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[*-[]\");\n            }\n          }\n          if (result0 === null) {\n            if (/^[\\]-~]/.test(input.charAt(pos))) {\n              result0 = input.charAt(pos);\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[\\\\]-~]\");\n              }\n            }\n            if (result0 === null) {\n              result0 = parse_UTF8_NONASCII();\n              if (result0 === null) {\n                result0 = parse_LWS();\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_quoted_string() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          result1 = parse_DQUOTE();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_qdtext();\n            if (result3 === null) {\n              result3 = parse_quoted_pair();\n            }\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_qdtext();\n              if (result3 === null) {\n                result3 = parse_quoted_pair();\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse_DQUOTE();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_quoted_string_clean() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SWS();\n        if (result0 !== null) {\n          result1 = parse_DQUOTE();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_qdtext();\n            if (result3 === null) {\n              result3 = parse_quoted_pair();\n            }\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_qdtext();\n              if (result3 === null) {\n                result3 = parse_quoted_pair();\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse_DQUOTE();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                                return input.substring(pos-1, offset+1); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_qdtext() {\n        var result0;\n        result0 = parse_LWS();\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 33) {\n            result0 = \"!\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"!\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (/^[#-[]/.test(input.charAt(pos))) {\n              result0 = input.charAt(pos);\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[#-[]\");\n              }\n            }\n            if (result0 === null) {\n              if (/^[\\]-~]/.test(input.charAt(pos))) {\n                result0 = input.charAt(pos);\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"[\\\\]-~]\");\n                }\n              }\n              if (result0 === null) {\n                result0 = parse_UTF8_NONASCII();\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_quoted_pair() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 92) {\n          result0 = \"\\\\\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\\\\\\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (/^[\\0-\\t]/.test(input.charAt(pos))) {\n            result1 = input.charAt(pos);\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[\\\\0-\\\\t]\");\n            }\n          }\n          if (result1 === null) {\n            if (/^[\\x0B-\\f]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[\\\\x0B-\\\\f]\");\n              }\n            }\n            if (result1 === null) {\n              if (/^[\\x0E-]/.test(input.charAt(pos))) {\n                result1 = input.charAt(pos);\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"[\\\\x0E-]\");\n                }\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_SIP_URI_noparams() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_uri_scheme();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_userinfo();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result3 = parse_hostport();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            try {\n                                data.uri = new URI(data.scheme, data.user, data.host, data.port);\n                                delete data.scheme;\n                                delete data.user;\n                                delete data.host;\n                                delete data.host_type;\n                                delete data.port;\n                              } catch(e) {\n                                data = -1;\n                              }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_SIP_URI() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_uri_scheme();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_userinfo();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result3 = parse_hostport();\n              if (result3 !== null) {\n                result4 = parse_uri_parameters();\n                if (result4 !== null) {\n                  result5 = parse_headers();\n                  result5 = result5 !== null ? result5 : \"\";\n                  if (result5 !== null) {\n                    result0 = [result0, result1, result2, result3, result4, result5];\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            var header;\n                            try {\n                                data.uri = new URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                delete data.scheme;\n                                delete data.user;\n                                delete data.host;\n                                delete data.host_type;\n                                delete data.port;\n                                delete data.uri_params;\n                                if (startRule === 'SIP_URI') { data = data.uri;}\n                              } catch(e) {\n                                data = -1;\n                              }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_uri_scheme() {\n        var result0;\n        result0 = parse_uri_scheme_sips();\n        if (result0 === null) {\n          result0 = parse_uri_scheme_sip();\n        }\n        return result0;\n      }\n      function parse_uri_scheme_sips() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 4).toLowerCase() === \"sips\") {\n          result0 = input.substr(pos, 4);\n          pos += 4;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"sips\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, scheme) {\n                            data.scheme = scheme.toLowerCase(); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_uri_scheme_sip() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"sip\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"sip\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, scheme) {\n                            data.scheme = scheme.toLowerCase(); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_userinfo() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_user();\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_password();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 64) {\n              result2 = \"@\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"@\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.user = decodeURIComponent(input.substring(pos-1, offset));})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_user() {\n        var result0, result1;\n        result1 = parse_unreserved();\n        if (result1 === null) {\n          result1 = parse_escaped();\n          if (result1 === null) {\n            result1 = parse_user_unreserved();\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_unreserved();\n            if (result1 === null) {\n              result1 = parse_escaped();\n              if (result1 === null) {\n                result1 = parse_user_unreserved();\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        return result0;\n      }\n      function parse_user_unreserved() {\n        var result0;\n        if (input.charCodeAt(pos) === 38) {\n          result0 = \"&\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"&\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 61) {\n            result0 = \"=\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"=\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 43) {\n              result0 = \"+\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"+\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 36) {\n                result0 = \"$\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"$\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 44) {\n                  result0 = \",\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\",\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 59) {\n                    result0 = \";\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\";\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 63) {\n                      result0 = \"?\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"?\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 47) {\n                        result0 = \"/\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"/\\\"\");\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_password() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result0 = [];\n        result1 = parse_unreserved();\n        if (result1 === null) {\n          result1 = parse_escaped();\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 38) {\n              result1 = \"&\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"&\\\"\");\n              }\n            }\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 61) {\n                result1 = \"=\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"=\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 43) {\n                  result1 = \"+\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"+\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 36) {\n                    result1 = \"$\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"$\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 44) {\n                      result1 = \",\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\",\\\"\");\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_unreserved();\n          if (result1 === null) {\n            result1 = parse_escaped();\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 38) {\n                result1 = \"&\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"&\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 61) {\n                  result1 = \"=\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"=\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 43) {\n                    result1 = \"+\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"+\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 36) {\n                      result1 = \"$\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"$\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 44) {\n                        result1 = \",\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\",\\\"\");\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.password = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_hostport() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_host();\n        if (result0 !== null) {\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_port();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos1;\n            }\n          } else {\n            result1 = null;\n            pos = pos1;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_host() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_hostname();\n        if (result0 === null) {\n          result0 = parse_IPv4address();\n          if (result0 === null) {\n            result0 = parse_IPv6reference();\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.host = input.substring(pos, offset).toLowerCase();\n                            return data.host; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_hostname() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        pos2 = pos;\n        result1 = parse_domainlabel();\n        if (result1 !== null) {\n          if (input.charCodeAt(pos) === 46) {\n            result2 = \".\";\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\".\\\"\");\n            }\n          }\n          if (result2 !== null) {\n            result1 = [result1, result2];\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n        } else {\n          result1 = null;\n          pos = pos2;\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          pos2 = pos;\n          result1 = parse_domainlabel();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 46) {\n              result2 = \".\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\".\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_toplabel();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 46) {\n              result2 = \".\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\".\\\"\");\n              }\n            }\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          data.host_type = 'domain';\n                          return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_domainlabel() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_alphanum();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_alphanum();\n          if (result2 === null) {\n            if (input.charCodeAt(pos) === 45) {\n              result2 = \"-\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"-\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 95) {\n                result2 = \"_\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"_\\\"\");\n                }\n              }\n            }\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_alphanum();\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 45) {\n                result2 = \"-\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"-\\\"\");\n                }\n              }\n              if (result2 === null) {\n                if (input.charCodeAt(pos) === 95) {\n                  result2 = \"_\";\n                  pos++;\n                } else {\n                  result2 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"_\\\"\");\n                  }\n                }\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_toplabel() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_ALPHA();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_alphanum();\n          if (result2 === null) {\n            if (input.charCodeAt(pos) === 45) {\n              result2 = \"-\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"-\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 95) {\n                result2 = \"_\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"_\\\"\");\n                }\n              }\n            }\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_alphanum();\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 45) {\n                result2 = \"-\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"-\\\"\");\n                }\n              }\n              if (result2 === null) {\n                if (input.charCodeAt(pos) === 95) {\n                  result2 = \"_\";\n                  pos++;\n                } else {\n                  result2 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"_\\\"\");\n                  }\n                }\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_IPv6reference() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 91) {\n          result0 = \"[\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"[\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_IPv6address();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 93) {\n              result2 = \"]\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"]\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.host_type = 'IPv6';\n                            return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_IPv6address() {\n        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_h16();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_h16();\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 58) {\n                result3 = \":\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\":\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse_h16();\n                if (result4 !== null) {\n                  if (input.charCodeAt(pos) === 58) {\n                    result5 = \":\";\n                    pos++;\n                  } else {\n                    result5 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\":\\\"\");\n                    }\n                  }\n                  if (result5 !== null) {\n                    result6 = parse_h16();\n                    if (result6 !== null) {\n                      if (input.charCodeAt(pos) === 58) {\n                        result7 = \":\";\n                        pos++;\n                      } else {\n                        result7 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\":\\\"\");\n                        }\n                      }\n                      if (result7 !== null) {\n                        result8 = parse_h16();\n                        if (result8 !== null) {\n                          if (input.charCodeAt(pos) === 58) {\n                            result9 = \":\";\n                            pos++;\n                          } else {\n                            result9 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\":\\\"\");\n                            }\n                          }\n                          if (result9 !== null) {\n                            result10 = parse_h16();\n                            if (result10 !== null) {\n                              if (input.charCodeAt(pos) === 58) {\n                                result11 = \":\";\n                                pos++;\n                              } else {\n                                result11 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\":\\\"\");\n                                }\n                              }\n                              if (result11 !== null) {\n                                result12 = parse_ls32();\n                                if (result12 !== null) {\n                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 === null) {\n          pos1 = pos;\n          if (input.substr(pos, 2) === \"::\") {\n            result0 = \"::\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"::\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_h16();\n            if (result1 !== null) {\n              if (input.charCodeAt(pos) === 58) {\n                result2 = \":\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\":\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result3 = parse_h16();\n                if (result3 !== null) {\n                  if (input.charCodeAt(pos) === 58) {\n                    result4 = \":\";\n                    pos++;\n                  } else {\n                    result4 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\":\\\"\");\n                    }\n                  }\n                  if (result4 !== null) {\n                    result5 = parse_h16();\n                    if (result5 !== null) {\n                      if (input.charCodeAt(pos) === 58) {\n                        result6 = \":\";\n                        pos++;\n                      } else {\n                        result6 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\":\\\"\");\n                        }\n                      }\n                      if (result6 !== null) {\n                        result7 = parse_h16();\n                        if (result7 !== null) {\n                          if (input.charCodeAt(pos) === 58) {\n                            result8 = \":\";\n                            pos++;\n                          } else {\n                            result8 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\":\\\"\");\n                            }\n                          }\n                          if (result8 !== null) {\n                            result9 = parse_h16();\n                            if (result9 !== null) {\n                              if (input.charCodeAt(pos) === 58) {\n                                result10 = \":\";\n                                pos++;\n                              } else {\n                                result10 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\":\\\"\");\n                                }\n                              }\n                              if (result10 !== null) {\n                                result11 = parse_ls32();\n                                if (result11 !== null) {\n                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 === null) {\n            pos1 = pos;\n            if (input.substr(pos, 2) === \"::\") {\n              result0 = \"::\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"::\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result1 = parse_h16();\n              if (result1 !== null) {\n                if (input.charCodeAt(pos) === 58) {\n                  result2 = \":\";\n                  pos++;\n                } else {\n                  result2 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\":\\\"\");\n                  }\n                }\n                if (result2 !== null) {\n                  result3 = parse_h16();\n                  if (result3 !== null) {\n                    if (input.charCodeAt(pos) === 58) {\n                      result4 = \":\";\n                      pos++;\n                    } else {\n                      result4 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\":\\\"\");\n                      }\n                    }\n                    if (result4 !== null) {\n                      result5 = parse_h16();\n                      if (result5 !== null) {\n                        if (input.charCodeAt(pos) === 58) {\n                          result6 = \":\";\n                          pos++;\n                        } else {\n                          result6 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\":\\\"\");\n                          }\n                        }\n                        if (result6 !== null) {\n                          result7 = parse_h16();\n                          if (result7 !== null) {\n                            if (input.charCodeAt(pos) === 58) {\n                              result8 = \":\";\n                              pos++;\n                            } else {\n                              result8 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\":\\\"\");\n                              }\n                            }\n                            if (result8 !== null) {\n                              result9 = parse_ls32();\n                              if (result9 !== null) {\n                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 === null) {\n              pos1 = pos;\n              if (input.substr(pos, 2) === \"::\") {\n                result0 = \"::\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"::\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result1 = parse_h16();\n                if (result1 !== null) {\n                  if (input.charCodeAt(pos) === 58) {\n                    result2 = \":\";\n                    pos++;\n                  } else {\n                    result2 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\":\\\"\");\n                    }\n                  }\n                  if (result2 !== null) {\n                    result3 = parse_h16();\n                    if (result3 !== null) {\n                      if (input.charCodeAt(pos) === 58) {\n                        result4 = \":\";\n                        pos++;\n                      } else {\n                        result4 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\":\\\"\");\n                        }\n                      }\n                      if (result4 !== null) {\n                        result5 = parse_h16();\n                        if (result5 !== null) {\n                          if (input.charCodeAt(pos) === 58) {\n                            result6 = \":\";\n                            pos++;\n                          } else {\n                            result6 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\":\\\"\");\n                            }\n                          }\n                          if (result6 !== null) {\n                            result7 = parse_ls32();\n                            if (result7 !== null) {\n                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n              if (result0 === null) {\n                pos1 = pos;\n                if (input.substr(pos, 2) === \"::\") {\n                  result0 = \"::\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"::\\\"\");\n                  }\n                }\n                if (result0 !== null) {\n                  result1 = parse_h16();\n                  if (result1 !== null) {\n                    if (input.charCodeAt(pos) === 58) {\n                      result2 = \":\";\n                      pos++;\n                    } else {\n                      result2 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\":\\\"\");\n                      }\n                    }\n                    if (result2 !== null) {\n                      result3 = parse_h16();\n                      if (result3 !== null) {\n                        if (input.charCodeAt(pos) === 58) {\n                          result4 = \":\";\n                          pos++;\n                        } else {\n                          result4 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\":\\\"\");\n                          }\n                        }\n                        if (result4 !== null) {\n                          result5 = parse_ls32();\n                          if (result5 !== null) {\n                            result0 = [result0, result1, result2, result3, result4, result5];\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n                if (result0 === null) {\n                  pos1 = pos;\n                  if (input.substr(pos, 2) === \"::\") {\n                    result0 = \"::\";\n                    pos += 2;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"::\\\"\");\n                    }\n                  }\n                  if (result0 !== null) {\n                    result1 = parse_h16();\n                    if (result1 !== null) {\n                      if (input.charCodeAt(pos) === 58) {\n                        result2 = \":\";\n                        pos++;\n                      } else {\n                        result2 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\":\\\"\");\n                        }\n                      }\n                      if (result2 !== null) {\n                        result3 = parse_ls32();\n                        if (result3 !== null) {\n                          result0 = [result0, result1, result2, result3];\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                  if (result0 === null) {\n                    pos1 = pos;\n                    if (input.substr(pos, 2) === \"::\") {\n                      result0 = \"::\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"::\\\"\");\n                      }\n                    }\n                    if (result0 !== null) {\n                      result1 = parse_ls32();\n                      if (result1 !== null) {\n                        result0 = [result0, result1];\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                    if (result0 === null) {\n                      pos1 = pos;\n                      if (input.substr(pos, 2) === \"::\") {\n                        result0 = \"::\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"::\\\"\");\n                        }\n                      }\n                      if (result0 !== null) {\n                        result1 = parse_h16();\n                        if (result1 !== null) {\n                          result0 = [result0, result1];\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                      if (result0 === null) {\n                        pos1 = pos;\n                        result0 = parse_h16();\n                        if (result0 !== null) {\n                          if (input.substr(pos, 2) === \"::\") {\n                            result1 = \"::\";\n                            pos += 2;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"::\\\"\");\n                            }\n                          }\n                          if (result1 !== null) {\n                            result2 = parse_h16();\n                            if (result2 !== null) {\n                              if (input.charCodeAt(pos) === 58) {\n                                result3 = \":\";\n                                pos++;\n                              } else {\n                                result3 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\":\\\"\");\n                                }\n                              }\n                              if (result3 !== null) {\n                                result4 = parse_h16();\n                                if (result4 !== null) {\n                                  if (input.charCodeAt(pos) === 58) {\n                                    result5 = \":\";\n                                    pos++;\n                                  } else {\n                                    result5 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\":\\\"\");\n                                    }\n                                  }\n                                  if (result5 !== null) {\n                                    result6 = parse_h16();\n                                    if (result6 !== null) {\n                                      if (input.charCodeAt(pos) === 58) {\n                                        result7 = \":\";\n                                        pos++;\n                                      } else {\n                                        result7 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\":\\\"\");\n                                        }\n                                      }\n                                      if (result7 !== null) {\n                                        result8 = parse_h16();\n                                        if (result8 !== null) {\n                                          if (input.charCodeAt(pos) === 58) {\n                                            result9 = \":\";\n                                            pos++;\n                                          } else {\n                                            result9 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\":\\\"\");\n                                            }\n                                          }\n                                          if (result9 !== null) {\n                                            result10 = parse_ls32();\n                                            if (result10 !== null) {\n                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];\n                                            } else {\n                                              result0 = null;\n                                              pos = pos1;\n                                            }\n                                          } else {\n                                            result0 = null;\n                                            pos = pos1;\n                                          }\n                                        } else {\n                                          result0 = null;\n                                          pos = pos1;\n                                        }\n                                      } else {\n                                        result0 = null;\n                                        pos = pos1;\n                                      }\n                                    } else {\n                                      result0 = null;\n                                      pos = pos1;\n                                    }\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                        if (result0 === null) {\n                          pos1 = pos;\n                          result0 = parse_h16();\n                          if (result0 !== null) {\n                            pos2 = pos;\n                            if (input.charCodeAt(pos) === 58) {\n                              result1 = \":\";\n                              pos++;\n                            } else {\n                              result1 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\":\\\"\");\n                              }\n                            }\n                            if (result1 !== null) {\n                              result2 = parse_h16();\n                              if (result2 !== null) {\n                                result1 = [result1, result2];\n                              } else {\n                                result1 = null;\n                                pos = pos2;\n                              }\n                            } else {\n                              result1 = null;\n                              pos = pos2;\n                            }\n                            result1 = result1 !== null ? result1 : \"\";\n                            if (result1 !== null) {\n                              if (input.substr(pos, 2) === \"::\") {\n                                result2 = \"::\";\n                                pos += 2;\n                              } else {\n                                result2 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"::\\\"\");\n                                }\n                              }\n                              if (result2 !== null) {\n                                result3 = parse_h16();\n                                if (result3 !== null) {\n                                  if (input.charCodeAt(pos) === 58) {\n                                    result4 = \":\";\n                                    pos++;\n                                  } else {\n                                    result4 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\":\\\"\");\n                                    }\n                                  }\n                                  if (result4 !== null) {\n                                    result5 = parse_h16();\n                                    if (result5 !== null) {\n                                      if (input.charCodeAt(pos) === 58) {\n                                        result6 = \":\";\n                                        pos++;\n                                      } else {\n                                        result6 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\":\\\"\");\n                                        }\n                                      }\n                                      if (result6 !== null) {\n                                        result7 = parse_h16();\n                                        if (result7 !== null) {\n                                          if (input.charCodeAt(pos) === 58) {\n                                            result8 = \":\";\n                                            pos++;\n                                          } else {\n                                            result8 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\":\\\"\");\n                                            }\n                                          }\n                                          if (result8 !== null) {\n                                            result9 = parse_ls32();\n                                            if (result9 !== null) {\n                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];\n                                            } else {\n                                              result0 = null;\n                                              pos = pos1;\n                                            }\n                                          } else {\n                                            result0 = null;\n                                            pos = pos1;\n                                          }\n                                        } else {\n                                          result0 = null;\n                                          pos = pos1;\n                                        }\n                                      } else {\n                                        result0 = null;\n                                        pos = pos1;\n                                      }\n                                    } else {\n                                      result0 = null;\n                                      pos = pos1;\n                                    }\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                          if (result0 === null) {\n                            pos1 = pos;\n                            result0 = parse_h16();\n                            if (result0 !== null) {\n                              pos2 = pos;\n                              if (input.charCodeAt(pos) === 58) {\n                                result1 = \":\";\n                                pos++;\n                              } else {\n                                result1 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\":\\\"\");\n                                }\n                              }\n                              if (result1 !== null) {\n                                result2 = parse_h16();\n                                if (result2 !== null) {\n                                  result1 = [result1, result2];\n                                } else {\n                                  result1 = null;\n                                  pos = pos2;\n                                }\n                              } else {\n                                result1 = null;\n                                pos = pos2;\n                              }\n                              result1 = result1 !== null ? result1 : \"\";\n                              if (result1 !== null) {\n                                pos2 = pos;\n                                if (input.charCodeAt(pos) === 58) {\n                                  result2 = \":\";\n                                  pos++;\n                                } else {\n                                  result2 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\":\\\"\");\n                                  }\n                                }\n                                if (result2 !== null) {\n                                  result3 = parse_h16();\n                                  if (result3 !== null) {\n                                    result2 = [result2, result3];\n                                  } else {\n                                    result2 = null;\n                                    pos = pos2;\n                                  }\n                                } else {\n                                  result2 = null;\n                                  pos = pos2;\n                                }\n                                result2 = result2 !== null ? result2 : \"\";\n                                if (result2 !== null) {\n                                  if (input.substr(pos, 2) === \"::\") {\n                                    result3 = \"::\";\n                                    pos += 2;\n                                  } else {\n                                    result3 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\"::\\\"\");\n                                    }\n                                  }\n                                  if (result3 !== null) {\n                                    result4 = parse_h16();\n                                    if (result4 !== null) {\n                                      if (input.charCodeAt(pos) === 58) {\n                                        result5 = \":\";\n                                        pos++;\n                                      } else {\n                                        result5 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\":\\\"\");\n                                        }\n                                      }\n                                      if (result5 !== null) {\n                                        result6 = parse_h16();\n                                        if (result6 !== null) {\n                                          if (input.charCodeAt(pos) === 58) {\n                                            result7 = \":\";\n                                            pos++;\n                                          } else {\n                                            result7 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\":\\\"\");\n                                            }\n                                          }\n                                          if (result7 !== null) {\n                                            result8 = parse_ls32();\n                                            if (result8 !== null) {\n                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];\n                                            } else {\n                                              result0 = null;\n                                              pos = pos1;\n                                            }\n                                          } else {\n                                            result0 = null;\n                                            pos = pos1;\n                                          }\n                                        } else {\n                                          result0 = null;\n                                          pos = pos1;\n                                        }\n                                      } else {\n                                        result0 = null;\n                                        pos = pos1;\n                                      }\n                                    } else {\n                                      result0 = null;\n                                      pos = pos1;\n                                    }\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                            if (result0 === null) {\n                              pos1 = pos;\n                              result0 = parse_h16();\n                              if (result0 !== null) {\n                                pos2 = pos;\n                                if (input.charCodeAt(pos) === 58) {\n                                  result1 = \":\";\n                                  pos++;\n                                } else {\n                                  result1 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\":\\\"\");\n                                  }\n                                }\n                                if (result1 !== null) {\n                                  result2 = parse_h16();\n                                  if (result2 !== null) {\n                                    result1 = [result1, result2];\n                                  } else {\n                                    result1 = null;\n                                    pos = pos2;\n                                  }\n                                } else {\n                                  result1 = null;\n                                  pos = pos2;\n                                }\n                                result1 = result1 !== null ? result1 : \"\";\n                                if (result1 !== null) {\n                                  pos2 = pos;\n                                  if (input.charCodeAt(pos) === 58) {\n                                    result2 = \":\";\n                                    pos++;\n                                  } else {\n                                    result2 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\":\\\"\");\n                                    }\n                                  }\n                                  if (result2 !== null) {\n                                    result3 = parse_h16();\n                                    if (result3 !== null) {\n                                      result2 = [result2, result3];\n                                    } else {\n                                      result2 = null;\n                                      pos = pos2;\n                                    }\n                                  } else {\n                                    result2 = null;\n                                    pos = pos2;\n                                  }\n                                  result2 = result2 !== null ? result2 : \"\";\n                                  if (result2 !== null) {\n                                    pos2 = pos;\n                                    if (input.charCodeAt(pos) === 58) {\n                                      result3 = \":\";\n                                      pos++;\n                                    } else {\n                                      result3 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\":\\\"\");\n                                      }\n                                    }\n                                    if (result3 !== null) {\n                                      result4 = parse_h16();\n                                      if (result4 !== null) {\n                                        result3 = [result3, result4];\n                                      } else {\n                                        result3 = null;\n                                        pos = pos2;\n                                      }\n                                    } else {\n                                      result3 = null;\n                                      pos = pos2;\n                                    }\n                                    result3 = result3 !== null ? result3 : \"\";\n                                    if (result3 !== null) {\n                                      if (input.substr(pos, 2) === \"::\") {\n                                        result4 = \"::\";\n                                        pos += 2;\n                                      } else {\n                                        result4 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\"::\\\"\");\n                                        }\n                                      }\n                                      if (result4 !== null) {\n                                        result5 = parse_h16();\n                                        if (result5 !== null) {\n                                          if (input.charCodeAt(pos) === 58) {\n                                            result6 = \":\";\n                                            pos++;\n                                          } else {\n                                            result6 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\":\\\"\");\n                                            }\n                                          }\n                                          if (result6 !== null) {\n                                            result7 = parse_ls32();\n                                            if (result7 !== null) {\n                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n                                            } else {\n                                              result0 = null;\n                                              pos = pos1;\n                                            }\n                                          } else {\n                                            result0 = null;\n                                            pos = pos1;\n                                          }\n                                        } else {\n                                          result0 = null;\n                                          pos = pos1;\n                                        }\n                                      } else {\n                                        result0 = null;\n                                        pos = pos1;\n                                      }\n                                    } else {\n                                      result0 = null;\n                                      pos = pos1;\n                                    }\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                              if (result0 === null) {\n                                pos1 = pos;\n                                result0 = parse_h16();\n                                if (result0 !== null) {\n                                  pos2 = pos;\n                                  if (input.charCodeAt(pos) === 58) {\n                                    result1 = \":\";\n                                    pos++;\n                                  } else {\n                                    result1 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\":\\\"\");\n                                    }\n                                  }\n                                  if (result1 !== null) {\n                                    result2 = parse_h16();\n                                    if (result2 !== null) {\n                                      result1 = [result1, result2];\n                                    } else {\n                                      result1 = null;\n                                      pos = pos2;\n                                    }\n                                  } else {\n                                    result1 = null;\n                                    pos = pos2;\n                                  }\n                                  result1 = result1 !== null ? result1 : \"\";\n                                  if (result1 !== null) {\n                                    pos2 = pos;\n                                    if (input.charCodeAt(pos) === 58) {\n                                      result2 = \":\";\n                                      pos++;\n                                    } else {\n                                      result2 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\":\\\"\");\n                                      }\n                                    }\n                                    if (result2 !== null) {\n                                      result3 = parse_h16();\n                                      if (result3 !== null) {\n                                        result2 = [result2, result3];\n                                      } else {\n                                        result2 = null;\n                                        pos = pos2;\n                                      }\n                                    } else {\n                                      result2 = null;\n                                      pos = pos2;\n                                    }\n                                    result2 = result2 !== null ? result2 : \"\";\n                                    if (result2 !== null) {\n                                      pos2 = pos;\n                                      if (input.charCodeAt(pos) === 58) {\n                                        result3 = \":\";\n                                        pos++;\n                                      } else {\n                                        result3 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\":\\\"\");\n                                        }\n                                      }\n                                      if (result3 !== null) {\n                                        result4 = parse_h16();\n                                        if (result4 !== null) {\n                                          result3 = [result3, result4];\n                                        } else {\n                                          result3 = null;\n                                          pos = pos2;\n                                        }\n                                      } else {\n                                        result3 = null;\n                                        pos = pos2;\n                                      }\n                                      result3 = result3 !== null ? result3 : \"\";\n                                      if (result3 !== null) {\n                                        pos2 = pos;\n                                        if (input.charCodeAt(pos) === 58) {\n                                          result4 = \":\";\n                                          pos++;\n                                        } else {\n                                          result4 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\":\\\"\");\n                                          }\n                                        }\n                                        if (result4 !== null) {\n                                          result5 = parse_h16();\n                                          if (result5 !== null) {\n                                            result4 = [result4, result5];\n                                          } else {\n                                            result4 = null;\n                                            pos = pos2;\n                                          }\n                                        } else {\n                                          result4 = null;\n                                          pos = pos2;\n                                        }\n                                        result4 = result4 !== null ? result4 : \"\";\n                                        if (result4 !== null) {\n                                          if (input.substr(pos, 2) === \"::\") {\n                                            result5 = \"::\";\n                                            pos += 2;\n                                          } else {\n                                            result5 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\"::\\\"\");\n                                            }\n                                          }\n                                          if (result5 !== null) {\n                                            result6 = parse_ls32();\n                                            if (result6 !== null) {\n                                              result0 = [result0, result1, result2, result3, result4, result5, result6];\n                                            } else {\n                                              result0 = null;\n                                              pos = pos1;\n                                            }\n                                          } else {\n                                            result0 = null;\n                                            pos = pos1;\n                                          }\n                                        } else {\n                                          result0 = null;\n                                          pos = pos1;\n                                        }\n                                      } else {\n                                        result0 = null;\n                                        pos = pos1;\n                                      }\n                                    } else {\n                                      result0 = null;\n                                      pos = pos1;\n                                    }\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                                if (result0 === null) {\n                                  pos1 = pos;\n                                  result0 = parse_h16();\n                                  if (result0 !== null) {\n                                    pos2 = pos;\n                                    if (input.charCodeAt(pos) === 58) {\n                                      result1 = \":\";\n                                      pos++;\n                                    } else {\n                                      result1 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\":\\\"\");\n                                      }\n                                    }\n                                    if (result1 !== null) {\n                                      result2 = parse_h16();\n                                      if (result2 !== null) {\n                                        result1 = [result1, result2];\n                                      } else {\n                                        result1 = null;\n                                        pos = pos2;\n                                      }\n                                    } else {\n                                      result1 = null;\n                                      pos = pos2;\n                                    }\n                                    result1 = result1 !== null ? result1 : \"\";\n                                    if (result1 !== null) {\n                                      pos2 = pos;\n                                      if (input.charCodeAt(pos) === 58) {\n                                        result2 = \":\";\n                                        pos++;\n                                      } else {\n                                        result2 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\":\\\"\");\n                                        }\n                                      }\n                                      if (result2 !== null) {\n                                        result3 = parse_h16();\n                                        if (result3 !== null) {\n                                          result2 = [result2, result3];\n                                        } else {\n                                          result2 = null;\n                                          pos = pos2;\n                                        }\n                                      } else {\n                                        result2 = null;\n                                        pos = pos2;\n                                      }\n                                      result2 = result2 !== null ? result2 : \"\";\n                                      if (result2 !== null) {\n                                        pos2 = pos;\n                                        if (input.charCodeAt(pos) === 58) {\n                                          result3 = \":\";\n                                          pos++;\n                                        } else {\n                                          result3 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\":\\\"\");\n                                          }\n                                        }\n                                        if (result3 !== null) {\n                                          result4 = parse_h16();\n                                          if (result4 !== null) {\n                                            result3 = [result3, result4];\n                                          } else {\n                                            result3 = null;\n                                            pos = pos2;\n                                          }\n                                        } else {\n                                          result3 = null;\n                                          pos = pos2;\n                                        }\n                                        result3 = result3 !== null ? result3 : \"\";\n                                        if (result3 !== null) {\n                                          pos2 = pos;\n                                          if (input.charCodeAt(pos) === 58) {\n                                            result4 = \":\";\n                                            pos++;\n                                          } else {\n                                            result4 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\":\\\"\");\n                                            }\n                                          }\n                                          if (result4 !== null) {\n                                            result5 = parse_h16();\n                                            if (result5 !== null) {\n                                              result4 = [result4, result5];\n                                            } else {\n                                              result4 = null;\n                                              pos = pos2;\n                                            }\n                                          } else {\n                                            result4 = null;\n                                            pos = pos2;\n                                          }\n                                          result4 = result4 !== null ? result4 : \"\";\n                                          if (result4 !== null) {\n                                            pos2 = pos;\n                                            if (input.charCodeAt(pos) === 58) {\n                                              result5 = \":\";\n                                              pos++;\n                                            } else {\n                                              result5 = null;\n                                              if (reportFailures === 0) {\n                                                matchFailed(\"\\\":\\\"\");\n                                              }\n                                            }\n                                            if (result5 !== null) {\n                                              result6 = parse_h16();\n                                              if (result6 !== null) {\n                                                result5 = [result5, result6];\n                                              } else {\n                                                result5 = null;\n                                                pos = pos2;\n                                              }\n                                            } else {\n                                              result5 = null;\n                                              pos = pos2;\n                                            }\n                                            result5 = result5 !== null ? result5 : \"\";\n                                            if (result5 !== null) {\n                                              if (input.substr(pos, 2) === \"::\") {\n                                                result6 = \"::\";\n                                                pos += 2;\n                                              } else {\n                                                result6 = null;\n                                                if (reportFailures === 0) {\n                                                  matchFailed(\"\\\"::\\\"\");\n                                                }\n                                              }\n                                              if (result6 !== null) {\n                                                result7 = parse_h16();\n                                                if (result7 !== null) {\n                                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n                                                } else {\n                                                  result0 = null;\n                                                  pos = pos1;\n                                                }\n                                              } else {\n                                                result0 = null;\n                                                pos = pos1;\n                                              }\n                                            } else {\n                                              result0 = null;\n                                              pos = pos1;\n                                            }\n                                          } else {\n                                            result0 = null;\n                                            pos = pos1;\n                                          }\n                                        } else {\n                                          result0 = null;\n                                          pos = pos1;\n                                        }\n                                      } else {\n                                        result0 = null;\n                                        pos = pos1;\n                                      }\n                                    } else {\n                                      result0 = null;\n                                      pos = pos1;\n                                    }\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                  if (result0 === null) {\n                                    pos1 = pos;\n                                    result0 = parse_h16();\n                                    if (result0 !== null) {\n                                      pos2 = pos;\n                                      if (input.charCodeAt(pos) === 58) {\n                                        result1 = \":\";\n                                        pos++;\n                                      } else {\n                                        result1 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\":\\\"\");\n                                        }\n                                      }\n                                      if (result1 !== null) {\n                                        result2 = parse_h16();\n                                        if (result2 !== null) {\n                                          result1 = [result1, result2];\n                                        } else {\n                                          result1 = null;\n                                          pos = pos2;\n                                        }\n                                      } else {\n                                        result1 = null;\n                                        pos = pos2;\n                                      }\n                                      result1 = result1 !== null ? result1 : \"\";\n                                      if (result1 !== null) {\n                                        pos2 = pos;\n                                        if (input.charCodeAt(pos) === 58) {\n                                          result2 = \":\";\n                                          pos++;\n                                        } else {\n                                          result2 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\":\\\"\");\n                                          }\n                                        }\n                                        if (result2 !== null) {\n                                          result3 = parse_h16();\n                                          if (result3 !== null) {\n                                            result2 = [result2, result3];\n                                          } else {\n                                            result2 = null;\n                                            pos = pos2;\n                                          }\n                                        } else {\n                                          result2 = null;\n                                          pos = pos2;\n                                        }\n                                        result2 = result2 !== null ? result2 : \"\";\n                                        if (result2 !== null) {\n                                          pos2 = pos;\n                                          if (input.charCodeAt(pos) === 58) {\n                                            result3 = \":\";\n                                            pos++;\n                                          } else {\n                                            result3 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\":\\\"\");\n                                            }\n                                          }\n                                          if (result3 !== null) {\n                                            result4 = parse_h16();\n                                            if (result4 !== null) {\n                                              result3 = [result3, result4];\n                                            } else {\n                                              result3 = null;\n                                              pos = pos2;\n                                            }\n                                          } else {\n                                            result3 = null;\n                                            pos = pos2;\n                                          }\n                                          result3 = result3 !== null ? result3 : \"\";\n                                          if (result3 !== null) {\n                                            pos2 = pos;\n                                            if (input.charCodeAt(pos) === 58) {\n                                              result4 = \":\";\n                                              pos++;\n                                            } else {\n                                              result4 = null;\n                                              if (reportFailures === 0) {\n                                                matchFailed(\"\\\":\\\"\");\n                                              }\n                                            }\n                                            if (result4 !== null) {\n                                              result5 = parse_h16();\n                                              if (result5 !== null) {\n                                                result4 = [result4, result5];\n                                              } else {\n                                                result4 = null;\n                                                pos = pos2;\n                                              }\n                                            } else {\n                                              result4 = null;\n                                              pos = pos2;\n                                            }\n                                            result4 = result4 !== null ? result4 : \"\";\n                                            if (result4 !== null) {\n                                              pos2 = pos;\n                                              if (input.charCodeAt(pos) === 58) {\n                                                result5 = \":\";\n                                                pos++;\n                                              } else {\n                                                result5 = null;\n                                                if (reportFailures === 0) {\n                                                  matchFailed(\"\\\":\\\"\");\n                                                }\n                                              }\n                                              if (result5 !== null) {\n                                                result6 = parse_h16();\n                                                if (result6 !== null) {\n                                                  result5 = [result5, result6];\n                                                } else {\n                                                  result5 = null;\n                                                  pos = pos2;\n                                                }\n                                              } else {\n                                                result5 = null;\n                                                pos = pos2;\n                                              }\n                                              result5 = result5 !== null ? result5 : \"\";\n                                              if (result5 !== null) {\n                                                pos2 = pos;\n                                                if (input.charCodeAt(pos) === 58) {\n                                                  result6 = \":\";\n                                                  pos++;\n                                                } else {\n                                                  result6 = null;\n                                                  if (reportFailures === 0) {\n                                                    matchFailed(\"\\\":\\\"\");\n                                                  }\n                                                }\n                                                if (result6 !== null) {\n                                                  result7 = parse_h16();\n                                                  if (result7 !== null) {\n                                                    result6 = [result6, result7];\n                                                  } else {\n                                                    result6 = null;\n                                                    pos = pos2;\n                                                  }\n                                                } else {\n                                                  result6 = null;\n                                                  pos = pos2;\n                                                }\n                                                result6 = result6 !== null ? result6 : \"\";\n                                                if (result6 !== null) {\n                                                  if (input.substr(pos, 2) === \"::\") {\n                                                    result7 = \"::\";\n                                                    pos += 2;\n                                                  } else {\n                                                    result7 = null;\n                                                    if (reportFailures === 0) {\n                                                      matchFailed(\"\\\"::\\\"\");\n                                                    }\n                                                  }\n                                                  if (result7 !== null) {\n                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n                                                  } else {\n                                                    result0 = null;\n                                                    pos = pos1;\n                                                  }\n                                                } else {\n                                                  result0 = null;\n                                                  pos = pos1;\n                                                }\n                                              } else {\n                                                result0 = null;\n                                                pos = pos1;\n                                              }\n                                            } else {\n                                              result0 = null;\n                                              pos = pos1;\n                                            }\n                                          } else {\n                                            result0 = null;\n                                            pos = pos1;\n                                          }\n                                        } else {\n                                          result0 = null;\n                                          pos = pos1;\n                                        }\n                                      } else {\n                                        result0 = null;\n                                        pos = pos1;\n                                      }\n                                    } else {\n                                      result0 = null;\n                                      pos = pos1;\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          data.host_type = 'IPv6';\n                          return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_h16() {\n        var result0, result1, result2, result3;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_HEXDIG();\n        if (result0 !== null) {\n          result1 = parse_HEXDIG();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse_HEXDIG();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result3 = parse_HEXDIG();\n              result3 = result3 !== null ? result3 : \"\";\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_ls32() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_h16();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_h16();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        if (result0 === null) {\n          result0 = parse_IPv4address();\n        }\n        return result0;\n      }\n      function parse_IPv4address() {\n        var result0, result1, result2, result3, result4, result5, result6;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_dec_octet();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 46) {\n            result1 = \".\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\".\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_dec_octet();\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 46) {\n                result3 = \".\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\".\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse_dec_octet();\n                if (result4 !== null) {\n                  if (input.charCodeAt(pos) === 46) {\n                    result5 = \".\";\n                    pos++;\n                  } else {\n                    result5 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\".\\\"\");\n                    }\n                  }\n                  if (result5 !== null) {\n                    result6 = parse_dec_octet();\n                    if (result6 !== null) {\n                      result0 = [result0, result1, result2, result3, result4, result5, result6];\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.host_type = 'IPv4';\n                            return input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_dec_octet() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 2) === \"25\") {\n          result0 = \"25\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"25\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (/^[0-5]/.test(input.charAt(pos))) {\n            result1 = input.charAt(pos);\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[0-5]\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.charCodeAt(pos) === 50) {\n            result0 = \"2\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"2\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            if (/^[0-4]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[0-4]\");\n              }\n            }\n            if (result1 !== null) {\n              result2 = parse_DIGIT();\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            if (input.charCodeAt(pos) === 49) {\n              result0 = \"1\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"1\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result1 = parse_DIGIT();\n              if (result1 !== null) {\n                result2 = parse_DIGIT();\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              if (/^[1-9]/.test(input.charAt(pos))) {\n                result0 = input.charAt(pos);\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"[1-9]\");\n                }\n              }\n              if (result0 !== null) {\n                result1 = parse_DIGIT();\n                if (result1 !== null) {\n                  result0 = [result0, result1];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n              if (result0 === null) {\n                result0 = parse_DIGIT();\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_port() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_DIGIT();\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result1 = parse_DIGIT();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse_DIGIT();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result3 = parse_DIGIT();\n              result3 = result3 !== null ? result3 : \"\";\n              if (result3 !== null) {\n                result4 = parse_DIGIT();\n                result4 = result4 !== null ? result4 : \"\";\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, port) {\n                            port = parseInt(port.join(''));\n                            data.port = port;\n                            return port; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_uri_parameters() {\n        var result0, result1, result2;\n        var pos0;\n        result0 = [];\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 59) {\n          result1 = \";\";\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\";\\\"\");\n          }\n        }\n        if (result1 !== null) {\n          result2 = parse_uri_parameter();\n          if (result2 !== null) {\n            result1 = [result1, result2];\n          } else {\n            result1 = null;\n            pos = pos0;\n          }\n        } else {\n          result1 = null;\n          pos = pos0;\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          pos0 = pos;\n          if (input.charCodeAt(pos) === 59) {\n            result1 = \";\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\";\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_uri_parameter();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos0;\n            }\n          } else {\n            result1 = null;\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_uri_parameter() {\n        var result0;\n        result0 = parse_transport_param();\n        if (result0 === null) {\n          result0 = parse_user_param();\n          if (result0 === null) {\n            result0 = parse_method_param();\n            if (result0 === null) {\n              result0 = parse_ttl_param();\n              if (result0 === null) {\n                result0 = parse_maddr_param();\n                if (result0 === null) {\n                  result0 = parse_lr_param();\n                  if (result0 === null) {\n                    result0 = parse_other_param();\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_transport_param() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 10).toLowerCase() === \"transport=\") {\n          result0 = input.substr(pos, 10);\n          pos += 10;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"transport=\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.substr(pos, 3).toLowerCase() === \"udp\") {\n            result1 = input.substr(pos, 3);\n            pos += 3;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"udp\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.substr(pos, 3).toLowerCase() === \"tcp\") {\n              result1 = input.substr(pos, 3);\n              pos += 3;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"tcp\\\"\");\n              }\n            }\n            if (result1 === null) {\n              if (input.substr(pos, 4).toLowerCase() === \"sctp\") {\n                result1 = input.substr(pos, 4);\n                pos += 4;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"sctp\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.substr(pos, 3).toLowerCase() === \"tls\") {\n                  result1 = input.substr(pos, 3);\n                  pos += 3;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"tls\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  result1 = parse_token();\n                }\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, transport) {\n                              if(!data.uri_params) data.uri_params={};\n                              data.uri_params['transport'] = transport.toLowerCase(); })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_user_param() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5).toLowerCase() === \"user=\") {\n          result0 = input.substr(pos, 5);\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"user=\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.substr(pos, 5).toLowerCase() === \"phone\") {\n            result1 = input.substr(pos, 5);\n            pos += 5;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"phone\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.substr(pos, 2).toLowerCase() === \"ip\") {\n              result1 = input.substr(pos, 2);\n              pos += 2;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"ip\\\"\");\n              }\n            }\n            if (result1 === null) {\n              result1 = parse_token();\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, user) {\n                              if(!data.uri_params) data.uri_params={};\n                              data.uri_params['user'] = user.toLowerCase(); })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_method_param() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 7).toLowerCase() === \"method=\") {\n          result0 = input.substr(pos, 7);\n          pos += 7;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"method=\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_Method();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, method) {\n                              if(!data.uri_params) data.uri_params={};\n                              data.uri_params['method'] = method; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_ttl_param() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 4).toLowerCase() === \"ttl=\") {\n          result0 = input.substr(pos, 4);\n          pos += 4;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"ttl=\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_ttl();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, ttl) {\n                              if(!data.params) data.params={};\n                              data.params['ttl'] = ttl; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_maddr_param() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 6).toLowerCase() === \"maddr=\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"maddr=\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_host();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, maddr) {\n                              if(!data.uri_params) data.uri_params={};\n                              data.uri_params['maddr'] = maddr; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_lr_param() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 2).toLowerCase() === \"lr\") {\n          result0 = input.substr(pos, 2);\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"lr\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 61) {\n            result1 = \"=\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"=\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_token();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                              if(!data.uri_params) data.uri_params={};\n                              data.uri_params['lr'] = undefined; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_other_param() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_pname();\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 61) {\n            result1 = \"=\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"=\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_pvalue();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, param, value) {\n                              if(!data.uri_params) data.uri_params = {};\n                              if (typeof value === 'undefined'){\n                                value = undefined;\n                              }\n                              else {\n                                value = value[1];\n                              }\n                              data.uri_params[param.toLowerCase()] = value;})(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_pname() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_paramchar();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_paramchar();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, pname) {return pname.join(''); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_pvalue() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_paramchar();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_paramchar();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, pvalue) {return pvalue.join(''); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_paramchar() {\n        var result0;\n        result0 = parse_param_unreserved();\n        if (result0 === null) {\n          result0 = parse_unreserved();\n          if (result0 === null) {\n            result0 = parse_escaped();\n          }\n        }\n        return result0;\n      }\n      function parse_param_unreserved() {\n        var result0;\n        if (input.charCodeAt(pos) === 91) {\n          result0 = \"[\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"[\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 93) {\n            result0 = \"]\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"]\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 47) {\n              result0 = \"/\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"/\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 58) {\n                result0 = \":\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\":\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 38) {\n                  result0 = \"&\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"&\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 43) {\n                    result0 = \"+\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"+\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 36) {\n                      result0 = \"$\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"$\\\"\");\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_headers() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 63) {\n          result0 = \"?\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"?\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_header();\n          if (result1 !== null) {\n            result2 = [];\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 38) {\n              result3 = \"&\";\n              pos++;\n            } else {\n              result3 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"&\\\"\");\n              }\n            }\n            if (result3 !== null) {\n              result4 = parse_header();\n              if (result4 !== null) {\n                result3 = [result3, result4];\n              } else {\n                result3 = null;\n                pos = pos1;\n              }\n            } else {\n              result3 = null;\n              pos = pos1;\n            }\n            while (result3 !== null) {\n              result2.push(result3);\n              pos1 = pos;\n              if (input.charCodeAt(pos) === 38) {\n                result3 = \"&\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"&\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse_header();\n                if (result4 !== null) {\n                  result3 = [result3, result4];\n                } else {\n                  result3 = null;\n                  pos = pos1;\n                }\n              } else {\n                result3 = null;\n                pos = pos1;\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_header() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_hname();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 61) {\n            result1 = \"=\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"=\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_hvalue();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, hname, hvalue) {\n                              hname = hname.join('').toLowerCase();\n                              hvalue = hvalue.join('');\n                              if(!data.uri_headers) data.uri_headers = {};\n                              if (!data.uri_headers[hname]) {\n                                data.uri_headers[hname] = [hvalue];\n                              } else {\n                                data.uri_headers[hname].push(hvalue);\n                              }})(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_hname() {\n        var result0, result1;\n        result1 = parse_hnv_unreserved();\n        if (result1 === null) {\n          result1 = parse_unreserved();\n          if (result1 === null) {\n            result1 = parse_escaped();\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_hnv_unreserved();\n            if (result1 === null) {\n              result1 = parse_unreserved();\n              if (result1 === null) {\n                result1 = parse_escaped();\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        return result0;\n      }\n      function parse_hvalue() {\n        var result0, result1;\n        result0 = [];\n        result1 = parse_hnv_unreserved();\n        if (result1 === null) {\n          result1 = parse_unreserved();\n          if (result1 === null) {\n            result1 = parse_escaped();\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_hnv_unreserved();\n          if (result1 === null) {\n            result1 = parse_unreserved();\n            if (result1 === null) {\n              result1 = parse_escaped();\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_hnv_unreserved() {\n        var result0;\n        if (input.charCodeAt(pos) === 91) {\n          result0 = \"[\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"[\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 93) {\n            result0 = \"]\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"]\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 47) {\n              result0 = \"/\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"/\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 63) {\n                result0 = \"?\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"?\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 58) {\n                  result0 = \":\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\":\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 43) {\n                    result0 = \"+\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"+\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 36) {\n                      result0 = \"$\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"$\\\"\");\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_Request_Response() {\n        var result0;\n        result0 = parse_Status_Line();\n        if (result0 === null) {\n          result0 = parse_Request_Line();\n        }\n        return result0;\n      }\n      function parse_Request_Line() {\n        var result0, result1, result2, result3, result4;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_Method();\n        if (result0 !== null) {\n          result1 = parse_SP();\n          if (result1 !== null) {\n            result2 = parse_Request_URI();\n            if (result2 !== null) {\n              result3 = parse_SP();\n              if (result3 !== null) {\n                result4 = parse_SIP_Version();\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Request_URI() {\n        var result0;\n        result0 = parse_SIP_URI();\n        if (result0 === null) {\n          result0 = parse_absoluteURI();\n        }\n        return result0;\n      }\n      function parse_absoluteURI() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_scheme();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 58) {\n            result1 = \":\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_hier_part();\n            if (result2 === null) {\n              result2 = parse_opaque_part();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_hier_part() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_net_path();\n        if (result0 === null) {\n          result0 = parse_abs_path();\n        }\n        if (result0 !== null) {\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 63) {\n            result1 = \"?\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"?\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_query();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos1;\n            }\n          } else {\n            result1 = null;\n            pos = pos1;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_net_path() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 2) === \"//\") {\n          result0 = \"//\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"//\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_authority();\n          if (result1 !== null) {\n            result2 = parse_abs_path();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_abs_path() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 47) {\n          result0 = \"/\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"/\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_path_segments();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_opaque_part() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_uric_no_slash();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_uric();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_uric();\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_uric() {\n        var result0;\n        result0 = parse_reserved();\n        if (result0 === null) {\n          result0 = parse_unreserved();\n          if (result0 === null) {\n            result0 = parse_escaped();\n          }\n        }\n        return result0;\n      }\n      function parse_uric_no_slash() {\n        var result0;\n        result0 = parse_unreserved();\n        if (result0 === null) {\n          result0 = parse_escaped();\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 59) {\n              result0 = \";\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\";\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 63) {\n                result0 = \"?\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"?\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 58) {\n                  result0 = \":\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\":\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 64) {\n                    result0 = \"@\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"@\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 38) {\n                      result0 = \"&\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"&\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 61) {\n                        result0 = \"=\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"=\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 43) {\n                          result0 = \"+\";\n                          pos++;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"+\\\"\");\n                          }\n                        }\n                        if (result0 === null) {\n                          if (input.charCodeAt(pos) === 36) {\n                            result0 = \"$\";\n                            pos++;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"$\\\"\");\n                            }\n                          }\n                          if (result0 === null) {\n                            if (input.charCodeAt(pos) === 44) {\n                              result0 = \",\";\n                              pos++;\n                            } else {\n                              result0 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\",\\\"\");\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_path_segments() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_segment();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 47) {\n            result2 = \"/\";\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result2 !== null) {\n            result3 = parse_segment();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 47) {\n              result2 = \"/\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"/\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse_segment();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_segment() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = [];\n        result1 = parse_pchar();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_pchar();\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 59) {\n            result2 = \";\";\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\";\\\"\");\n            }\n          }\n          if (result2 !== null) {\n            result3 = parse_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 59) {\n              result2 = \";\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\";\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_param() {\n        var result0, result1;\n        result0 = [];\n        result1 = parse_pchar();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_pchar();\n        }\n        return result0;\n      }\n      function parse_pchar() {\n        var result0;\n        result0 = parse_unreserved();\n        if (result0 === null) {\n          result0 = parse_escaped();\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 58) {\n              result0 = \":\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\":\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 64) {\n                result0 = \"@\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"@\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 38) {\n                  result0 = \"&\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"&\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 61) {\n                    result0 = \"=\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"=\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 43) {\n                      result0 = \"+\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"+\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 36) {\n                        result0 = \"$\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"$\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 44) {\n                          result0 = \",\";\n                          pos++;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\",\\\"\");\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_scheme() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ALPHA();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_ALPHA();\n          if (result2 === null) {\n            result2 = parse_DIGIT();\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 43) {\n                result2 = \"+\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"+\\\"\");\n                }\n              }\n              if (result2 === null) {\n                if (input.charCodeAt(pos) === 45) {\n                  result2 = \"-\";\n                  pos++;\n                } else {\n                  result2 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"-\\\"\");\n                  }\n                }\n                if (result2 === null) {\n                  if (input.charCodeAt(pos) === 46) {\n                    result2 = \".\";\n                    pos++;\n                  } else {\n                    result2 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\".\\\"\");\n                    }\n                  }\n                }\n              }\n            }\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_ALPHA();\n            if (result2 === null) {\n              result2 = parse_DIGIT();\n              if (result2 === null) {\n                if (input.charCodeAt(pos) === 43) {\n                  result2 = \"+\";\n                  pos++;\n                } else {\n                  result2 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"+\\\"\");\n                  }\n                }\n                if (result2 === null) {\n                  if (input.charCodeAt(pos) === 45) {\n                    result2 = \"-\";\n                    pos++;\n                  } else {\n                    result2 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"-\\\"\");\n                    }\n                  }\n                  if (result2 === null) {\n                    if (input.charCodeAt(pos) === 46) {\n                      result2 = \".\";\n                      pos++;\n                    } else {\n                      result2 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\".\\\"\");\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.scheme= input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_authority() {\n        var result0;\n        result0 = parse_srvr();\n        if (result0 === null) {\n          result0 = parse_reg_name();\n        }\n        return result0;\n      }\n      function parse_srvr() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_userinfo();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 64) {\n            result1 = \"@\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"@\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result1 = parse_hostport();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        result0 = result0 !== null ? result0 : \"\";\n        return result0;\n      }\n      function parse_reg_name() {\n        var result0, result1;\n        result1 = parse_unreserved();\n        if (result1 === null) {\n          result1 = parse_escaped();\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 36) {\n              result1 = \"$\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"$\\\"\");\n              }\n            }\n            if (result1 === null) {\n              if (input.charCodeAt(pos) === 44) {\n                result1 = \",\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\",\\\"\");\n                }\n              }\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 59) {\n                  result1 = \";\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\";\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 58) {\n                    result1 = \":\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\":\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 64) {\n                      result1 = \"@\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"@\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 38) {\n                        result1 = \"&\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"&\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 61) {\n                          result1 = \"=\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"=\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 43) {\n                            result1 = \"+\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"+\\\"\");\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_unreserved();\n            if (result1 === null) {\n              result1 = parse_escaped();\n              if (result1 === null) {\n                if (input.charCodeAt(pos) === 36) {\n                  result1 = \"$\";\n                  pos++;\n                } else {\n                  result1 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"$\\\"\");\n                  }\n                }\n                if (result1 === null) {\n                  if (input.charCodeAt(pos) === 44) {\n                    result1 = \",\";\n                    pos++;\n                  } else {\n                    result1 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\",\\\"\");\n                    }\n                  }\n                  if (result1 === null) {\n                    if (input.charCodeAt(pos) === 59) {\n                      result1 = \";\";\n                      pos++;\n                    } else {\n                      result1 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\";\\\"\");\n                      }\n                    }\n                    if (result1 === null) {\n                      if (input.charCodeAt(pos) === 58) {\n                        result1 = \":\";\n                        pos++;\n                      } else {\n                        result1 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\":\\\"\");\n                        }\n                      }\n                      if (result1 === null) {\n                        if (input.charCodeAt(pos) === 64) {\n                          result1 = \"@\";\n                          pos++;\n                        } else {\n                          result1 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"@\\\"\");\n                          }\n                        }\n                        if (result1 === null) {\n                          if (input.charCodeAt(pos) === 38) {\n                            result1 = \"&\";\n                            pos++;\n                          } else {\n                            result1 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"&\\\"\");\n                            }\n                          }\n                          if (result1 === null) {\n                            if (input.charCodeAt(pos) === 61) {\n                              result1 = \"=\";\n                              pos++;\n                            } else {\n                              result1 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"=\\\"\");\n                              }\n                            }\n                            if (result1 === null) {\n                              if (input.charCodeAt(pos) === 43) {\n                                result1 = \"+\";\n                                pos++;\n                              } else {\n                                result1 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"+\\\"\");\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        return result0;\n      }\n      function parse_query() {\n        var result0, result1;\n        result0 = [];\n        result1 = parse_uric();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_uric();\n        }\n        return result0;\n      }\n      function parse_SIP_Version() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"sip\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"SIP\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 47) {\n            result1 = \"/\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result3 = parse_DIGIT();\n            if (result3 !== null) {\n              result2 = [];\n              while (result3 !== null) {\n                result2.push(result3);\n                result3 = parse_DIGIT();\n              }\n            } else {\n              result2 = null;\n            }\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 46) {\n                result3 = \".\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\".\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result5 = parse_DIGIT();\n                if (result5 !== null) {\n                  result4 = [];\n                  while (result5 !== null) {\n                    result4.push(result5);\n                    result5 = parse_DIGIT();\n                  }\n                } else {\n                  result4 = null;\n                }\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.sip_version = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_INVITEm() {\n        var result0;\n        if (input.substr(pos, 6) === \"INVITE\") {\n          result0 = \"INVITE\";\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"INVITE\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_ACKm() {\n        var result0;\n        if (input.substr(pos, 3) === \"ACK\") {\n          result0 = \"ACK\";\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"ACK\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_OPTIONSm() {\n        var result0;\n        if (input.substr(pos, 7) === \"OPTIONS\") {\n          result0 = \"OPTIONS\";\n          pos += 7;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"OPTIONS\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_BYEm() {\n        var result0;\n        if (input.substr(pos, 3) === \"BYE\") {\n          result0 = \"BYE\";\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"BYE\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_CANCELm() {\n        var result0;\n        if (input.substr(pos, 6) === \"CANCEL\") {\n          result0 = \"CANCEL\";\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"CANCEL\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_REGISTERm() {\n        var result0;\n        if (input.substr(pos, 8) === \"REGISTER\") {\n          result0 = \"REGISTER\";\n          pos += 8;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"REGISTER\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_SUBSCRIBEm() {\n        var result0;\n        if (input.substr(pos, 9) === \"SUBSCRIBE\") {\n          result0 = \"SUBSCRIBE\";\n          pos += 9;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"SUBSCRIBE\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_NOTIFYm() {\n        var result0;\n        if (input.substr(pos, 6) === \"NOTIFY\") {\n          result0 = \"NOTIFY\";\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"NOTIFY\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_REFERm() {\n        var result0;\n        if (input.substr(pos, 5) === \"REFER\") {\n          result0 = \"REFER\";\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"REFER\\\"\");\n          }\n        }\n        return result0;\n      }\n      function parse_Method() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_INVITEm();\n        if (result0 === null) {\n          result0 = parse_ACKm();\n          if (result0 === null) {\n            result0 = parse_OPTIONSm();\n            if (result0 === null) {\n              result0 = parse_BYEm();\n              if (result0 === null) {\n                result0 = parse_CANCELm();\n                if (result0 === null) {\n                  result0 = parse_REGISTERm();\n                  if (result0 === null) {\n                    result0 = parse_SUBSCRIBEm();\n                    if (result0 === null) {\n                      result0 = parse_NOTIFYm();\n                      if (result0 === null) {\n                        result0 = parse_REFERm();\n                        if (result0 === null) {\n                          result0 = parse_token();\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.method = input.substring(pos, offset);\n                            return data.method; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Status_Line() {\n        var result0, result1, result2, result3, result4;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_SIP_Version();\n        if (result0 !== null) {\n          result1 = parse_SP();\n          if (result1 !== null) {\n            result2 = parse_Status_Code();\n            if (result2 !== null) {\n              result3 = parse_SP();\n              if (result3 !== null) {\n                result4 = parse_Reason_Phrase();\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Status_Code() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_extension_code();\n        if (result0 !== null) {\n          result0 = (function(offset, status_code) {\n                          data.status_code = parseInt(status_code.join('')); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_extension_code() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_DIGIT();\n        if (result0 !== null) {\n          result1 = parse_DIGIT();\n          if (result1 !== null) {\n            result2 = parse_DIGIT();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Reason_Phrase() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result0 = [];\n        result1 = parse_reserved();\n        if (result1 === null) {\n          result1 = parse_unreserved();\n          if (result1 === null) {\n            result1 = parse_escaped();\n            if (result1 === null) {\n              result1 = parse_UTF8_NONASCII();\n              if (result1 === null) {\n                result1 = parse_UTF8_CONT();\n                if (result1 === null) {\n                  result1 = parse_SP();\n                  if (result1 === null) {\n                    result1 = parse_HTAB();\n                  }\n                }\n              }\n            }\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_reserved();\n          if (result1 === null) {\n            result1 = parse_unreserved();\n            if (result1 === null) {\n              result1 = parse_escaped();\n              if (result1 === null) {\n                result1 = parse_UTF8_NONASCII();\n                if (result1 === null) {\n                  result1 = parse_UTF8_CONT();\n                  if (result1 === null) {\n                    result1 = parse_SP();\n                    if (result1 === null) {\n                      result1 = parse_HTAB();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          data.reason_phrase = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Allow_Events() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_event_type();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_event_type();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_event_type();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Call_ID() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_word();\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 64) {\n            result1 = \"@\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"@\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_word();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                      data = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Contact() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        result0 = parse_STAR();\n        if (result0 === null) {\n          pos1 = pos;\n          result0 = parse_contact_param();\n          if (result0 !== null) {\n            result1 = [];\n            pos2 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_contact_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n            while (result2 !== null) {\n              result1.push(result2);\n              pos2 = pos;\n              result2 = parse_COMMA();\n              if (result2 !== null) {\n                result3 = parse_contact_param();\n                if (result3 !== null) {\n                  result2 = [result2, result3];\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            }\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                                var idx, length;\n                                length = data.multi_header.length;\n                                for (idx = 0; idx < length; idx++) {\n                                  if (data.multi_header[idx].parsed === null) {\n                                    data = null;\n                                    break;\n                                  }\n                                }\n                                if (data !== null) {\n                                  data = data.multi_header;\n                                } else {\n                                  data = -1;\n                                }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_contact_param() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SIP_URI_noparams();\n        if (result0 === null) {\n          result0 = parse_name_addr();\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_contact_params();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_contact_params();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                                var header;\n                                if(!data.multi_header) data.multi_header = [];\n                                try {\n                                  header = new NameAddrHeader(data.uri, data.display_name, data.params);\n                                  delete data.uri;\n                                  delete data.display_name;\n                                  delete data.params;\n                                } catch(e) {\n                                  header = null;\n                                }\n                                data.multi_header.push( { 'possition': pos,\n                                                          'offset': offset,\n                                                          'parsed': header\n                                                        });})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_name_addr() {\n        var result0, result1, result2, result3;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_display_name();\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result1 = parse_LAQUOT();\n          if (result1 !== null) {\n            result2 = parse_SIP_URI();\n            if (result2 !== null) {\n              result3 = parse_RAQUOT();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_display_name() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_LWS();\n          if (result2 !== null) {\n            result3 = parse_token();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_LWS();\n            if (result2 !== null) {\n              result3 = parse_token();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 === null) {\n          result0 = parse_quoted_string();\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, display_name) {\n                                display_name = input.substring(pos, offset).trim();\n                                if (display_name[0] === '\\\"') {\n                                  display_name = display_name.substring(1, display_name.length-1);\n                                }\n                                data.display_name = display_name; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_contact_params() {\n        var result0;\n        result0 = parse_c_p_q();\n        if (result0 === null) {\n          result0 = parse_c_p_expires();\n          if (result0 === null) {\n            result0 = parse_generic_param();\n          }\n        }\n        return result0;\n      }\n      function parse_c_p_q() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 1).toLowerCase() === \"q\") {\n          result0 = input.substr(pos, 1);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"q\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_qvalue();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, q) {\n                                if(!data.params) data.params = {};\n                                data.params['q'] = q; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_c_p_expires() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 7).toLowerCase() === \"expires\") {\n          result0 = input.substr(pos, 7);\n          pos += 7;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"expires\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_delta_seconds();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, expires) {\n                                if(!data.params) data.params = {};\n                                data.params['expires'] = expires; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_delta_seconds() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_DIGIT();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_DIGIT();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, delta_seconds) {\n                                return parseInt(delta_seconds.join('')); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_qvalue() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 48) {\n          result0 = \"0\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"0\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 46) {\n            result1 = \".\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\".\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_DIGIT();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result3 = parse_DIGIT();\n              result3 = result3 !== null ? result3 : \"\";\n              if (result3 !== null) {\n                result4 = parse_DIGIT();\n                result4 = result4 !== null ? result4 : \"\";\n                if (result4 !== null) {\n                  result1 = [result1, result2, result3, result4];\n                } else {\n                  result1 = null;\n                  pos = pos2;\n                }\n              } else {\n                result1 = null;\n                pos = pos2;\n              }\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                                return parseFloat(input.substring(pos, offset)); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_generic_param() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          pos2 = pos;\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_gen_value();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, param, value) {\n                                if(!data.params) data.params = {};\n                                if (typeof value === 'undefined'){\n                                  value = undefined;\n                                }\n                                else {\n                                  value = value[1];\n                                }\n                                data.params[param.toLowerCase()] = value;})(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_gen_value() {\n        var result0;\n        result0 = parse_token();\n        if (result0 === null) {\n          result0 = parse_host();\n          if (result0 === null) {\n            result0 = parse_quoted_string();\n          }\n        }\n        return result0;\n      }\n      function parse_Content_Disposition() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_disp_type();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_disp_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_disp_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_disp_type() {\n        var result0;\n        if (input.substr(pos, 6).toLowerCase() === \"render\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"render\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 7).toLowerCase() === \"session\") {\n            result0 = input.substr(pos, 7);\n            pos += 7;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"session\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 4).toLowerCase() === \"icon\") {\n              result0 = input.substr(pos, 4);\n              pos += 4;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"icon\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 5).toLowerCase() === \"alert\") {\n                result0 = input.substr(pos, 5);\n                pos += 5;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"alert\\\"\");\n                }\n              }\n              if (result0 === null) {\n                result0 = parse_token();\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_disp_param() {\n        var result0;\n        result0 = parse_handling_param();\n        if (result0 === null) {\n          result0 = parse_generic_param();\n        }\n        return result0;\n      }\n      function parse_handling_param() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 8).toLowerCase() === \"handling\") {\n          result0 = input.substr(pos, 8);\n          pos += 8;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"handling\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            if (input.substr(pos, 8).toLowerCase() === \"optional\") {\n              result2 = input.substr(pos, 8);\n              pos += 8;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"optional\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.substr(pos, 8).toLowerCase() === \"required\") {\n                result2 = input.substr(pos, 8);\n                pos += 8;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"required\\\"\");\n                }\n              }\n              if (result2 === null) {\n                result2 = parse_token();\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Content_Encoding() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_token();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_token();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Content_Length() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_DIGIT();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_DIGIT();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, length) {\n                                data = parseInt(length.join('')); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Content_Type() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_media_type();\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                                data = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_media_type() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_m_type();\n        if (result0 !== null) {\n          result1 = parse_SLASH();\n          if (result1 !== null) {\n            result2 = parse_m_subtype();\n            if (result2 !== null) {\n              result3 = [];\n              pos1 = pos;\n              result4 = parse_SEMI();\n              if (result4 !== null) {\n                result5 = parse_m_parameter();\n                if (result5 !== null) {\n                  result4 = [result4, result5];\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              } else {\n                result4 = null;\n                pos = pos1;\n              }\n              while (result4 !== null) {\n                result3.push(result4);\n                pos1 = pos;\n                result4 = parse_SEMI();\n                if (result4 !== null) {\n                  result5 = parse_m_parameter();\n                  if (result5 !== null) {\n                    result4 = [result4, result5];\n                  } else {\n                    result4 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              }\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_m_type() {\n        var result0;\n        result0 = parse_discrete_type();\n        if (result0 === null) {\n          result0 = parse_composite_type();\n        }\n        return result0;\n      }\n      function parse_discrete_type() {\n        var result0;\n        if (input.substr(pos, 4).toLowerCase() === \"text\") {\n          result0 = input.substr(pos, 4);\n          pos += 4;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"text\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 5).toLowerCase() === \"image\") {\n            result0 = input.substr(pos, 5);\n            pos += 5;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"image\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 5).toLowerCase() === \"audio\") {\n              result0 = input.substr(pos, 5);\n              pos += 5;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"audio\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 5).toLowerCase() === \"video\") {\n                result0 = input.substr(pos, 5);\n                pos += 5;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"video\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.substr(pos, 11).toLowerCase() === \"application\") {\n                  result0 = input.substr(pos, 11);\n                  pos += 11;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"application\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  result0 = parse_extension_token();\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_composite_type() {\n        var result0;\n        if (input.substr(pos, 7).toLowerCase() === \"message\") {\n          result0 = input.substr(pos, 7);\n          pos += 7;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"message\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 9).toLowerCase() === \"multipart\") {\n            result0 = input.substr(pos, 9);\n            pos += 9;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"multipart\\\"\");\n            }\n          }\n          if (result0 === null) {\n            result0 = parse_extension_token();\n          }\n        }\n        return result0;\n      }\n      function parse_extension_token() {\n        var result0;\n        result0 = parse_token();\n        if (result0 === null) {\n          result0 = parse_x_token();\n        }\n        return result0;\n      }\n      function parse_x_token() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 2).toLowerCase() === \"x-\") {\n          result0 = input.substr(pos, 2);\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"x-\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_token();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_m_subtype() {\n        var result0;\n        result0 = parse_extension_token();\n        if (result0 === null) {\n          result0 = parse_token();\n        }\n        return result0;\n      }\n      function parse_m_parameter() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_m_value();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_m_value() {\n        var result0;\n        result0 = parse_token();\n        if (result0 === null) {\n          result0 = parse_quoted_string();\n        }\n        return result0;\n      }\n      function parse_CSeq() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_CSeq_value();\n        if (result0 !== null) {\n          result1 = parse_LWS();\n          if (result1 !== null) {\n            result2 = parse_Method();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_CSeq_value() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_DIGIT();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_DIGIT();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, cseq_value) {\n                          data.value=parseInt(cseq_value.join('')); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Expires() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_delta_seconds();\n        if (result0 !== null) {\n          result0 = (function(offset, expires) {data = expires; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Event() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_event_type();\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_generic_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_generic_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, event_type) {\n                               data.event = event_type.join('').toLowerCase(); })(pos0, result0[0]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_event_type() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_token_nodot();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 46) {\n            result2 = \".\";\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\".\\\"\");\n            }\n          }\n          if (result2 !== null) {\n            result3 = parse_token_nodot();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 46) {\n              result2 = \".\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\".\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse_token_nodot();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_From() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SIP_URI_noparams();\n        if (result0 === null) {\n          result0 = parse_name_addr();\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_from_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_from_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                        var tag = data.tag;\n                        try {\n                          data = new NameAddrHeader(data.uri, data.display_name, data.params);\n                          if (tag) {data.setParam('tag',tag)}\n                        } catch(e) {\n                          data = -1;\n                        }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_from_param() {\n        var result0;\n        result0 = parse_tag_param();\n        if (result0 === null) {\n          result0 = parse_generic_param();\n        }\n        return result0;\n      }\n      function parse_tag_param() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"tag\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"tag\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_token();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, tag) {data.tag = tag; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Max_Forwards() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_DIGIT();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_DIGIT();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, forwards) {\n                          data = parseInt(forwards.join('')); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Min_Expires() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_delta_seconds();\n        if (result0 !== null) {\n          result0 = (function(offset, min_expires) {data = min_expires; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Name_Addr_Header() {\n        var result0, result1, result2, result3, result4, result5, result6;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        result1 = parse_display_name();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_display_name();\n        }\n        if (result0 !== null) {\n          result1 = parse_LAQUOT();\n          if (result1 !== null) {\n            result2 = parse_SIP_URI();\n            if (result2 !== null) {\n              result3 = parse_RAQUOT();\n              if (result3 !== null) {\n                result4 = [];\n                pos2 = pos;\n                result5 = parse_SEMI();\n                if (result5 !== null) {\n                  result6 = parse_generic_param();\n                  if (result6 !== null) {\n                    result5 = [result5, result6];\n                  } else {\n                    result5 = null;\n                    pos = pos2;\n                  }\n                } else {\n                  result5 = null;\n                  pos = pos2;\n                }\n                while (result5 !== null) {\n                  result4.push(result5);\n                  pos2 = pos;\n                  result5 = parse_SEMI();\n                  if (result5 !== null) {\n                    result6 = parse_generic_param();\n                    if (result6 !== null) {\n                      result5 = [result5, result6];\n                    } else {\n                      result5 = null;\n                      pos = pos2;\n                    }\n                  } else {\n                    result5 = null;\n                    pos = pos2;\n                  }\n                }\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                              try {\n                                data = new NameAddrHeader(data.uri, data.display_name, data.params);\n                              } catch(e) {\n                                data = -1;\n                              }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Proxy_Authenticate() {\n        var result0;\n        result0 = parse_challenge();\n        return result0;\n      }\n      function parse_challenge() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n        pos0 = pos;\n        if (input.substr(pos, 6).toLowerCase() === \"digest\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"Digest\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_LWS();\n          if (result1 !== null) {\n            result2 = parse_digest_cln();\n            if (result2 !== null) {\n              result3 = [];\n              pos1 = pos;\n              result4 = parse_COMMA();\n              if (result4 !== null) {\n                result5 = parse_digest_cln();\n                if (result5 !== null) {\n                  result4 = [result4, result5];\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              } else {\n                result4 = null;\n                pos = pos1;\n              }\n              while (result4 !== null) {\n                result3.push(result4);\n                pos1 = pos;\n                result4 = parse_COMMA();\n                if (result4 !== null) {\n                  result5 = parse_digest_cln();\n                  if (result5 !== null) {\n                    result4 = [result4, result5];\n                  } else {\n                    result4 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              }\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        if (result0 === null) {\n          result0 = parse_other_challenge();\n        }\n        return result0;\n      }\n      function parse_other_challenge() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = parse_LWS();\n          if (result1 !== null) {\n            result2 = parse_auth_param();\n            if (result2 !== null) {\n              result3 = [];\n              pos1 = pos;\n              result4 = parse_COMMA();\n              if (result4 !== null) {\n                result5 = parse_auth_param();\n                if (result5 !== null) {\n                  result4 = [result4, result5];\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              } else {\n                result4 = null;\n                pos = pos1;\n              }\n              while (result4 !== null) {\n                result3.push(result4);\n                pos1 = pos;\n                result4 = parse_COMMA();\n                if (result4 !== null) {\n                  result5 = parse_auth_param();\n                  if (result5 !== null) {\n                    result4 = [result4, result5];\n                  } else {\n                    result4 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              }\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_auth_param() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_token();\n            if (result2 === null) {\n              result2 = parse_quoted_string();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_digest_cln() {\n        var result0;\n        result0 = parse_realm();\n        if (result0 === null) {\n          result0 = parse_domain();\n          if (result0 === null) {\n            result0 = parse_nonce();\n            if (result0 === null) {\n              result0 = parse_opaque();\n              if (result0 === null) {\n                result0 = parse_stale();\n                if (result0 === null) {\n                  result0 = parse_algorithm();\n                  if (result0 === null) {\n                    result0 = parse_qop_options();\n                    if (result0 === null) {\n                      result0 = parse_auth_param();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_realm() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 5).toLowerCase() === \"realm\") {\n          result0 = input.substr(pos, 5);\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"realm\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_realm_value();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_realm_value() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_quoted_string_clean();\n        if (result0 !== null) {\n          result0 = (function(offset, realm) { data.realm = realm; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_domain() {\n        var result0, result1, result2, result3, result4, result5, result6;\n        var pos0, pos1;\n        pos0 = pos;\n        if (input.substr(pos, 6).toLowerCase() === \"domain\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"domain\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_LDQUOT();\n            if (result2 !== null) {\n              result3 = parse_URI();\n              if (result3 !== null) {\n                result4 = [];\n                pos1 = pos;\n                result6 = parse_SP();\n                if (result6 !== null) {\n                  result5 = [];\n                  while (result6 !== null) {\n                    result5.push(result6);\n                    result6 = parse_SP();\n                  }\n                } else {\n                  result5 = null;\n                }\n                if (result5 !== null) {\n                  result6 = parse_URI();\n                  if (result6 !== null) {\n                    result5 = [result5, result6];\n                  } else {\n                    result5 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result5 = null;\n                  pos = pos1;\n                }\n                while (result5 !== null) {\n                  result4.push(result5);\n                  pos1 = pos;\n                  result6 = parse_SP();\n                  if (result6 !== null) {\n                    result5 = [];\n                    while (result6 !== null) {\n                      result5.push(result6);\n                      result6 = parse_SP();\n                    }\n                  } else {\n                    result5 = null;\n                  }\n                  if (result5 !== null) {\n                    result6 = parse_URI();\n                    if (result6 !== null) {\n                      result5 = [result5, result6];\n                    } else {\n                      result5 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result5 = null;\n                    pos = pos1;\n                  }\n                }\n                if (result4 !== null) {\n                  result5 = parse_RDQUOT();\n                  if (result5 !== null) {\n                    result0 = [result0, result1, result2, result3, result4, result5];\n                  } else {\n                    result0 = null;\n                    pos = pos0;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_URI() {\n        var result0;\n        result0 = parse_absoluteURI();\n        if (result0 === null) {\n          result0 = parse_abs_path();\n        }\n        return result0;\n      }\n      function parse_nonce() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 5).toLowerCase() === \"nonce\") {\n          result0 = input.substr(pos, 5);\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"nonce\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_nonce_value();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_nonce_value() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_quoted_string_clean();\n        if (result0 !== null) {\n          result0 = (function(offset, nonce) { data.nonce=nonce; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_opaque() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 6).toLowerCase() === \"opaque\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"opaque\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_quoted_string_clean();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, opaque) { data.opaque=opaque; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_stale() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        if (input.substr(pos, 5).toLowerCase() === \"stale\") {\n          result0 = input.substr(pos, 5);\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"stale\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            pos1 = pos;\n            if (input.substr(pos, 4).toLowerCase() === \"true\") {\n              result2 = input.substr(pos, 4);\n              pos += 4;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"true\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result2 = (function(offset) { data.stale=true; })(pos1);\n            }\n            if (result2 === null) {\n              pos = pos1;\n            }\n            if (result2 === null) {\n              pos1 = pos;\n              if (input.substr(pos, 5).toLowerCase() === \"false\") {\n                result2 = input.substr(pos, 5);\n                pos += 5;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"false\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result2 = (function(offset) { data.stale=false; })(pos1);\n              }\n              if (result2 === null) {\n                pos = pos1;\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_algorithm() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 9).toLowerCase() === \"algorithm\") {\n          result0 = input.substr(pos, 9);\n          pos += 9;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"algorithm\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            if (input.substr(pos, 3).toLowerCase() === \"md5\") {\n              result2 = input.substr(pos, 3);\n              pos += 3;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"MD5\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.substr(pos, 8).toLowerCase() === \"md5-sess\") {\n                result2 = input.substr(pos, 8);\n                pos += 8;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"MD5-sess\\\"\");\n                }\n              }\n              if (result2 === null) {\n                result2 = parse_token();\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, algorithm) {\n                              data.algorithm=algorithm.toUpperCase(); })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_qop_options() {\n        var result0, result1, result2, result3, result4, result5, result6;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"qop\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"qop\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_LDQUOT();\n            if (result2 !== null) {\n              pos1 = pos;\n              result3 = parse_qop_value();\n              if (result3 !== null) {\n                result4 = [];\n                pos2 = pos;\n                if (input.charCodeAt(pos) === 44) {\n                  result5 = \",\";\n                  pos++;\n                } else {\n                  result5 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\",\\\"\");\n                  }\n                }\n                if (result5 !== null) {\n                  result6 = parse_qop_value();\n                  if (result6 !== null) {\n                    result5 = [result5, result6];\n                  } else {\n                    result5 = null;\n                    pos = pos2;\n                  }\n                } else {\n                  result5 = null;\n                  pos = pos2;\n                }\n                while (result5 !== null) {\n                  result4.push(result5);\n                  pos2 = pos;\n                  if (input.charCodeAt(pos) === 44) {\n                    result5 = \",\";\n                    pos++;\n                  } else {\n                    result5 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\",\\\"\");\n                    }\n                  }\n                  if (result5 !== null) {\n                    result6 = parse_qop_value();\n                    if (result6 !== null) {\n                      result5 = [result5, result6];\n                    } else {\n                      result5 = null;\n                      pos = pos2;\n                    }\n                  } else {\n                    result5 = null;\n                    pos = pos2;\n                  }\n                }\n                if (result4 !== null) {\n                  result3 = [result3, result4];\n                } else {\n                  result3 = null;\n                  pos = pos1;\n                }\n              } else {\n                result3 = null;\n                pos = pos1;\n              }\n              if (result3 !== null) {\n                result4 = parse_RDQUOT();\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_qop_value() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 8).toLowerCase() === \"auth-int\") {\n          result0 = input.substr(pos, 8);\n          pos += 8;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"auth-int\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 4).toLowerCase() === \"auth\") {\n            result0 = input.substr(pos, 4);\n            pos += 4;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"auth\\\"\");\n            }\n          }\n          if (result0 === null) {\n            result0 = parse_token();\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, qop_value) {\n                                data.qop || (data.qop=[]);\n                                data.qop.push(qop_value.toLowerCase()); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Proxy_Require() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_token();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_token();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Record_Route() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_rec_route();\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_rec_route();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_rec_route();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          var idx, length;\n                          length = data.multi_header.length;\n                          for (idx = 0; idx < length; idx++) {\n                            if (data.multi_header[idx].parsed === null) {\n                              data = null;\n                              break;\n                            }\n                          }\n                          if (data !== null) {\n                            data = data.multi_header;\n                          } else {\n                            data = -1;\n                          }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_rec_route() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_name_addr();\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_generic_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_generic_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          var header;\n                          if(!data.multi_header) data.multi_header = [];\n                          try {\n                            header = new NameAddrHeader(data.uri, data.display_name, data.params);\n                            delete data.uri;\n                            delete data.display_name;\n                            delete data.params;\n                          } catch(e) {\n                            header = null;\n                          }\n                          data.multi_header.push( { 'possition': pos,\n                                                    'offset': offset,\n                                                    'parsed': header\n                                                  });})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Reason() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"sip\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"SIP\\\"\");\n          }\n        }\n        if (result0 === null) {\n          result0 = parse_token();\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_reason_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_reason_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, protocol) {\n                          data.protocol = protocol.toLowerCase();\n                          if (!data.params) data.params = {};\n                          if (data.params.text && data.params.text[0] === '\"') {\n                            var text = data.params.text;\n                            data.text = text.substring(1, text.length-1);\n                            delete data.params.text;\n                          }\n                        })(pos0, result0[0]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_reason_param() {\n        var result0;\n        result0 = parse_reason_cause();\n        if (result0 === null) {\n          result0 = parse_generic_param();\n        }\n        return result0;\n      }\n      function parse_reason_cause() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5).toLowerCase() === \"cause\") {\n          result0 = input.substr(pos, 5);\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"cause\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result3 = parse_DIGIT();\n            if (result3 !== null) {\n              result2 = [];\n              while (result3 !== null) {\n                result2.push(result3);\n                result3 = parse_DIGIT();\n              }\n            } else {\n              result2 = null;\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, cause) {\n                          data.cause = parseInt(cause.join(''));\n                        })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Require() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_token();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_token();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Route() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_route_param();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_route_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_route_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_route_param() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_name_addr();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_generic_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_generic_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Subscription_State() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_substate_value();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_subexp_params();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_subexp_params();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_substate_value() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 6).toLowerCase() === \"active\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"active\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 7).toLowerCase() === \"pending\") {\n            result0 = input.substr(pos, 7);\n            pos += 7;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"pending\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 10).toLowerCase() === \"terminated\") {\n              result0 = input.substr(pos, 10);\n              pos += 10;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"terminated\\\"\");\n              }\n            }\n            if (result0 === null) {\n              result0 = parse_token();\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                                data.state = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_subexp_params() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 6).toLowerCase() === \"reason\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"reason\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_event_reason_value();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, reason) {\n                                if (typeof reason !== 'undefined') data.reason = reason; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.substr(pos, 7).toLowerCase() === \"expires\") {\n            result0 = input.substr(pos, 7);\n            pos += 7;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"expires\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_EQUAL();\n            if (result1 !== null) {\n              result2 = parse_delta_seconds();\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, expires) {\n                                  if (typeof expires !== 'undefined') data.expires = expires; })(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            if (input.substr(pos, 11).toLowerCase() === \"retry_after\") {\n              result0 = input.substr(pos, 11);\n              pos += 11;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"retry_after\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result1 = parse_EQUAL();\n              if (result1 !== null) {\n                result2 = parse_delta_seconds();\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, retry_after) {\n                                    if (typeof retry_after !== 'undefined') data.retry_after = retry_after; })(pos0, result0[2]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              result0 = parse_generic_param();\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_event_reason_value() {\n        var result0;\n        if (input.substr(pos, 11).toLowerCase() === \"deactivated\") {\n          result0 = input.substr(pos, 11);\n          pos += 11;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"deactivated\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 9).toLowerCase() === \"probation\") {\n            result0 = input.substr(pos, 9);\n            pos += 9;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"probation\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 8).toLowerCase() === \"rejected\") {\n              result0 = input.substr(pos, 8);\n              pos += 8;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"rejected\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 7).toLowerCase() === \"timeout\") {\n                result0 = input.substr(pos, 7);\n                pos += 7;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"timeout\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.substr(pos, 6).toLowerCase() === \"giveup\") {\n                  result0 = input.substr(pos, 6);\n                  pos += 6;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"giveup\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.substr(pos, 10).toLowerCase() === \"noresource\") {\n                    result0 = input.substr(pos, 10);\n                    pos += 10;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"noresource\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.substr(pos, 9).toLowerCase() === \"invariant\") {\n                      result0 = input.substr(pos, 9);\n                      pos += 9;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"invariant\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      result0 = parse_token();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_Subject() {\n        var result0;\n        result0 = parse_TEXT_UTF8_TRIM();\n        result0 = result0 !== null ? result0 : \"\";\n        return result0;\n      }\n      function parse_Supported() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_token();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_token();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        result0 = result0 !== null ? result0 : \"\";\n        return result0;\n      }\n      function parse_To() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SIP_URI_noparams();\n        if (result0 === null) {\n          result0 = parse_name_addr();\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_to_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_to_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                      var tag = data.tag;\n                      try {\n                        data = new NameAddrHeader(data.uri, data.display_name, data.params);\n                        if (tag) {data.setParam('tag',tag)}\n                      } catch(e) {\n                        data = -1;\n                      }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_to_param() {\n        var result0;\n        result0 = parse_tag_param();\n        if (result0 === null) {\n          result0 = parse_generic_param();\n        }\n        return result0;\n      }\n      function parse_Via() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_via_param();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_COMMA();\n          if (result2 !== null) {\n            result3 = parse_via_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_COMMA();\n            if (result2 !== null) {\n              result3 = parse_via_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_via_param() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_sent_protocol();\n        if (result0 !== null) {\n          result1 = parse_LWS();\n          if (result1 !== null) {\n            result2 = parse_sent_by();\n            if (result2 !== null) {\n              result3 = [];\n              pos1 = pos;\n              result4 = parse_SEMI();\n              if (result4 !== null) {\n                result5 = parse_via_params();\n                if (result5 !== null) {\n                  result4 = [result4, result5];\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              } else {\n                result4 = null;\n                pos = pos1;\n              }\n              while (result4 !== null) {\n                result3.push(result4);\n                pos1 = pos;\n                result4 = parse_SEMI();\n                if (result4 !== null) {\n                  result5 = parse_via_params();\n                  if (result5 !== null) {\n                    result4 = [result4, result5];\n                  } else {\n                    result4 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result4 = null;\n                  pos = pos1;\n                }\n              }\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_via_params() {\n        var result0;\n        result0 = parse_via_ttl();\n        if (result0 === null) {\n          result0 = parse_via_maddr();\n          if (result0 === null) {\n            result0 = parse_via_received();\n            if (result0 === null) {\n              result0 = parse_via_branch();\n              if (result0 === null) {\n                result0 = parse_response_port();\n                if (result0 === null) {\n                  result0 = parse_generic_param();\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_via_ttl() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"ttl\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"ttl\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_ttl();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, via_ttl_value) {\n                              data.ttl = via_ttl_value; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_via_maddr() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5).toLowerCase() === \"maddr\") {\n          result0 = input.substr(pos, 5);\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"maddr\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_host();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, via_maddr) {\n                              data.maddr = via_maddr; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_via_received() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 8).toLowerCase() === \"received\") {\n          result0 = input.substr(pos, 8);\n          pos += 8;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"received\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_IPv4address();\n            if (result2 === null) {\n              result2 = parse_IPv6address();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, via_received) {\n                              data.received = via_received; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_via_branch() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 6).toLowerCase() === \"branch\") {\n          result0 = input.substr(pos, 6);\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"branch\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_token();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, via_branch) {\n                              data.branch = via_branch; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_response_port() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5).toLowerCase() === \"rport\") {\n          result0 = input.substr(pos, 5);\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"rport\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          pos2 = pos;\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_DIGIT();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_DIGIT();\n            }\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                              if(typeof response_port !== 'undefined')\n                                data.rport = response_port.join(''); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_sent_protocol() {\n        var result0, result1, result2, result3, result4;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_protocol_name();\n        if (result0 !== null) {\n          result1 = parse_SLASH();\n          if (result1 !== null) {\n            result2 = parse_token();\n            if (result2 !== null) {\n              result3 = parse_SLASH();\n              if (result3 !== null) {\n                result4 = parse_transport();\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_protocol_name() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"sip\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"SIP\\\"\");\n          }\n        }\n        if (result0 === null) {\n          result0 = parse_token();\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, via_protocol) {\n                              data.protocol = via_protocol; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_transport() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 3).toLowerCase() === \"udp\") {\n          result0 = input.substr(pos, 3);\n          pos += 3;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"UDP\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 3).toLowerCase() === \"tcp\") {\n            result0 = input.substr(pos, 3);\n            pos += 3;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"TCP\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 3).toLowerCase() === \"tls\") {\n              result0 = input.substr(pos, 3);\n              pos += 3;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"TLS\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 4).toLowerCase() === \"sctp\") {\n                result0 = input.substr(pos, 4);\n                pos += 4;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"SCTP\\\"\");\n                }\n              }\n              if (result0 === null) {\n                result0 = parse_token();\n              }\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, via_transport) {\n                              data.transport = via_transport; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_sent_by() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_via_host();\n        if (result0 !== null) {\n          pos1 = pos;\n          result1 = parse_COLON();\n          if (result1 !== null) {\n            result2 = parse_via_port();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos1;\n            }\n          } else {\n            result1 = null;\n            pos = pos1;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_via_host() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_IPv4address();\n        if (result0 === null) {\n          result0 = parse_IPv6reference();\n          if (result0 === null) {\n            result0 = parse_hostname();\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                              data.host = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_via_port() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_DIGIT();\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result1 = parse_DIGIT();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse_DIGIT();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result3 = parse_DIGIT();\n              result3 = result3 !== null ? result3 : \"\";\n              if (result3 !== null) {\n                result4 = parse_DIGIT();\n                result4 = result4 !== null ? result4 : \"\";\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, via_sent_by_port) {\n                              data.port = parseInt(via_sent_by_port.join('')); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_ttl() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_DIGIT();\n        if (result0 !== null) {\n          result1 = parse_DIGIT();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse_DIGIT();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, ttl) {\n                              return parseInt(ttl.join('')); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_WWW_Authenticate() {\n        var result0;\n        result0 = parse_challenge();\n        return result0;\n      }\n      function parse_Session_Expires() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_s_e_expires();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_s_e_params();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_s_e_params();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_s_e_expires() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_delta_seconds();\n        if (result0 !== null) {\n          result0 = (function(offset, expires) { data.expires = expires; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_s_e_params() {\n        var result0;\n        result0 = parse_s_e_refresher();\n        if (result0 === null) {\n          result0 = parse_generic_param();\n        }\n        return result0;\n      }\n      function parse_s_e_refresher() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 9).toLowerCase() === \"refresher\") {\n          result0 = input.substr(pos, 9);\n          pos += 9;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"refresher\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            if (input.substr(pos, 3).toLowerCase() === \"uac\") {\n              result2 = input.substr(pos, 3);\n              pos += 3;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"uac\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.substr(pos, 3).toLowerCase() === \"uas\") {\n                result2 = input.substr(pos, 3);\n                pos += 3;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"uas\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, s_e_refresher_value) { data.refresher = s_e_refresher_value.toLowerCase(); })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_extension_header() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_token();\n        if (result0 !== null) {\n          result1 = parse_HCOLON();\n          if (result1 !== null) {\n            result2 = parse_header_value();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_header_value() {\n        var result0, result1;\n        result0 = [];\n        result1 = parse_TEXT_UTF8char();\n        if (result1 === null) {\n          result1 = parse_UTF8_CONT();\n          if (result1 === null) {\n            result1 = parse_LWS();\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_TEXT_UTF8char();\n          if (result1 === null) {\n            result1 = parse_UTF8_CONT();\n            if (result1 === null) {\n              result1 = parse_LWS();\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_message_body() {\n        var result0, result1;\n        result0 = [];\n        result1 = parse_OCTET();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_OCTET();\n        }\n        return result0;\n      }\n      function parse_uuid_URI() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 5) === \"uuid:\") {\n          result0 = \"uuid:\";\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"uuid:\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_uuid();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_uuid() {\n        var result0, result1, result2, result3, result4, result5, result6, result7, result8;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_hex8();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 45) {\n            result1 = \"-\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"-\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_hex4();\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 45) {\n                result3 = \"-\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"-\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse_hex4();\n                if (result4 !== null) {\n                  if (input.charCodeAt(pos) === 45) {\n                    result5 = \"-\";\n                    pos++;\n                  } else {\n                    result5 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"-\\\"\");\n                    }\n                  }\n                  if (result5 !== null) {\n                    result6 = parse_hex4();\n                    if (result6 !== null) {\n                      if (input.charCodeAt(pos) === 45) {\n                        result7 = \"-\";\n                        pos++;\n                      } else {\n                        result7 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"-\\\"\");\n                        }\n                      }\n                      if (result7 !== null) {\n                        result8 = parse_hex12();\n                        if (result8 !== null) {\n                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, uuid) {\n                          data = input.substring(pos+5, offset); })(pos0, result0[0]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_hex4() {\n        var result0, result1, result2, result3;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_HEXDIG();\n        if (result0 !== null) {\n          result1 = parse_HEXDIG();\n          if (result1 !== null) {\n            result2 = parse_HEXDIG();\n            if (result2 !== null) {\n              result3 = parse_HEXDIG();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_hex8() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_hex4();\n        if (result0 !== null) {\n          result1 = parse_hex4();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_hex12() {\n        var result0, result1, result2;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_hex4();\n        if (result0 !== null) {\n          result1 = parse_hex4();\n          if (result1 !== null) {\n            result2 = parse_hex4();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Refer_To() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_SIP_URI_noparams();\n        if (result0 === null) {\n          result0 = parse_name_addr();\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_generic_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_generic_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                        try {\n                          data = new NameAddrHeader(data.uri, data.display_name, data.params);\n                        } catch(e) {\n                          data = -1;\n                        }})(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_Replaces() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_call_id();\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          result2 = parse_SEMI();\n          if (result2 !== null) {\n            result3 = parse_replaces_param();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            result2 = parse_SEMI();\n            if (result2 !== null) {\n              result3 = parse_replaces_param();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_call_id() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_word();\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 64) {\n            result1 = \"@\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"@\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_word();\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                          data.call_id = input.substring(pos, offset); })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_replaces_param() {\n        var result0;\n        result0 = parse_to_tag();\n        if (result0 === null) {\n          result0 = parse_from_tag();\n          if (result0 === null) {\n            result0 = parse_early_flag();\n            if (result0 === null) {\n              result0 = parse_generic_param();\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_to_tag() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 6) === \"to-tag\") {\n          result0 = \"to-tag\";\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"to-tag\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_token();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, to_tag) {\n                            data.to_tag = to_tag; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_from_tag() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 8) === \"from-tag\") {\n          result0 = \"from-tag\";\n          pos += 8;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"from-tag\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_EQUAL();\n          if (result1 !== null) {\n            result2 = parse_token();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, from_tag) {\n                            data.from_tag = from_tag; })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_early_flag() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.substr(pos, 10) === \"early-only\") {\n          result0 = \"early-only\";\n          pos += 10;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"early-only\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) {\n                            data.early_only = true; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function cleanupExpected(expected) {\n        expected.sort();\n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) { line++; }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        return { line: line, column: column };\n      }\n        var URI = require('./URI');\n        var NameAddrHeader = require('./NameAddrHeader');\n        var data = {};\n      var result = parseFunctions[startRule]();\n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        new this.SyntaxError(\n          cleanupExpected(rightmostFailuresExpected),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n        return -1;\n      }\n      return data;\n    },\n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n  /* Thrown when a parser encounters a syntax error. */\n  result.SyntaxError = function(expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n            + \" or \"\n            + expected[expected.length - 1];\n      }\n      foundHumanized = found ? quote(found) : \"end of input\";\n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  result.SyntaxError.prototype = Error.prototype;\n  return result;\n})();","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/UA.js":"module.exports = UA;\n\n\nvar C = {\n  // UA status codes\n  STATUS_INIT :                0,\n  STATUS_READY:                1,\n  STATUS_USER_CLOSED:          2,\n  STATUS_NOT_READY:            3,\n\n  // UA error codes\n  CONFIGURATION_ERROR:  1,\n  NETWORK_ERROR:        2\n};\n\n/**\n * Expose C object.\n */\nUA.C = C;\n\n\n/**\n * Dependencies.\n */\nvar util = require('util');\nvar events = require('events');\nvar debug = require('debug')('JsSIP:UA');\nvar debugerror = require('debug')('JsSIP:ERROR:UA');\ndebugerror.log = console.warn.bind(console);\nvar JsSIP_C = require('./Constants');\nvar Registrator = require('./Registrator');\nvar RTCSession = require('./RTCSession');\nvar Message = require('./Message');\nvar Transactions = require('./Transactions');\nvar Transport = require('./Transport');\nvar Socket = require('./Socket');\nvar Utils = require('./Utils');\nvar Exceptions = require('./Exceptions');\nvar URI = require('./URI');\nvar Grammar = require('./Grammar');\nvar Parser = require('./Parser');\nvar SIPMessage = require('./SIPMessage');\nvar sanityCheck = require('./sanityCheck');\n\n\n\n/**\n * The User-Agent class.\n * @class JsSIP.UA\n * @param {Object} configuration Configuration parameters.\n * @throws {JsSIP.Exceptions.ConfigurationError} If a configuration parameter is invalid.\n * @throws {TypeError} If no configuration is given.\n */\nfunction UA(configuration) {\n  debug('new() [configuration:%o]', configuration);\n\n  this.cache = {\n    credentials: {}\n  };\n\n  this.configuration = {};\n  this.dynConfiguration = {};\n  this.dialogs = {};\n\n  //User actions outside any session/dialog (MESSAGE)\n  this.applicants = {};\n\n  this.sessions = {};\n  this.transport = null;\n  this.contact = null;\n  this.status = C.STATUS_INIT;\n  this.error = null;\n  this.transactions = {\n    nist: {},\n    nict: {},\n    ist: {},\n    ict: {}\n  };\n\n  // Custom UA empty object for high level use\n  this.data = {};\n\n  this.closeTimer = null;\n\n  Object.defineProperties(this, {\n    transactionsCount: {\n      get: function() {\n        var type,\n          transactions = ['nist','nict','ist','ict'],\n          count = 0;\n\n        for (type in transactions) {\n          count += Object.keys(this.transactions[transactions[type]]).length;\n        }\n\n        return count;\n      }\n    },\n\n    nictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions.nict).length;\n      }\n    },\n\n    nistTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions.nist).length;\n      }\n    },\n\n    ictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions.ict).length;\n      }\n    },\n\n    istTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions.ist).length;\n      }\n    }\n  });\n\n  /**\n   * Load configuration\n   */\n\n  if(configuration === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  try {\n    this.loadConfig(configuration);\n  } catch(e) {\n    this.status = C.STATUS_NOT_READY;\n    this.error = C.CONFIGURATION_ERROR;\n    throw e;\n  }\n\n  // Initialize registrator\n  this._registrator = new Registrator(this);\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(UA, events.EventEmitter);\n\n\n//=================\n//  High Level API\n//=================\n\n/**\n * Connect to the server if status = STATUS_INIT.\n * Resume UA after being closed.\n */\nUA.prototype.start = function() {\n  debug('start()');\n\n  if (this.status === C.STATUS_INIT) {\n    this.transport.connect();\n  } else if(this.status === C.STATUS_USER_CLOSED) {\n    debug('restarting UA');\n\n    // disconnect\n    if (this.closeTimer !== null) {\n      clearTimeout(this.closeTimer);\n      this.closeTimer = null;\n      this.transport.disconnect();\n    }\n\n    // reconnect\n    this.status = C.STATUS_INIT;\n    this.transport.connect();\n  } else if (this.status === C.STATUS_READY) {\n    debug('UA is in READY status, not restarted');\n  } else {\n    debug('ERROR: connection is down, Auto-Recovery system is trying to reconnect');\n  }\n\n  // Set dynamic configuration.\n  this.dynConfiguration.register = this.configuration.register;\n};\n\n/**\n * Register.\n */\nUA.prototype.register = function() {\n  debug('register()');\n\n  this.dynConfiguration.register = true;\n  this._registrator.register();\n};\n\n/**\n * Unregister.\n */\nUA.prototype.unregister = function(options) {\n  debug('unregister()');\n\n  this.dynConfiguration.register = false;\n  this._registrator.unregister(options);\n};\n\n/**\n * Get the Registrator instance.\n */\nUA.prototype.registrator = function() {\n  return this._registrator;\n};\n\n/**\n * Registration state.\n */\nUA.prototype.isRegistered = function() {\n  if(this._registrator.registered) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * Connection state.\n */\nUA.prototype.isConnected = function() {\n  return this.transport.isConnected();\n};\n\n/**\n * Make an outgoing call.\n *\n * -param {String} target\n * -param {Object} views\n * -param {Object} [options]\n *\n * -throws {TypeError}\n *\n */\nUA.prototype.call = function(target, options) {\n  debug('call()');\n\n  var session;\n\n  session = new RTCSession(this);\n  session.connect(target, options);\n  return session;\n};\n\n/**\n * Send a message.\n *\n * -param {String} target\n * -param {String} body\n * -param {Object} [options]\n *\n * -throws {TypeError}\n *\n */\nUA.prototype.sendMessage = function(target, body, options) {\n  debug('sendMessage()');\n\n  var message;\n\n  message = new Message(this);\n  message.send(target, body, options);\n  return message;\n};\n\n/**\n * Terminate ongoing sessions.\n */\nUA.prototype.terminateSessions = function(options) {\n  debug('terminateSessions()');\n\n  for(var idx in this.sessions) {\n    if (!this.sessions[idx].isEnded()) {\n      this.sessions[idx].terminate(options);\n    }\n  }\n};\n\n/**\n * Gracefully close.\n *\n */\nUA.prototype.stop = function() {\n  debug('stop()');\n\n  var session;\n  var applicant;\n  var num_sessions;\n  var ua = this;\n\n  // Remove dynamic settings.\n  this.dynConfiguration = {};\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    debug('UA already closed');\n    return;\n  }\n\n  // Close registrator\n  this._registrator.close();\n\n  // If there are session wait a bit so CANCEL/BYE can be sent and their responses received.\n  num_sessions = Object.keys(this.sessions).length;\n\n  // Run  _terminate_ on every Session\n  for(session in this.sessions) {\n    debug('closing session ' + session);\n    try { this.sessions[session].terminate(); } catch(error) {}\n  }\n\n  // Run  _close_ on every applicant\n  for(applicant in this.applicants) {\n    try { this.applicants[applicant].close(); } catch(error) {}\n  }\n\n  this.status = C.STATUS_USER_CLOSED;\n\n  if (this.nistTransactionsCount  === 0 &&\n      this.nictTransactionsCount  === 0 &&\n      this.ictTransactionsCount   === 0 &&\n      this.istTransactionsCount   === 0 &&\n      num_sessions === 0) {\n    ua.transport.disconnect();\n  }\n  else {\n    this.closeTimer = setTimeout(function() {\n      ua.closeTimer = null;\n      ua.transport.disconnect();\n    }, 2000);\n  }\n};\n\n/**\n * Normalice a string into a valid SIP request URI\n * -param {String} target\n * -returns {JsSIP.URI|undefined}\n */\nUA.prototype.normalizeTarget = function(target) {\n  return Utils.normalizeTarget(target, this.configuration.hostport_params);\n};\n\n/**\n * Allow retrieving configuration and autogenerated fields in runtime.\n */\nUA.prototype.get = function(parameter) {\n  switch(parameter) {\n    case 'realm':\n      return this.configuration.realm;\n\n    case 'ha1':\n      return this.configuration.ha1;\n\n    default:\n      debugerror('get() | cannot get \"%s\" parameter in runtime', parameter);\n      return undefined;\n  }\n\n  return true;\n};\n\n/**\n * Allow configuration changes in runtime.\n * Returns true if the parameter could be set.\n */\nUA.prototype.set = function(parameter, value) {\n  switch(parameter) {\n    case 'password': {\n      this.configuration.password = String(value);\n      break;\n    }\n\n    case 'realm': {\n      this.configuration.realm = String(value);\n      break;\n    }\n\n    case 'ha1': {\n      this.configuration.ha1 = String(value);\n      // Delete the plain SIP password.\n      this.configuration.password = null;\n      break;\n    }\n\n    case 'display_name': {\n      if (Grammar.parse('\"' + value + '\"', 'display_name') === -1) {\n        debugerror('set() | wrong \"display_name\"');\n        return false;\n      }\n      this.configuration.display_name = value;\n      break;\n    }\n\n    default:\n      debugerror('set() | cannot set \"%s\" parameter in runtime', parameter);\n      return false;\n  }\n\n  return true;\n};\n\n\n//===============================\n//  Private (For internal use)\n//===============================\n\n// UA.prototype.saveCredentials = function(credentials) {\n//   this.cache.credentials[credentials.realm] = this.cache.credentials[credentials.realm] || {};\n//   this.cache.credentials[credentials.realm][credentials.uri] = credentials;\n// };\n\n// UA.prototype.getCredentials = function(request) {\n//   var realm, credentials;\n\n//   realm = request.ruri.host;\n\n//   if (this.cache.credentials[realm] && this.cache.credentials[realm][request.ruri]) {\n//     credentials = this.cache.credentials[realm][request.ruri];\n//     credentials.method = request.method;\n//   }\n\n//   return credentials;\n// };\n\n\n//==========================\n// Event Handlers\n//==========================\n\n/**\n * new Transaction\n */\nUA.prototype.newTransaction = function(transaction) {\n  this.transactions[transaction.type][transaction.id] = transaction;\n    this.emit('newTransaction', {\n    transaction: transaction\n  });\n};\n\n\n/**\n * Transaction destroyed.\n */\nUA.prototype.destroyTransaction = function(transaction) {\n  delete this.transactions[transaction.type][transaction.id];\n    this.emit('transactionDestroyed', {\n    transaction: transaction\n  });\n};\n\n\n/**\n *  new Message\n */\nUA.prototype.newMessage = function(data) {\n  this.emit('newMessage', data);\n};\n\n/**\n * new RTCSession\n */\nUA.prototype.newRTCSession = function(data) {\n  this.emit('newRTCSession', data);\n};\n\n/**\n * Registered\n */\nUA.prototype.registered = function(data) {\n  this.emit('registered', data);\n};\n\n\n/**\n * Unregistered\n */\nUA.prototype.unregistered = function(data) {\n  this.emit('unregistered', data);\n};\n\n\n/**\n * Registration Failed\n */\nUA.prototype.registrationFailed = function(data) {\n  this.emit('registrationFailed', data);\n};\n\n\n//=========================\n// receiveRequest\n//=========================\n\n/**\n * Request reception\n */\nUA.prototype.receiveRequest = function(request) {\n  var dialog, session, message, replaces,\n  method = request.method;\n\n  // Check that request URI points to us\n  if(request.ruri.user !== this.configuration.uri.user && request.ruri.user !== this.contact.uri.user) {\n    debug('Request-URI does not point to us');\n    if (request.method !== JsSIP_C.ACK) {\n      request.reply_sl(404);\n    }\n    return;\n    }\n\n    // Check request URI scheme\n    if(request.ruri.scheme === JsSIP_C.SIPS) {\n    request.reply_sl(416);\n    return;\n  }\n\n  // Check transaction\n  if(Transactions.checkTransaction(this, request)) {\n    return;\n  }\n\n  // Create the server transaction\n  if(method === JsSIP_C.INVITE) {\n    new Transactions.InviteServerTransaction(request, this);\n  } else if(method !== JsSIP_C.ACK && method !== JsSIP_C.CANCEL) {\n    new Transactions.NonInviteServerTransaction(request, this);\n  }\n\n  /* RFC3261 12.2.2\n   * Requests that do not change in any way the state of a dialog may be\n   * received within a dialog (for example, an OPTIONS request).\n   * They are processed as if they had been received outside the dialog.\n   */\n  if(method === JsSIP_C.OPTIONS) {\n    request.reply(200);\n  } else if (method === JsSIP_C.MESSAGE) {\n    if (this.listeners('newMessage').length === 0) {\n      request.reply(405);\n      return;\n    }\n    message = new Message(this);\n    message.init_incoming(request);\n  } else if (method === JsSIP_C.INVITE) {\n    // Initial INVITE\n    if(!request.to_tag && this.listeners('newRTCSession').length === 0) {\n      request.reply(405);\n      return;\n    }\n  }\n\n  // Initial Request\n  if(!request.to_tag) {\n    switch(method) {\n      case JsSIP_C.INVITE:\n        if (window.RTCPeerConnection) { // TODO\n          if (request.hasHeader('replaces')) {\n            replaces = request.replaces;\n            dialog = this.findDialog(replaces.call_id, replaces.from_tag, replaces.to_tag);\n            if (dialog) {\n              session = dialog.owner;\n              if (!session.isEnded()) {\n                session.receiveRequest(request);\n              } else {\n                request.reply(603);\n              }\n            } else {\n              request.reply(481);\n            }\n          } else {\n            session = new RTCSession(this);\n            session.init_incoming(request);\n          }\n        } else {\n          debugerror('INVITE received but WebRTC is not supported');\n          request.reply(488);\n        }\n        break;\n      case JsSIP_C.BYE:\n        // Out of dialog BYE received\n        request.reply(481);\n        break;\n        case JsSIP_C.CANCEL:\n        session = this.findSession(request);\n        if (session) {\n          session.receiveRequest(request);\n        } else {\n          debug('received CANCEL request for a non existent session');\n        }\n        break;\n      case JsSIP_C.ACK:\n        /* Absorb it.\n         * ACK request without a corresponding Invite Transaction\n         * and without To tag.\n         */\n        break;\n        default:\n        request.reply(405);\n        break;\n    }\n  }\n  // In-dialog request\n  else {\n    dialog = this.findDialog(request.call_id, request.from_tag, request.to_tag);\n\n    if(dialog) {\n      dialog.receiveRequest(request);\n    } else if (method === JsSIP_C.NOTIFY) {\n      session = this.findSession(request);\n      if(session) {\n        session.receiveRequest(request);\n      } else {\n        debug('received NOTIFY request for a non existent subscription');\n        request.reply(481, 'Subscription does not exist');\n      }\n    }\n    /* RFC3261 12.2.2\n     * Request with to tag, but no matching dialog found.\n     * Exception: ACK for an Invite request for which a dialog has not\n     * been created.\n     */\n    else {\n      if(method !== JsSIP_C.ACK) {\n        request.reply(481);\n      }\n    }\n  }\n};\n\n//=================\n// Utils\n//=================\n\n/**\n * Get the session to which the request belongs to, if any.\n */\nUA.prototype.findSession = function(request) {\n  var\n  sessionIDa = request.call_id + request.from_tag,\n  sessionA = this.sessions[sessionIDa],\n  sessionIDb = request.call_id + request.to_tag,\n  sessionB = this.sessions[sessionIDb];\n\n  if(sessionA) {\n    return sessionA;\n  } else if(sessionB) {\n    return sessionB;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Get the dialog to which the request belongs to, if any.\n */\nUA.prototype.findDialog = function(call_id, from_tag, to_tag) {\n  var\n  id = call_id + from_tag + to_tag,\n  dialog = this.dialogs[id];\n\n  if(dialog) {\n    return dialog;\n  } else {\n    id = call_id + to_tag + from_tag;\n    dialog = this.dialogs[id];\n    if(dialog) {\n      return dialog;\n    } else {\n      return null;\n    }\n  }\n};\n\nUA.prototype.loadConfig = function(configuration) {\n  // Settings and default values\n  var parameter, value, checked_value, hostport_params, registrar_server,\n  settings = {\n    /* Host address\n    * Value to be set in Via sent_by and host part of Contact FQDN\n    */\n    via_host: Utils.createRandomToken(12) + '.invalid',\n\n    // SIP Contact URI\n    contact_uri: null,\n\n    // SIP authentication password\n    password: null,\n\n    // SIP authentication realm\n    realm: null,\n\n    // SIP authentication HA1 hash\n    ha1: null,\n\n    // Registration parameters\n    register_expires: 600,\n    register: true,\n    registrar_server: null,\n\n    use_preloaded_route: false,\n\n    // Session parameters\n    no_answer_timeout: 60,\n    session_timers: true,\n  };\n\n  // Pre-Configuration\n\n  // Check Mandatory parameters\n  for(parameter in UA.configuration_check.mandatory) {\n    if(!configuration.hasOwnProperty(parameter)) {\n      throw new Exceptions.ConfigurationError(parameter);\n    } else {\n      value = configuration[parameter];\n      checked_value = UA.configuration_check.mandatory[parameter].call(this, value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  // Check Optional parameters\n  for(parameter in UA.configuration_check.optional) {\n    if(configuration.hasOwnProperty(parameter)) {\n      value = configuration[parameter];\n\n      /* If the parameter value is null, empty string, undefined, empty array\n       * or it's a number with NaN value, then apply its default value.\n       */\n      if (Utils.isEmpty(value)) {\n        continue;\n      }\n\n      checked_value = UA.configuration_check.optional[parameter].call(this, value, configuration);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  // Post Configuration Process\n\n  // Allow passing 0 number as display_name.\n  if (settings.display_name === 0) {\n    settings.display_name = '0';\n  }\n\n  // Instance-id for GRUU.\n  if (!settings.instance_id) {\n    settings.instance_id = Utils.newUUID();\n  }\n\n  // jssip_id instance parameter. Static random tag of length 5.\n  settings.jssip_id = Utils.createRandomToken(5);\n\n  // String containing settings.uri without scheme and user.\n  hostport_params = settings.uri.clone();\n  hostport_params.user = null;\n  settings.hostport_params = hostport_params.toString().replace(/^sip:/i, '');\n\n  // Transport\n  var sockets = [];\n\n  if (settings.sockets && Array.isArray(settings.sockets)) {\n    sockets = sockets.concat(settings.sockets);\n  }\n\n  if (sockets.length === 0) {\n    throw new Exceptions.ConfigurationError('sockets');\n  }\n\n  try {\n    this.transport = new Transport(sockets, { /* recovery options */\n      max_interval: settings.connection_recovery_max_interval,\n      min_interval: settings.connection_recovery_min_interval\n    });\n\n    // Transport event callbacks\n    this.transport.onconnecting = onTransportConnecting.bind(this);\n    this.transport.onconnect    = onTransportConnect.bind(this);\n    this.transport.ondisconnect = onTransportDisconnect.bind(this);\n    this.transport.ondata       = onTransportData.bind(this);\n\n    // transport options not needed here anymore\n    delete settings.connection_recovery_max_interval;\n    delete settings.connection_recovery_min_interval;\n    delete settings.sockets;\n  } catch (e) {\n    debugerror(e);\n    throw new Exceptions.ConfigurationError('sockets', sockets);\n  }\n\n  // Check whether authorization_user is explicitly defined.\n  // Take 'settings.uri.user' value if not.\n  if (!settings.authorization_user) {\n    settings.authorization_user = settings.uri.user;\n  }\n\n  // If no 'registrar_server' is set use the 'uri' value without user portion and\n  // without URI params/headers.\n  if (!settings.registrar_server) {\n    registrar_server = settings.uri.clone();\n    registrar_server.user = null;\n    registrar_server.clearParams();\n    registrar_server.clearHeaders();\n    settings.registrar_server = registrar_server;\n  }\n\n  // User no_answer_timeout.\n  settings.no_answer_timeout = settings.no_answer_timeout * 1000;\n\n  // Via Host\n  if (settings.contact_uri) {\n    settings.via_host = settings.contact_uri.host;\n  }\n\n  // Contact URI\n  else {\n    settings.contact_uri = new URI('sip', Utils.createRandomToken(8), settings.via_host, null, {transport: 'ws'});\n  }\n\n  this.contact = {\n    pub_gruu: null,\n    temp_gruu: null,\n    uri: settings.contact_uri,\n    toString: function(options) {\n      options = options || {};\n\n      var\n      anonymous = options.anonymous || null,\n      outbound = options.outbound || null,\n      contact = '<';\n\n      if (anonymous) {\n        contact += this.temp_gruu || 'sip:anonymous@anonymous.invalid;transport=ws';\n      } else {\n        contact += this.pub_gruu || this.uri.toString();\n      }\n\n      if (outbound && (anonymous ? !this.temp_gruu : !this.pub_gruu)) {\n        contact += ';ob';\n      }\n\n      contact += '>';\n\n      return contact;\n    }\n  };\n\n  // Fill the value of the configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = settings[parameter];\n  }\n\n  Object.defineProperties(this.configuration, UA.configuration_skeleton);\n\n  // Clean UA.configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = '';\n  }\n\n  debug('configuration parameters after validation:');\n  for(parameter in settings) {\n    switch(parameter) {\n      case 'uri':\n      case 'registrar_server':\n        debug('- ' + parameter + ': ' + settings[parameter]);\n        break;\n      case 'password':\n      case 'ha1':\n        debug('- ' + parameter + ': ' + 'NOT SHOWN');\n        break;\n      default:\n        debug('- ' + parameter + ': ' + JSON.stringify(settings[parameter]));\n    }\n  }\n\n  return;\n};\n\n/**\n * Configuration Object skeleton.\n */\nUA.configuration_skeleton = (function() {\n  var\n    idx, parameter, writable,\n    skeleton = {},\n    parameters = [\n      // Internal parameters\n      'jssip_id',\n      'hostport_params',\n\n      // Mandatory user configurable parameters\n      'uri',\n\n      // Optional user configurable parameters\n      'authorization_user',\n      'contact_uri',\n      'display_name',\n      'instance_id',\n      'no_answer_timeout', // 30 seconds\n      'session_timers', // true\n      'password',\n      'realm',\n      'ha1',\n      'register_expires', // 600 seconds\n      'registrar_server',\n      'sockets',\n      'use_preloaded_route',\n\n      // Post-configuration generated parameters\n      'via_core_value',\n      'via_host'\n    ];\n\n  var writable_parameters = [\n    'password', 'realm', 'ha1', 'display_name'\n  ];\n\n  for(idx in parameters) {\n    parameter = parameters[idx];\n\n    if (writable_parameters.indexOf(parameter) !== -1) {\n      writable = true;\n    } else {\n      writable = false;\n    }\n\n    skeleton[parameter] = {\n      value: '',\n      writable: writable,\n      configurable: false\n    };\n  }\n\n  skeleton.register = {\n    value: '',\n    writable: true,\n    configurable: false\n  };\n\n  return skeleton;\n}());\n\n/**\n * Configuration checker.\n */\nUA.configuration_check = {\n  mandatory: {\n\n    uri: function(uri) {\n      var parsed;\n\n      if (!/^sip:/i.test(uri)) {\n        uri = JsSIP_C.SIP + ':' + uri;\n      }\n      parsed = URI.parse(uri);\n\n      if(!parsed) {\n        return;\n      } else if(!parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    }\n  },\n\n  optional: {\n\n    authorization_user: function(authorization_user) {\n      if(Grammar.parse('\"'+ authorization_user +'\"', 'quoted_string') === -1) {\n        return;\n      } else {\n        return authorization_user;\n      }\n    },\n\n    connection_recovery_max_interval: function(connection_recovery_max_interval) {\n      var value;\n      if(Utils.isDecimal(connection_recovery_max_interval)) {\n        value = Number(connection_recovery_max_interval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    connection_recovery_min_interval: function(connection_recovery_min_interval) {\n      var value;\n      if(Utils.isDecimal(connection_recovery_min_interval)) {\n        value = Number(connection_recovery_min_interval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    contact_uri: function(contact_uri) {\n      if (typeof contact_uri === 'string') {\n        var uri = Grammar.parse(contact_uri,'SIP_URI');\n        if (uri !== -1) {\n          return uri;\n        }\n      }\n    },\n\n    display_name: function(display_name) {\n      if (Grammar.parse('\"' + display_name + '\"', 'display_name') === -1) {\n        return;\n      } else {\n        return display_name;\n      }\n    },\n\n    instance_id: function(instance_id) {\n      if ((/^uuid:/i.test(instance_id))) {\n        instance_id = instance_id.substr(5);\n      }\n\n      if(Grammar.parse(instance_id, 'uuid') === -1) {\n        return;\n      } else {\n        return instance_id;\n      }\n    },\n\n    no_answer_timeout: function(no_answer_timeout) {\n      var value;\n      if (Utils.isDecimal(no_answer_timeout)) {\n        value = Number(no_answer_timeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    session_timers: function(session_timers) {\n      if (typeof session_timers === 'boolean') {\n        return session_timers;\n      }\n    },\n\n    password: function(password) {\n      return String(password);\n    },\n\n    realm: function(realm) {\n      return String(realm);\n    },\n\n    ha1: function(ha1) {\n      return String(ha1);\n    },\n\n    register: function(register) {\n      if (typeof register === 'boolean') {\n        return register;\n      }\n    },\n\n    register_expires: function(register_expires) {\n      var value;\n      if (Utils.isDecimal(register_expires)) {\n        value = Number(register_expires);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    registrar_server: function(registrar_server) {\n      var parsed;\n\n      if (!/^sip:/i.test(registrar_server)) {\n        registrar_server = JsSIP_C.SIP + ':' + registrar_server;\n      }\n      parsed = URI.parse(registrar_server);\n\n      if(!parsed) {\n        return;\n      } else if(parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    sockets: function(sockets) {\n      var idx, length;\n\n      /* Allow defining sockets parameter as:\n       *  Socket: socket\n       *  Array of Socket: [socket1, socket2]\n       *  Array of Objects: [{socket: socket1, weight:1}, {socket: Socket2, weight:0}]\n       *  Array of Objects and Socket: [{socket: socket1}, socket2]\n       */\n      if (Socket.isSocket(sockets)) {\n        sockets = [{socket: sockets}];\n      } else if (Array.isArray(sockets) && sockets.length) {\n        length = sockets.length;\n        for (idx = 0; idx < length; idx++) {\n          if (Socket.isSocket(sockets[idx])) {\n            sockets[idx] = {socket: sockets[idx]};\n          }\n        }\n      } else {\n        return;\n      }\n\n      return sockets;\n    },\n\n    use_preloaded_route: function(use_preloaded_route) {\n      if (typeof use_preloaded_route === 'boolean') {\n        return use_preloaded_route;\n      }\n    }\n  }\n};\n\n/**\n * Transport event handlers\n */\n\n// Transport connecting event\nfunction onTransportConnecting(data) {\n  this.emit('connecting', data);\n}\n\n// Transport connected event.\nfunction onTransportConnect(data) {\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this.status = C.STATUS_READY;\n  this.error = null;\n\n  this.emit('connected', data);\n\n  if(this.dynConfiguration.register) {\n    this._registrator.register();\n  }\n}\n\n// Transport disconnected event.\nfunction onTransportDisconnect(data) {\n  // Run _onTransportError_ callback on every client transaction using _transport_\n  var type, idx, length,\n  client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  length = client_transactions.length;\n  for (type = 0; type < length; type++) {\n    for(idx in this.transactions[client_transactions[type]]) {\n      this.transactions[client_transactions[type]][idx].onTransportError();\n    }\n  }\n\n  this.emit('disconnected', data);\n\n  // Call registrator _onTransportClosed_\n  this._registrator.onTransportClosed();\n\n  if (this.status !== C.STATUS_USER_CLOSED) {\n    this.status = C.STATUS_NOT_READY;\n    this.error = C.NETWORK_ERROR;\n  }\n}\n\n// Transport data event\nfunction onTransportData(data) {\n var transaction,\n  transport = data.transport,\n  message = data.message;\n\n message = Parser.parseMessage(message, this);\n\n if (! message) {\n   return;\n }\n\n if (this.status === UA.C.STATUS_USER_CLOSED &&\n     message instanceof SIPMessage.IncomingRequest) {\n   return;\n }\n\n // Do some sanity check\n if(! sanityCheck(message, this, transport)) {\n   return;\n }\n\n if(message instanceof SIPMessage.IncomingRequest) {\n   message.transport = transport;\n   this.receiveRequest(message);\n } else if(message instanceof SIPMessage.IncomingResponse) {\n   /* Unike stated in 18.1.2, if a response does not match\n   * any transaction, it is discarded here and no passed to the core\n   * in order to be discarded there.\n   */\n   switch(message.method) {\n     case JsSIP_C.INVITE:\n       transaction = this.transactions.ict[message.via_branch];\n       if(transaction) {\n         transaction.receiveResponse(message);\n       }\n       break;\n     case JsSIP_C.ACK:\n       // Just in case ;-)\n       break;\n     default:\n       transaction = this.transactions.nict[message.via_branch];\n       if(transaction) {\n         transaction.receiveResponse(message);\n       }\n       break;\n   }\n }\n}\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Registrator.js":"module.exports = Registrator;\n\n\n/**\n * Dependecies\n */\nvar debug = require('debug')('JsSIP:Registrator');\nvar Utils = require('./Utils');\nvar JsSIP_C = require('./Constants');\nvar SIPMessage = require('./SIPMessage');\nvar RequestSender = require('./RequestSender');\n\n\nfunction Registrator(ua, transport) {\n  var reg_id=1; //Force reg_id to 1.\n\n  this.ua = ua;\n  this.transport = transport;\n\n  this.registrar = ua.configuration.registrar_server;\n  this.expires = ua.configuration.register_expires;\n\n  // Call-ID and CSeq values RFC3261 10.2\n  this.call_id = Utils.createRandomToken(22);\n  this.cseq = 0;\n\n  // this.to_uri\n  this.to_uri = ua.configuration.uri;\n\n  this.registrationTimer = null;\n\n  // Set status\n  this.registered = false;\n\n  // Contact header\n  this.contact = this.ua.contact.toString();\n\n  // sip.ice media feature tag (RFC 5768)\n  this.contact += ';+sip.ice';\n\n  // Custom headers for REGISTER and un-REGISTER.\n  this.extraHeaders = [];\n\n  // Custom Contact header params for REGISTER and un-REGISTER.\n  this.extraContactParams = '';\n\n  if(reg_id) {\n    this.contact += ';reg-id='+ reg_id;\n    this.contact += ';+sip.instance=\"<urn:uuid:'+ this.ua.configuration.instance_id+'>\"';\n  }\n}\n\n\nRegistrator.prototype = {\n  setExtraHeaders: function(extraHeaders) {\n    if (! Array.isArray(extraHeaders)) {\n      extraHeaders = [];\n    }\n\n    this.extraHeaders = extraHeaders.slice();\n  },\n\n  setExtraContactParams: function(extraContactParams) {\n    if (! (extraContactParams instanceof Object)) {\n      extraContactParams = {};\n    }\n\n    // Reset it.\n    this.extraContactParams = '';\n\n    for(var param_key in extraContactParams) {\n      var param_value = extraContactParams[param_key];\n      this.extraContactParams += (';' + param_key);\n      if (param_value) {\n        this.extraContactParams += ('=' + param_value);\n      }\n    }\n  },\n\n  register: function() {\n    var request_sender, cause, extraHeaders,\n      self = this;\n\n    extraHeaders = this.extraHeaders.slice();\n    extraHeaders.push('Contact: ' + this.contact + ';expires=' + this.expires + this.extraContactParams);\n    extraHeaders.push('Expires: '+ this.expires);\n\n    this.request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this.registrar, this.ua, {\n        'to_uri': this.to_uri,\n        'call_id': this.call_id,\n        'cseq': (this.cseq += 1)\n      }, extraHeaders);\n\n    request_sender = new RequestSender(this, this.ua);\n\n    this.receiveResponse = function(response) {\n      var contact, expires,\n        contacts = response.getHeaders('contact').length;\n\n      // Discard responses to older REGISTER/un-REGISTER requests.\n      if(response.cseq !== this.cseq) {\n        return;\n      }\n\n      // Clear registration timer\n      if (this.registrationTimer !== null) {\n        clearTimeout(this.registrationTimer);\n        this.registrationTimer = null;\n      }\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          // Ignore provisional responses.\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          if(response.hasHeader('expires')) {\n            expires = response.getHeader('expires');\n          }\n\n          // Search the Contact pointing to us and update the expires value accordingly.\n          if (!contacts) {\n            debug('no Contact header in response to REGISTER, response ignored');\n            break;\n          }\n\n          while(contacts--) {\n            contact = response.parseHeader('contact', contacts);\n            if(contact.uri.user === this.ua.contact.uri.user) {\n              expires = contact.getParam('expires');\n              break;\n            } else {\n              contact = null;\n            }\n          }\n\n          if (!contact) {\n            debug('no Contact header pointing to us, response ignored');\n            break;\n          }\n\n          if(!expires) {\n            expires = this.expires;\n          }\n\n          // Re-Register before the expiration interval has elapsed.\n          // For that, decrease the expires value. ie: 3 seconds\n          this.registrationTimer = setTimeout(function() {\n            self.registrationTimer = null;\n            self.register();\n          }, (expires * 1000) - 3000);\n\n          //Save gruu values\n          if (contact.hasParam('temp-gruu')) {\n            this.ua.contact.temp_gruu = contact.getParam('temp-gruu').replace(/\"/g,'');\n          }\n          if (contact.hasParam('pub-gruu')) {\n            this.ua.contact.pub_gruu = contact.getParam('pub-gruu').replace(/\"/g,'');\n          }\n\n          if (! this.registered) {\n            this.registered = true;\n            this.ua.registered({\n              response: response\n            });\n          }\n          break;\n        // Interval too brief RFC3261 10.2.8\n        case /^423$/.test(response.status_code):\n          if(response.hasHeader('min-expires')) {\n            // Increase our registration interval to the suggested minimum\n            this.expires = response.getHeader('min-expires');\n            // Attempt the registration again immediately\n            this.register();\n          } else { //This response MUST contain a Min-Expires header field\n            debug('423 response received for REGISTER without Min-Expires');\n            this.registrationFailure(response, JsSIP_C.causes.SIP_FAILURE_CODE);\n          }\n          break;\n        default:\n          cause = Utils.sipErrorCause(response.status_code);\n          this.registrationFailure(response, cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      this.registrationFailure(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      this.registrationFailure(null, JsSIP_C.causes.CONNECTION_ERROR);\n    };\n\n    request_sender.send();\n  },\n\n  unregister: function(options) {\n    var extraHeaders;\n\n    if(!this.registered) {\n      debug('already unregistered');\n      return;\n    }\n\n    options = options || {};\n\n    this.registered = false;\n\n    // Clear the registration timer.\n    if (this.registrationTimer !== null) {\n      clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    extraHeaders = this.extraHeaders.slice();\n\n    if(options.all) {\n      extraHeaders.push('Contact: *' + this.extraContactParams);\n      extraHeaders.push('Expires: 0');\n\n      this.request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this.registrar, this.ua, {\n          'to_uri': this.to_uri,\n          'call_id': this.call_id,\n          'cseq': (this.cseq += 1)\n        }, extraHeaders);\n    } else {\n      extraHeaders.push('Contact: '+ this.contact + ';expires=0' + this.extraContactParams);\n      extraHeaders.push('Expires: 0');\n\n      this.request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this.registrar, this.ua, {\n          'to_uri': this.to_uri,\n          'call_id': this.call_id,\n          'cseq': (this.cseq += 1)\n        }, extraHeaders);\n    }\n\n    var request_sender = new RequestSender(this, this.ua);\n\n    this.receiveResponse = function(response) {\n      var cause;\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          // Ignore provisional responses.\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.unregistered(response);\n          break;\n        default:\n          cause = Utils.sipErrorCause(response.status_code);\n          this.unregistered(response, cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      this.unregistered(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      this.unregistered(null, JsSIP_C.causes.CONNECTION_ERROR);\n    };\n\n    request_sender.send();\n  },\n\n  registrationFailure: function(response, cause) {\n    this.ua.registrationFailed({\n      response: response || null,\n      cause: cause\n    });\n\n    if (this.registered) {\n      this.registered = false;\n      this.ua.unregistered({\n        response: response || null,\n        cause: cause\n      });\n    }\n  },\n\n  unregistered: function(response, cause) {\n    this.registered = false;\n    this.ua.unregistered({\n      response: response || null,\n      cause: cause || null\n    });\n  },\n\n  onTransportClosed: function() {\n    if (this.registrationTimer !== null) {\n      clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if(this.registered) {\n      this.registered = false;\n      this.ua.unregistered({});\n    }\n  },\n\n  close: function() {\n    if (this.registered) {\n      this.unregister();\n    }\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/SIPMessage.js":"module.exports = {\n  OutgoingRequest: OutgoingRequest,\n  IncomingRequest: IncomingRequest,\n  IncomingResponse: IncomingResponse\n};\n\n\n/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP:SIPMessage');\nvar sdp_transform = require('sdp-transform');\nvar JsSIP_C = require('./Constants');\nvar Utils = require('./Utils');\nvar NameAddrHeader = require('./NameAddrHeader');\nvar Grammar = require('./Grammar');\n\n\n/**\n * -param {String} method request method\n * -param {String} ruri request uri\n * -param {UA} ua\n * -param {Object} params parameters that will have priority over ua.configuration parameters:\n * <br>\n *  - cseq, call_id, from_tag, from_uri, from_display_name, to_uri, to_tag, route_set\n * -param {Object} [headers] extra headers\n * -param {String} [body]\n */\nfunction OutgoingRequest(method, ruri, ua, params, extraHeaders, body) {\n  var\n    to,\n    from,\n    call_id,\n    cseq;\n\n  params = params || {};\n\n  // Mandatory parameters check\n  if(!method || !ruri || !ua) {\n    return null;\n  }\n\n  this.ua = ua;\n  this.headers = {};\n  this.method = method;\n  this.ruri = ruri;\n  this.body = body;\n  this.extraHeaders = extraHeaders && extraHeaders.slice() || [];\n\n  // Fill the Common SIP Request Headers\n\n  // Route\n  if (params.route_set) {\n    this.setHeader('route', params.route_set);\n  } else if (ua.configuration.use_preloaded_route) {\n    this.setHeader('route', '<' + ua.transport.sip_uri + ';lr>');\n  }\n\n  // Via\n  // Empty Via header. Will be filled by the client transaction.\n  this.setHeader('via', '');\n\n  // Max-Forwards\n  this.setHeader('max-forwards', JsSIP_C.MAX_FORWARDS);\n\n  // To\n  to = (params.to_display_name || params.to_display_name === 0) ? '\"' + params.to_display_name + '\" ' : '';\n  to += '<' + (params.to_uri || ruri) + '>';\n  to += params.to_tag ? ';tag=' + params.to_tag : '';\n  this.to = new NameAddrHeader.parse(to);\n  this.setHeader('to', to);\n\n  // From\n  if (params.from_display_name || params.from_display_name === 0) {\n    from = '\"' + params.from_display_name + '\" ';\n  } else if (ua.configuration.display_name) {\n    from = '\"' + ua.configuration.display_name + '\" ';\n  } else {\n    from = '';\n  }\n  from += '<' + (params.from_uri || ua.configuration.uri) + '>;tag=';\n  from += params.from_tag || Utils.newTag();\n  this.from = new NameAddrHeader.parse(from);\n  this.setHeader('from', from);\n\n  // Call-ID\n  call_id = params.call_id || (ua.configuration.jssip_id + Utils.createRandomToken(15));\n  this.call_id = call_id;\n  this.setHeader('call-id', call_id);\n\n  // CSeq\n  cseq = params.cseq || Math.floor(Math.random() * 10000);\n  this.cseq = cseq;\n  this.setHeader('cseq', cseq + ' ' + method);\n}\n\nOutgoingRequest.prototype = {\n  /**\n   * Replace the the given header by the given value.\n   * -param {String} name header name\n   * -param {String | Array} value header value\n   */\n  setHeader: function(name, value) {\n    var regexp, idx;\n\n    // Remove the header from extraHeaders if present.\n    regexp = new RegExp('^\\\\s*'+ name +'\\\\s*:','i');\n    for (idx=0; idx<this.extraHeaders.length; idx++) {\n      if (regexp.test(this.extraHeaders[idx])) {\n        this.extraHeaders.splice(idx, 1);\n      }\n    }\n\n    this.headers[Utils.headerize(name)] = (Array.isArray(value)) ? value : [value];\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * -param {String} name header name\n   * -returns {String|undefined} Returns the specified header, null if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length,\n      header = this.headers[Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0];\n      }\n    } else {\n      regexp = new RegExp('^\\\\s*'+ name +'\\\\s*:','i');\n      for (idx=0; idx<length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          return header.substring(header.indexOf(':')+1).trim();\n        }\n      }\n    }\n\n    return;\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * -param {String} name header name\n   * -returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length, regexp,\n      header = this.headers[Utils.headerize(name)],\n      result = [];\n\n    if (header) {\n      length = header.length;\n      for (idx = 0; idx < length; idx++) {\n        result.push(header[idx]);\n      }\n      return result;\n    } else {\n      length = this.extraHeaders.length;\n      regexp = new RegExp('^\\\\s*'+ name +'\\\\s*:','i');\n      for (idx=0; idx<length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          result.push(header.substring(header.indexOf(':')+1).trim());\n        }\n      }\n      return result;\n    }\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * -param {String} name header name\n   * -returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length;\n\n    if (this.headers[Utils.headerize(name)]) {\n      return true;\n    } else {\n      regexp = new RegExp('^\\\\s*'+ name +'\\\\s*:','i');\n      for (idx=0; idx<length; idx++) {\n        if (regexp.test(this.extraHeaders[idx])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Parse the current body as a SDP and store the resulting object\n   * into this.sdp.\n   * -param {Boolean} force: Parse even if this.sdp already exists.\n   *\n   * Returns this.sdp.\n   */\n  parseSDP: function(force) {\n    if (!force && this.sdp) {\n      return this.sdp;\n    } else {\n      this.sdp = sdp_transform.parse(this.body || '');\n      return this.sdp;\n    }\n  },\n\n  toString: function() {\n    var msg = '', header, length, idx,\n      supported = [];\n\n    msg += this.method + ' ' + this.ruri + ' SIP/2.0\\r\\n';\n\n    for (header in this.headers) {\n      length = this.headers[header].length;\n      for (idx = 0; idx < length; idx++) {\n        msg += header + ': ' + this.headers[header][idx] + '\\r\\n';\n      }\n    }\n\n    length = this.extraHeaders.length;\n    for (idx = 0; idx < length; idx++) {\n      msg += this.extraHeaders[idx].trim() +'\\r\\n';\n    }\n\n    // Supported\n    switch (this.method) {\n      case JsSIP_C.REGISTER:\n        supported.push('path', 'gruu');\n        break;\n      case JsSIP_C.INVITE:\n        if (this.ua.configuration.session_timers) {\n          supported.push('timer');\n        }\n        if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {\n          supported.push('gruu');\n        }\n        supported.push('ice','replaces');\n        break;\n      case JsSIP_C.UPDATE:\n        if (this.ua.configuration.session_timers) {\n          supported.push('timer');\n        }\n        supported.push('ice');\n        break;\n    }\n\n    supported.push('outbound');\n\n    // Allow\n    msg += 'Allow: '+ JsSIP_C.ALLOWED_METHODS +'\\r\\n';\n    msg += 'Supported: ' +  supported +'\\r\\n';\n    msg += 'User-Agent: ' + JsSIP_C.USER_AGENT +'\\r\\n';\n\n    if (this.body) {\n      length = Utils.str_utf8_length(this.body);\n      msg += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n      msg += this.body;\n    } else {\n      msg += 'Content-Length: 0\\r\\n\\r\\n';\n    }\n\n    return msg;\n  },\n\n  clone: function() {\n    var request = new OutgoingRequest(this.method, this.ruri, this.ua);\n\n    Object.keys(this.headers).forEach(function(name) {\n      request.headers[name] = this.headers[name].slice();\n    }, this);\n\n    request.body = this.body;\n    request.extraHeaders = this.extraHeaders && this.extraHeaders.slice() || [];\n\n    request.to = this.to;\n    request.from = this.from;\n    request.call_id = this.call_id;\n    request.cseq = this.cseq;\n\n    return request;\n  }\n};\n\n\nfunction IncomingMessage(){\n  this.data = null;\n  this.headers = null;\n  this.method =  null;\n  this.via = null;\n  this.via_branch = null;\n  this.call_id = null;\n  this.cseq = null;\n  this.from = null;\n  this.from_tag = null;\n  this.to = null;\n  this.to_tag = null;\n  this.body = null;\n  this.sdp = null;\n}\n\nIncomingMessage.prototype = {\n  /**\n  * Insert a header of the given name and value into the last position of the\n  * header array.\n  */\n  addHeader: function(name, value) {\n    var header = { raw: value };\n\n    name = Utils.headerize(name);\n\n    if(this.headers[name]) {\n      this.headers[name].push(header);\n    } else {\n      this.headers[name] = [header];\n    }\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   */\n  getHeader: function(name) {\n    var header = this.headers[Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0].raw;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n   * Get the header/s of the given name.\n   */\n  getHeaders: function(name) {\n    var idx, length,\n      header = this.headers[Utils.headerize(name)],\n      result = [];\n\n    if(!header) {\n      return [];\n    }\n\n    length = header.length;\n    for (idx = 0; idx < length; idx++) {\n      result.push(header[idx].raw);\n    }\n\n    return result;\n  },\n\n  /**\n   * Verify the existence of the given header.\n   */\n  hasHeader: function(name) {\n    return(this.headers[Utils.headerize(name)]) ? true : false;\n  },\n\n  /**\n  * Parse the given header on the given index.\n  * -param {String} name header name\n  * -param {Number} [idx=0] header index\n  * -returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n  */\n  parseHeader: function(name, idx) {\n    var header, value, parsed;\n\n    name = Utils.headerize(name);\n\n    idx = idx || 0;\n\n    if(!this.headers[name]) {\n      debug('header \"' + name + '\" not present');\n      return;\n    } else if(idx >= this.headers[name].length) {\n      debug('not so many \"' + name + '\" headers present');\n      return;\n    }\n\n    header = this.headers[name][idx];\n    value = header.raw;\n\n    if(header.parsed) {\n      return header.parsed;\n    }\n\n    //substitute '-' by '_' for grammar rule matching.\n    parsed = Grammar.parse(value, name.replace(/-/g, '_'));\n\n    if(parsed === -1) {\n      this.headers[name].splice(idx, 1); //delete from headers\n      debug('error parsing \"' + name + '\" header field with value \"' + value + '\"');\n      return;\n    } else {\n      header.parsed = parsed;\n      return parsed;\n    }\n  },\n\n  /**\n   * Message Header attribute selector. Alias of parseHeader.\n   * -param {String} name header name\n   * -param {Number} [idx=0] header index\n   * -returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n   *\n   * -example\n   * message.s('via',3).port\n   */\n  s: function(name, idx) {\n    return this.parseHeader(name, idx);\n  },\n\n  /**\n  * Replace the value of the given header by the value.\n  * -param {String} name header name\n  * -param {String} value header value\n  */\n  setHeader: function(name, value) {\n    var header = { raw: value };\n    this.headers[Utils.headerize(name)] = [header];\n  },\n\n  /**\n   * Parse the current body as a SDP and store the resulting object\n   * into this.sdp.\n   * -param {Boolean} force: Parse even if this.sdp already exists.\n   *\n   * Returns this.sdp.\n   */\n  parseSDP: function(force) {\n    if (!force && this.sdp) {\n      return this.sdp;\n    } else {\n      this.sdp = sdp_transform.parse(this.body || '');\n      return this.sdp;\n    }\n  },\n\n  toString: function() {\n    return this.data;\n  }\n};\n\n\nfunction IncomingRequest(ua) {\n  this.ua = ua;\n  this.headers = {};\n  this.ruri = null;\n  this.transport = null;\n  this.server_transaction = null;\n}\n\nIncomingRequest.prototype = new IncomingMessage();\n\n/**\n* Stateful reply.\n* -param {Number} code status code\n* -param {String} reason reason phrase\n* -param {Object} headers extra headers\n* -param {String} body body\n* -param {Function} [onSuccess] onSuccess callback\n* -param {Function} [onFailure] onFailure callback\n*/\nIncomingRequest.prototype.reply = function(code, reason, extraHeaders, body, onSuccess, onFailure) {\n  var rr, vias, length, idx, response,\n    supported = [],\n    to = this.getHeader('To'),\n    r = 0,\n    v = 0;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n  extraHeaders = extraHeaders && extraHeaders.slice() || [];\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  if(this.method === JsSIP_C.INVITE && code > 100 && code <= 200) {\n    rr = this.getHeaders('record-route');\n    length = rr.length;\n\n    for(r; r < length; r++) {\n      response += 'Record-Route: ' + rr[r] + '\\r\\n';\n    }\n  }\n\n  vias = this.getHeaders('via');\n  length = vias.length;\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n\n  length = extraHeaders.length;\n  for (idx = 0; idx < length; idx++) {\n    response += extraHeaders[idx].trim() +'\\r\\n';\n  }\n\n  // Supported\n  switch (this.method) {\n    case JsSIP_C.INVITE:\n      if (this.ua.configuration.session_timers) {\n        supported.push('timer');\n      }\n      if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {\n        supported.push('gruu');\n      }\n      supported.push('ice','replaces');\n      break;\n    case JsSIP_C.UPDATE:\n      if (this.ua.configuration.session_timers) {\n        supported.push('timer');\n      }\n      if (body) {\n        supported.push('ice');\n      }\n      supported.push('replaces');\n  }\n\n  supported.push('outbound');\n\n  // Allow and Accept\n  if (this.method === JsSIP_C.OPTIONS) {\n    response += 'Allow: '+ JsSIP_C.ALLOWED_METHODS +'\\r\\n';\n    response += 'Accept: '+ JsSIP_C.ACCEPTED_BODY_TYPES +'\\r\\n';\n  } else if (code === 405) {\n    response += 'Allow: '+ JsSIP_C.ALLOWED_METHODS +'\\r\\n';\n  } else if (code === 415 ) {\n    response += 'Accept: '+ JsSIP_C.ACCEPTED_BODY_TYPES +'\\r\\n';\n  }\n\n  response += 'Supported: ' +  supported +'\\r\\n';\n\n  if(body) {\n    length = Utils.str_utf8_length(body);\n    response += 'Content-Type: application/sdp\\r\\n';\n    response += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n    response += body;\n  } else {\n    response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n  }\n\n  this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);\n};\n\n/**\n* Stateless reply.\n* -param {Number} code status code\n* -param {String} reason reason phrase\n*/\nIncomingRequest.prototype.reply_sl = function(code, reason) {\n  var to, response,\n    v = 0,\n    vias = this.getHeaders('via'),\n    length = vias.length;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  to = this.getHeader('To');\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n  response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n\n  this.transport.send(response);\n};\n\n\nfunction IncomingResponse() {\n  this.headers = {};\n  this.status_code = null;\n  this.reason_phrase = null;\n}\n\nIncomingResponse.prototype = new IncomingMessage();\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/NameAddrHeader.js":"module.exports = NameAddrHeader;\n\n\n/**\n * Dependencies.\n */\nvar URI = require('./URI');\nvar Grammar = require('./Grammar');\n\n\nfunction NameAddrHeader(uri, display_name, parameters) {\n  var param;\n\n  // Checks\n  if(!uri || !(uri instanceof URI)) {\n    throw new TypeError('missing or invalid \"uri\" parameter');\n  }\n\n  // Initialize parameters\n  this.uri = uri;\n  this.parameters = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  Object.defineProperties(this, {\n    display_name: {\n      get: function() { return display_name; },\n      set: function(value) {\n        display_name = (value === 0) ? '0' : value;\n      }\n    }\n  });\n}\n\nNameAddrHeader.prototype = {\n  setParam: function(key, value) {\n    if (key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();\n    }\n  },\n\n  getParam: function(key) {\n    if(key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  },\n\n  hasParam: function(key) {\n    if(key) {\n      return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;\n    }\n  },\n\n  deleteParam: function(parameter) {\n    var value;\n    parameter = parameter.toLowerCase();\n    if (this.parameters.hasOwnProperty(parameter)) {\n      value = this.parameters[parameter];\n      delete this.parameters[parameter];\n      return value;\n    }\n  },\n\n  clearParams: function() {\n    this.parameters = {};\n  },\n\n  clone: function() {\n    return new NameAddrHeader(\n      this.uri.clone(),\n      this.display_name,\n      JSON.parse(JSON.stringify(this.parameters)));\n  },\n\n  toString: function() {\n    var body, parameter;\n\n    body  = (this.display_name || this.display_name === 0) ? '\"' + this.display_name + '\" ' : '';\n    body += '<' + this.uri.toString() + '>';\n\n    for (parameter in this.parameters) {\n      body += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        body += '='+ this.parameters[parameter];\n      }\n    }\n\n    return body;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a NameAddrHeader instance or undefined if\n  * it is an invalid NameAddrHeader.\n  */\nNameAddrHeader.parse = function(name_addr_header) {\n  name_addr_header = Grammar.parse(name_addr_header,'Name_Addr_Header');\n\n  if (name_addr_header !== -1) {\n    return name_addr_header;\n  } else {\n    return undefined;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/RequestSender.js":"module.exports = RequestSender;\n\n\n/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP:RequestSender');\nvar JsSIP_C = require('./Constants');\nvar UA = require('./UA');\nvar DigestAuthentication = require('./DigestAuthentication');\nvar Transactions = require('./Transactions');\n\n\nfunction RequestSender(applicant, ua) {\n  this.ua = ua;\n  this.applicant = applicant;\n  this.method = applicant.request.method;\n  this.request = applicant.request;\n  this.auth = null;\n  this.challenged = false;\n  this.staled = false;\n\n  // If ua is in closing process or even closed just allow sending Bye and ACK\n  if (ua.status === UA.C.STATUS_USER_CLOSED && (this.method !== JsSIP_C.BYE || this.method !== JsSIP_C.ACK)) {\n    this.onTransportError();\n  }\n}\n\n\n/**\n* Create the client transaction and send the message.\n*/\nRequestSender.prototype = {\n  send: function() {\n    switch(this.method) {\n      case 'INVITE':\n        this.clientTransaction = new Transactions.InviteClientTransaction(this, this.request, this.ua.transport);\n        break;\n      case 'ACK':\n        this.clientTransaction = new Transactions.AckClientTransaction(this, this.request, this.ua.transport);\n        break;\n      default:\n        this.clientTransaction = new Transactions.NonInviteClientTransaction(this, this.request, this.ua.transport);\n    }\n\n    this.clientTransaction.send();\n  },\n\n  /**\n  * Callback fired when receiving a request timeout error from the client transaction.\n  * To be re-defined by the applicant.\n  */\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  /**\n  * Callback fired when receiving a transport error from the client transaction.\n  * To be re-defined by the applicant.\n  */\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  /**\n  * Called from client transaction when receiving a correct response to the request.\n  * Authenticate request if needed or pass the response back to the applicant.\n  */\n  receiveResponse: function(response) {\n    var\n      cseq, challenge, authorization_header_name,\n      status_code = response.status_code;\n\n    /*\n    * Authentication\n    * Authenticate once. _challenged_ flag used to avoid infinite authentications.\n    */\n    if ((status_code === 401 || status_code === 407) &&\n        (this.ua.configuration.password !== null || this.ua.configuration.ha1 !== null)) {\n\n      // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\n      if (response.status_code === 401) {\n        challenge = response.parseHeader('www-authenticate');\n        authorization_header_name = 'authorization';\n      } else {\n        challenge = response.parseHeader('proxy-authenticate');\n        authorization_header_name = 'proxy-authorization';\n      }\n\n      // Verify it seems a valid challenge.\n      if (!challenge) {\n        debug(response.status_code + ' with wrong or missing challenge, cannot authenticate');\n        this.applicant.receiveResponse(response);\n        return;\n      }\n\n      if (!this.challenged || (!this.staled && challenge.stale === true)) {\n        if (!this.auth) {\n          this.auth = new DigestAuthentication({\n            username : this.ua.configuration.authorization_user,\n            password : this.ua.configuration.password,\n            realm    : this.ua.configuration.realm,\n            ha1      : this.ua.configuration.ha1\n          });\n        }\n\n        // Verify that the challenge is really valid.\n        if (!this.auth.authenticate(this.request, challenge)) {\n          this.applicant.receiveResponse(response);\n          return;\n        }\n        this.challenged = true;\n\n        // Update ha1 and realm in the UA.\n        this.ua.set('realm', this.auth.get('realm'));\n        this.ua.set('ha1', this.auth.get('ha1'));\n\n        if (challenge.stale) {\n          this.staled = true;\n        }\n\n        if (response.method === JsSIP_C.REGISTER) {\n          cseq = this.applicant.cseq += 1;\n        } else if (this.request.dialog) {\n          cseq = this.request.dialog.local_seqnum += 1;\n        } else {\n          cseq = this.request.cseq + 1;\n        }\n\n        this.request = this.applicant.request = this.request.clone();\n\n        this.request.cseq = cseq;\n        this.request.setHeader('cseq', cseq +' '+ this.method);\n\n        this.request.setHeader(authorization_header_name, this.auth.toString());\n        this.send();\n      } else {\n        this.applicant.receiveResponse(response);\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/DigestAuthentication.js":"module.exports = DigestAuthentication;\n\n\n/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP:DigestAuthentication');\nvar debugerror = require('debug')('JsSIP:ERROR:DigestAuthentication');\ndebugerror.log = console.warn.bind(console);\nvar Utils = require('./Utils');\n\n\nfunction DigestAuthentication(credentials) {\n  this.credentials = credentials;\n  this.cnonce = null;\n  this.nc = 0;\n  this.ncHex = '00000000';\n  this.algorithm = null;\n  this.realm = null;\n  this.nonce = null;\n  this.opaque = null;\n  this.stale = null;\n  this.qop = null;\n  this.method = null;\n  this.uri = null;\n  this.ha1 = null;\n  this.response = null;\n}\n\n\nDigestAuthentication.prototype.get = function(parameter) {\n  switch (parameter) {\n    case 'realm':\n      return this.realm;\n\n    case 'ha1':\n      return this.ha1;\n\n    default:\n      debugerror('get() | cannot get \"%s\" parameter', parameter);\n      return undefined;\n  }\n};\n\n\n/**\n* Performs Digest authentication given a SIP request and the challenge\n* received in a response to that request.\n* Returns true if auth was successfully generated, false otherwise.\n*/\nDigestAuthentication.prototype.authenticate = function(request, challenge) {\n  var ha2, hex;\n\n  this.algorithm = challenge.algorithm;\n  this.realm = challenge.realm;\n  this.nonce = challenge.nonce;\n  this.opaque = challenge.opaque;\n  this.stale = challenge.stale;\n\n  if (this.algorithm) {\n    if (this.algorithm !== 'MD5') {\n      debugerror('authenticate() | challenge with Digest algorithm different than \"MD5\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.algorithm = 'MD5';\n  }\n\n  if (!this.nonce) {\n    debugerror('authenticate() | challenge without Digest nonce, authentication aborted');\n    return false;\n  }\n\n  if (!this.realm) {\n    debugerror('authenticate() | challenge without Digest realm, authentication aborted');\n    return false;\n  }\n\n  // If no plain SIP password is provided.\n  if (!this.credentials.password) {\n    // If ha1 is not provided we cannot authenticate.\n    if (!this.credentials.ha1) {\n      debugerror('authenticate() | no plain SIP password nor ha1 provided, authentication aborted');\n      return false;\n    }\n\n    // If the realm does not match the stored realm we cannot authenticate.\n    if (this.credentials.realm !== this.realm) {\n      debugerror('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:\"%s\", given:\"%s\"]', this.credentials.realm, this.realm);\n      return false;\n    }\n  }\n\n  // 'qop' can contain a list of values (Array). Let's choose just one.\n  if (challenge.qop) {\n    if (challenge.qop.indexOf('auth') > -1) {\n      this.qop = 'auth';\n    } else if (challenge.qop.indexOf('auth-int') > -1) {\n      this.qop = 'auth-int';\n    } else {\n      // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n      debugerror('authenticate() | challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.qop = null;\n  }\n\n  // Fill other attributes.\n\n  this.method = request.method;\n  this.uri = request.ruri;\n  this.cnonce = Utils.createRandomToken(12);\n  this.nc += 1;\n  hex = Number(this.nc).toString(16);\n  this.ncHex = '00000000'.substr(0, 8-hex.length) + hex;\n\n  // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n  if (this.nc === 4294967296) {\n    this.nc = 1;\n    this.ncHex = '00000001';\n  }\n\n  // Calculate the Digest \"response\" value.\n\n  // If we have plain SIP password then regenerate ha1.\n  if (this.credentials.password) {\n    // HA1 = MD5(A1) = MD5(username:realm:password)\n    this.ha1 = Utils.calculateMD5(this.credentials.username + ':' + this.realm + ':' + this.credentials.password);\n    //\n  // Otherwise reuse the stored ha1.\n  } else {\n    this.ha1 = this.credentials.ha1;\n  }\n\n  if (this.qop === 'auth') {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + ':' + this.uri);\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(this.ha1 + ':' + this.nonce + ':' + this.ncHex + ':' + this.cnonce + ':auth:' + ha2);\n\n  } else if (this.qop === 'auth-int') {\n    // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n    ha2 = Utils.calculateMD5(this.method + ':' + this.uri + ':' + Utils.calculateMD5(this.body ? this.body : ''));\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(this.ha1 + ':' + this.nonce + ':' + this.ncHex + ':' + this.cnonce + ':auth-int:' + ha2);\n\n  } else if (this.qop === null) {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + ':' + this.uri);\n    // response = MD5(HA1:nonce:HA2)\n    this.response = Utils.calculateMD5(this.ha1 + ':' + this.nonce + ':' + ha2);\n  }\n\n  debug('authenticate() | response generated');\n\n  return true;\n};\n\n\n/**\n* Return the Proxy-Authorization or WWW-Authorization header value.\n*/\nDigestAuthentication.prototype.toString = function() {\n  var auth_params = [];\n\n  if (!this.response) {\n    throw new Error('response field does not exist, cannot generate Authorization header');\n  }\n\n  auth_params.push('algorithm=' + this.algorithm);\n  auth_params.push('username=\"' + this.credentials.username + '\"');\n  auth_params.push('realm=\"' + this.realm + '\"');\n  auth_params.push('nonce=\"' + this.nonce + '\"');\n  auth_params.push('uri=\"' + this.uri + '\"');\n  auth_params.push('response=\"' + this.response + '\"');\n  if (this.opaque) {\n    auth_params.push('opaque=\"' + this.opaque + '\"');\n  }\n  if (this.qop) {\n    auth_params.push('qop=' + this.qop);\n    auth_params.push('cnonce=\"' + this.cnonce + '\"');\n    auth_params.push('nc=' + this.ncHex);\n  }\n\n  return 'Digest ' + auth_params.join(', ');\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Transactions.js":"module.exports = {\n  C: null,\n  NonInviteClientTransaction: NonInviteClientTransaction,\n  InviteClientTransaction: InviteClientTransaction,\n  AckClientTransaction: AckClientTransaction,\n  NonInviteServerTransaction: NonInviteServerTransaction,\n  InviteServerTransaction: InviteServerTransaction,\n  checkTransaction: checkTransaction\n};\n\n\nvar C = {\n  // Transaction states\n  STATUS_TRYING:     1,\n  STATUS_PROCEEDING: 2,\n  STATUS_CALLING:    3,\n  STATUS_ACCEPTED:   4,\n  STATUS_COMPLETED:  5,\n  STATUS_TERMINATED: 6,\n  STATUS_CONFIRMED:  7,\n\n  // Transaction types\n  NON_INVITE_CLIENT: 'nict',\n  NON_INVITE_SERVER: 'nist',\n  INVITE_CLIENT: 'ict',\n  INVITE_SERVER: 'ist'\n};\n\n/**\n * Expose C object.\n */\nmodule.exports.C = C;\n\n\n/**\n * Dependencies.\n */\nvar util = require('util');\nvar events = require('events');\nvar debugnict = require('debug')('JsSIP:NonInviteClientTransaction');\nvar debugict = require('debug')('JsSIP:InviteClientTransaction');\nvar debugact = require('debug')('JsSIP:AckClientTransaction');\nvar debugnist = require('debug')('JsSIP:NonInviteServerTransaction');\nvar debugist = require('debug')('JsSIP:InviteServerTransaction');\nvar JsSIP_C = require('./Constants');\nvar Timers = require('./Timers');\n\n\nfunction NonInviteClientTransaction(request_sender, request, transport) {\n  var via;\n\n  this.type = C.NON_INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  via = 'SIP/2.0/' + transport.via_transport;\n  via += ' ' + request_sender.ua.configuration.via_host + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(NonInviteClientTransaction, events.EventEmitter);\n\nNonInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n\n  this.stateChanged(C.STATUS_TRYING);\n  this.F = setTimeout(function() {tr.timer_F();}, Timers.TIMER_F);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nNonInviteClientTransaction.prototype.onTransportError = function() {\n  debugnict('transport error occurred, deleting transaction ' + this.id);\n  clearTimeout(this.F);\n  clearTimeout(this.K);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onTransportError();\n};\n\nNonInviteClientTransaction.prototype.timer_F = function() {\n  debugnict('Timer F expired for transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onRequestTimeout();\n};\n\nNonInviteClientTransaction.prototype.timer_K = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nNonInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n    tr = this,\n    status_code = response.status_code;\n\n  if(status_code < 200) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        clearTimeout(this.F);\n\n        if(status_code === 408) {\n          this.request_sender.onRequestTimeout();\n        } else {\n          this.request_sender.receiveResponse(response);\n        }\n\n        this.K = setTimeout(function() {tr.timer_K();}, Timers.TIMER_K);\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n\nfunction InviteClientTransaction(request_sender, request, transport) {\n  var via,\n    tr = this;\n\n  this.type = C.INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  via = 'SIP/2.0/' + transport.via_transport;\n  via += ' ' + request_sender.ua.configuration.via_host + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  // TODO: Adding here the cancel() method is a hack that must be fixed.\n  // Add the cancel property to the request.\n  //Will be called from the request instance, not the transaction itself.\n  this.request.cancel = function(reason) {\n    tr.cancel_request(tr, reason);\n  };\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(InviteClientTransaction, events.EventEmitter);\n\nInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n  this.stateChanged(C.STATUS_CALLING);\n  this.B = setTimeout(function() {\n    tr.timer_B();\n  }, Timers.TIMER_B);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nInviteClientTransaction.prototype.onTransportError = function() {\n  clearTimeout(this.B);\n  clearTimeout(this.D);\n  clearTimeout(this.M);\n\n  if (this.state !== C.STATUS_ACCEPTED) {\n    debugict('transport error occurred, deleting transaction ' + this.id);\n    this.request_sender.onTransportError();\n  }\n\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\n// RFC 6026 7.2\nInviteClientTransaction.prototype.timer_M = function() {\n  debugict('Timer M expired for transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    clearTimeout(this.B);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n  }\n};\n\n// RFC 3261 17.1.1\nInviteClientTransaction.prototype.timer_B = function() {\n  debugict('Timer B expired for transaction ' + this.id);\n  if(this.state === C.STATUS_CALLING) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n    this.request_sender.onRequestTimeout();\n  }\n};\n\nInviteClientTransaction.prototype.timer_D = function() {\n  debugict('Timer D expired for transaction ' + this.id);\n  clearTimeout(this.B);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nInviteClientTransaction.prototype.sendACK = function(response) {\n  var tr = this;\n\n  this.ack = 'ACK ' + this.request.ruri + ' SIP/2.0\\r\\n';\n  this.ack += 'Via: ' + this.request.headers.Via.toString() + '\\r\\n';\n\n  if(this.request.headers.Route) {\n    this.ack += 'Route: ' + this.request.headers.Route.toString() + '\\r\\n';\n  }\n\n  this.ack += 'To: ' + response.getHeader('to') + '\\r\\n';\n  this.ack += 'From: ' + this.request.headers.From.toString() + '\\r\\n';\n  this.ack += 'Call-ID: ' + this.request.headers['Call-ID'].toString() + '\\r\\n';\n  this.ack += 'CSeq: ' + this.request.headers.CSeq.toString().split(' ')[0];\n  this.ack += ' ACK\\r\\n';\n  this.ack += 'Content-Length: 0\\r\\n\\r\\n';\n\n  this.D = setTimeout(function() {tr.timer_D();}, Timers.TIMER_D);\n\n  this.transport.send(this.ack);\n};\n\nInviteClientTransaction.prototype.cancel_request = function(tr, reason) {\n  var request = tr.request;\n\n  this.cancel = JsSIP_C.CANCEL + ' ' + request.ruri + ' SIP/2.0\\r\\n';\n  this.cancel += 'Via: ' + request.headers.Via.toString() + '\\r\\n';\n\n  if(this.request.headers.Route) {\n    this.cancel += 'Route: ' + request.headers.Route.toString() + '\\r\\n';\n  }\n\n  this.cancel += 'To: ' + request.headers.To.toString() + '\\r\\n';\n  this.cancel += 'From: ' + request.headers.From.toString() + '\\r\\n';\n  this.cancel += 'Call-ID: ' + request.headers['Call-ID'].toString() + '\\r\\n';\n  this.cancel += 'CSeq: ' + request.headers.CSeq.toString().split(' ')[0] +\n  ' CANCEL\\r\\n';\n\n  if(reason) {\n    this.cancel += 'Reason: ' + reason + '\\r\\n';\n  }\n\n  this.cancel += 'Content-Length: 0\\r\\n\\r\\n';\n\n  // Send only if a provisional response (>100) has been received.\n  if(this.state === C.STATUS_PROCEEDING) {\n    this.transport.send(this.cancel);\n  }\n};\n\nInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n  tr = this,\n  status_code = response.status_code;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_PROCEEDING:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.M = setTimeout(function() {\n          tr.timer_M();\n        }, Timers.TIMER_M);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_ACCEPTED:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.sendACK(response);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_COMPLETED:\n        this.sendACK(response);\n        break;\n    }\n  }\n};\n\n\nfunction AckClientTransaction(request_sender, request, transport) {\n  var via;\n\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  via = 'SIP/2.0/' + transport.via_transport;\n  via += ' ' + request_sender.ua.configuration.via_host + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(AckClientTransaction, events.EventEmitter);\n\nAckClientTransaction.prototype.send = function() {\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nAckClientTransaction.prototype.onTransportError = function() {\n  debugact('transport error occurred for transaction ' + this.id);\n  this.request_sender.onTransportError();\n};\n\n\nfunction NonInviteServerTransaction(request, ua) {\n  this.type = C.NON_INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.state = C.STATUS_TRYING;\n\n  ua.newTransaction(this);\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(NonInviteServerTransaction, events.EventEmitter);\n\nNonInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteServerTransaction.prototype.timer_J = function() {\n  debugnist('Timer J expired for transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nNonInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    debugnist('transport error occurred, deleting transaction ' + this.id);\n\n    clearTimeout(this.J);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nNonInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code === 100) {\n    /* RFC 4320 4.1\n     * 'A SIP element MUST NOT\n     * send any provisional response with a\n     * Status-Code other than 100 to a non-INVITE request.'\n     */\n    switch(this.state) {\n      case C.STATUS_TRYING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        if(!this.transport.send(response))  {\n          this.onTransportError();\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.last_response = response;\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.last_response = response;\n        this.J = setTimeout(function() {\n          tr.timer_J();\n        }, Timers.TIMER_J);\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n\nfunction InviteServerTransaction(request, ua) {\n  this.type = C.INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.state = C.STATUS_PROCEEDING;\n\n  ua.newTransaction(this);\n\n  this.resendProvisionalTimer = null;\n\n  request.reply(100);\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(InviteServerTransaction, events.EventEmitter);\n\nInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteServerTransaction.prototype.timer_H = function() {\n  debugist('Timer H expired for transaction ' + this.id);\n\n  if(this.state === C.STATUS_COMPLETED) {\n    debugist('ACK not received, dialog will be terminated');\n  }\n\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nInviteServerTransaction.prototype.timer_I = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n};\n\n// RFC 6026 7.1\nInviteServerTransaction.prototype.timer_L = function() {\n  debugist('Timer L expired for transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    debugist('transport error occurred, deleting transaction ' + this.id);\n\n    if (this.resendProvisionalTimer !== null) {\n      clearInterval(this.resendProvisionalTimer);\n      this.resendProvisionalTimer = null;\n    }\n\n    clearTimeout(this.L);\n    clearTimeout(this.H);\n    clearTimeout(this.I);\n\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.resend_provisional = function() {\n  if(!this.transport.send(this.last_response)) {\n    this.onTransportError();\n  }\n};\n\n// INVITE Server Transaction RFC 3261 17.2.1\nInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n        }\n        this.last_response = response;\n        break;\n    }\n  }\n\n  if(status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {\n    // Trigger the resendProvisionalTimer only for the first non 100 provisional response.\n    if(this.resendProvisionalTimer === null) {\n      this.resendProvisionalTimer = setInterval(function() {\n        tr.resend_provisional();}, Timers.PROVISIONAL_RESPONSE_INTERVAL);\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.last_response = response;\n        this.L = setTimeout(function() {\n          tr.timer_L();\n        }, Timers.TIMER_L);\n\n        if (this.resendProvisionalTimer !== null) {\n          clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n        /* falls through */\n        case C.STATUS_ACCEPTED:\n          // Note that this point will be reached for proceeding tr.state also.\n          if(!this.transport.send(response)) {\n            this.onTransportError();\n            if (onFailure) {\n              onFailure();\n            }\n          } else if (onSuccess) {\n            onSuccess();\n          }\n          break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if (this.resendProvisionalTimer !== null) {\n          clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else {\n          this.stateChanged(C.STATUS_COMPLETED);\n          this.H = setTimeout(function() {\n            tr.timer_H();\n          }, Timers.TIMER_H);\n          if (onSuccess) {\n            onSuccess();\n          }\n        }\n        break;\n    }\n  }\n};\n\n/**\n * INVITE:\n *  _true_ if retransmission\n *  _false_ new request\n *\n * ACK:\n *  _true_  ACK to non2xx response\n *  _false_ ACK must be passed to TU (accepted state)\n *          ACK to 2xx response\n *\n * CANCEL:\n *  _true_  no matching invite transaction\n *  _false_ matching invite transaction and no final response sent\n *\n * OTHER:\n *  _true_  retransmission\n *  _false_ new request\n */\nfunction checkTransaction(ua, request) {\n  var tr;\n\n  switch(request.method) {\n    case JsSIP_C.INVITE:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_PROCEEDING:\n            tr.transport.send(tr.last_response);\n            break;\n\n            // RFC 6026 7.1 Invite retransmission\n            //received while in C.STATUS_ACCEPTED state. Absorb it.\n          case C.STATUS_ACCEPTED:\n            break;\n        }\n        return true;\n      }\n      break;\n    case JsSIP_C.ACK:\n      tr = ua.transactions.ist[request.via_branch];\n\n      // RFC 6026 7.1\n      if(tr) {\n        if(tr.state === C.STATUS_ACCEPTED) {\n          return false;\n        } else if(tr.state === C.STATUS_COMPLETED) {\n          tr.state = C.STATUS_CONFIRMED;\n          tr.I = setTimeout(function() {tr.timer_I();}, Timers.TIMER_I);\n          return true;\n        }\n      }\n      // ACK to 2XX Response.\n      else {\n        return false;\n      }\n      break;\n    case JsSIP_C.CANCEL:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        request.reply_sl(200);\n        if(tr.state === C.STATUS_PROCEEDING) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        request.reply_sl(481);\n        return true;\n      }\n      break;\n    default:\n\n      // Non-INVITE Server Transaction RFC 3261 17.2.2\n      tr = ua.transactions.nist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_TRYING:\n            break;\n          case C.STATUS_PROCEEDING:\n          case C.STATUS_COMPLETED:\n            tr.transport.send(tr.last_response);\n            break;\n        }\n        return true;\n      }\n      break;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Timers.js":"var T1 = 500,\n  T2 = 4000,\n  T4 = 5000;\n\n\nvar Timers = {\n  T1: T1,\n  T2: T2,\n  T4: T4,\n  TIMER_B: 64 * T1,\n  TIMER_D: 0  * T1,\n  TIMER_F: 64 * T1,\n  TIMER_H: 64 * T1,\n  TIMER_I: 0  * T1,\n  TIMER_J: 0  * T1,\n  TIMER_K: 0  * T4,\n  TIMER_L: 64 * T1,\n  TIMER_M: 64 * T1,\n  PROVISIONAL_RESPONSE_INTERVAL: 60000  // See RFC 3261 Section 13.3.1.1\n};\n\n\nmodule.exports = Timers;\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/RTCSession.js":"/* globals RTCPeerConnection: false, RTCSessionDescription: false */\n\nmodule.exports = RTCSession;\n\n\nvar C = {\n  // RTCSession states\n  STATUS_NULL:               0,\n  STATUS_INVITE_SENT:        1,\n  STATUS_1XX_RECEIVED:       2,\n  STATUS_INVITE_RECEIVED:    3,\n  STATUS_WAITING_FOR_ANSWER: 4,\n  STATUS_ANSWERED:           5,\n  STATUS_WAITING_FOR_ACK:    6,\n  STATUS_CANCELED:           7,\n  STATUS_TERMINATED:         8,\n  STATUS_CONFIRMED:          9\n};\n\n/**\n * Expose C object.\n */\nRTCSession.C = C;\n\n\n/**\n * Dependencies.\n */\nvar util = require('util');\nvar events = require('events');\nvar debug = require('debug')('JsSIP:RTCSession');\nvar debugerror = require('debug')('JsSIP:ERROR:RTCSession');\ndebugerror.log = console.warn.bind(console);\nvar sdp_transform = require('sdp-transform');\nvar JsSIP_C = require('./Constants');\nvar Exceptions = require('./Exceptions');\nvar Transactions = require('./Transactions');\nvar Utils = require('./Utils');\nvar Timers = require('./Timers');\nvar SIPMessage = require('./SIPMessage');\nvar Dialog = require('./Dialog');\nvar RequestSender = require('./RequestSender');\nvar RTCSession_Request = require('./RTCSession/Request');\nvar RTCSession_DTMF = require('./RTCSession/DTMF');\nvar RTCSession_ReferNotifier = require('./RTCSession/ReferNotifier');\nvar RTCSession_ReferSubscriber = require('./RTCSession/ReferSubscriber');\n\n\n/**\n * Local variables.\n */\nvar holdMediaTypes = ['audio', 'video'];\n\n\nfunction RTCSession(ua) {\n  debug('new');\n\n  this.ua = ua;\n  this.status = C.STATUS_NULL;\n  this.dialog = null;\n  this.earlyDialogs = {};\n  this.connection = null;  // The RTCPeerConnection instance (public attribute).\n\n  // RTCSession confirmation flag\n  this.is_confirmed = false;\n\n  // is late SDP being negotiated\n  this.late_sdp = false;\n\n  // Default rtcOfferConstraints and rtcAnswerConstrainsts (passed in connect() or answer()).\n  this.rtcOfferConstraints = null;\n  this.rtcAnswerConstraints = null;\n\n  // Local MediaStream.\n  this.localMediaStream = null;\n  this.localMediaStreamLocallyGenerated = false;\n\n  // Flag to indicate PeerConnection ready for new actions.\n  this.rtcReady = true;\n\n  // SIP Timers\n  this.timers = {\n    ackTimer: null,\n    expiresTimer: null,\n    invite2xxTimer: null,\n    userNoAnswerTimer: null\n  };\n\n  // Session info\n  this.direction = null;\n  this.local_identity = null;\n  this.remote_identity = null;\n  this.start_time = null;\n  this.end_time = null;\n  this.tones = null;\n\n  // Mute/Hold state\n  this.audioMuted = false;\n  this.videoMuted = false;\n  this.localHold = false;\n  this.remoteHold = false;\n\n  // Session Timers (RFC 4028)\n  this.sessionTimers = {\n    enabled: this.ua.configuration.session_timers,\n    defaultExpires: JsSIP_C.SESSION_EXPIRES,\n    currentExpires: null,\n    running: false,\n    refresher: false,\n    timer: null  // A setTimeout.\n  };\n\n  // Map of ReferSubscriber instances indexed by the REFER's CSeq number\n  this.referSubscribers = {};\n\n  // Custom session empty object for high level use\n  this.data = {};\n\n  // Expose session failed/ended causes as a property of the RTCSession instance\n  this.causes = JsSIP_C.causes;\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(RTCSession, events.EventEmitter);\n\n\n/**\n * User API\n */\n\n\nRTCSession.prototype.isInProgress = function() {\n  switch(this.status) {\n    case C.STATUS_NULL:\n    case C.STATUS_INVITE_SENT:\n    case C.STATUS_1XX_RECEIVED:\n    case C.STATUS_INVITE_RECEIVED:\n    case C.STATUS_WAITING_FOR_ANSWER:\n      return true;\n    default:\n      return false;\n  }\n};\n\n\nRTCSession.prototype.isEstablished = function() {\n  switch(this.status) {\n    case C.STATUS_ANSWERED:\n    case C.STATUS_WAITING_FOR_ACK:\n    case C.STATUS_CONFIRMED:\n      return true;\n    default:\n      return false;\n  }\n};\n\n\nRTCSession.prototype.isEnded = function() {\n  switch(this.status) {\n    case C.STATUS_CANCELED:\n    case C.STATUS_TERMINATED:\n      return true;\n    default:\n      return false;\n  }\n};\n\n\nRTCSession.prototype.isMuted = function() {\n  return {\n    audio: this.audioMuted,\n    video: this.videoMuted\n  };\n};\n\n\nRTCSession.prototype.isOnHold = function() {\n  return {\n    local: this.localHold,\n    remote: this.remoteHold\n  };\n};\n\n\n/**\n * Check if RTCSession is ready for an outgoing re-INVITE or UPDATE with SDP.\n */\n RTCSession.prototype.isReadyToReOffer = function() {\n  if (! this.rtcReady) {\n    debug('isReadyToReOffer() | internal WebRTC status not ready');\n    return false;\n  }\n\n  // No established yet.\n  if (! this.dialog) {\n    debug('isReadyToReOffer() | session not established yet');\n    return false;\n  }\n\n  // Another INVITE transaction is in progress\n  if (this.dialog.uac_pending_reply === true || this.dialog.uas_pending_reply === true) {\n    debug('isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress');\n    return false;\n  }\n\n  return true;\n};\n\n\n\nRTCSession.prototype.connect = function(target, options, initCallback) {\n  debug('connect()');\n\n  options = options || {};\n\n  var event, requestParams,\n    originalTarget = target,\n    eventHandlers = options.eventHandlers || {},\n    extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [],\n    mediaConstraints = options.mediaConstraints || {audio: true, video: true},\n    mediaStream = options.mediaStream || null,\n    pcConfig = options.pcConfig || {iceServers:[]},\n    rtcConstraints = options.rtcConstraints || null,\n    rtcOfferConstraints = options.rtcOfferConstraints || null;\n\n  this.rtcOfferConstraints = rtcOfferConstraints;\n  this.rtcAnswerConstraints = options.rtcAnswerConstraints || null;\n\n  // Session Timers.\n  if (this.sessionTimers.enabled) {\n    if (Utils.isDecimal(options.sessionTimersExpires)) {\n      if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES) {\n        this.sessionTimers.defaultExpires = options.sessionTimersExpires;\n      }\n      else {\n        this.sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;\n      }\n    }\n  }\n\n  this.data = options.data || this.data;\n\n  if (target === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // Check WebRTC support.\n  if (!window.RTCPeerConnection) {\n    throw new Exceptions.NotSupportedError('WebRTC not supported');\n  }\n\n  // Check target validity\n  target = this.ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: '+ originalTarget);\n  }\n\n  // Check Session Status\n  if (this.status !== C.STATUS_NULL) {\n    throw new Exceptions.InvalidStateError(this.status);\n  }\n\n  // Set event handlers\n  for (event in eventHandlers) {\n    this.on(event, eventHandlers[event]);\n  }\n\n  // Session parameter initialization\n  this.from_tag = Utils.newTag();\n\n  // Set anonymous property\n  this.anonymous = options.anonymous || false;\n\n  // OutgoingSession specific parameters\n  this.isCanceled = false;\n\n  requestParams = {from_tag: this.from_tag};\n\n  this.contact = this.ua.contact.toString({\n    anonymous: this.anonymous,\n    outbound: true\n  });\n\n  if (this.anonymous) {\n    requestParams.from_display_name = 'Anonymous';\n    requestParams.from_uri = 'sip:anonymous@anonymous.invalid';\n\n    extraHeaders.push('P-Preferred-Identity: '+ this.ua.configuration.uri.toString());\n    extraHeaders.push('Privacy: id');\n  }\n\n  extraHeaders.push('Contact: '+ this.contact);\n  extraHeaders.push('Content-Type: application/sdp');\n  if (this.sessionTimers.enabled) {\n    extraHeaders.push('Session-Expires: ' + this.sessionTimers.defaultExpires);\n  }\n\n  this.request = new SIPMessage.OutgoingRequest(JsSIP_C.INVITE, target, this.ua, requestParams, extraHeaders);\n\n  this.id = this.request.call_id + this.from_tag;\n\n  // Create a new RTCPeerConnection instance.\n  createRTCConnection.call(this, pcConfig, rtcConstraints);\n\n  // Save the session into the ua sessions collection.\n  this.ua.sessions[this.id] = this;\n\n  // Set internal properties\n  this.direction = 'outgoing';\n  this.local_identity = this.request.from;\n  this.remote_identity = this.request.to;\n\n  // User explicitly provided a newRTCSession callback for this session\n  if (initCallback) {\n    initCallback(this);\n  } else {\n    newRTCSession.call(this, 'local', this.request);\n  }\n\n  sendInitialRequest.call(this, mediaConstraints, rtcOfferConstraints, mediaStream);\n};\n\n\nRTCSession.prototype.init_incoming = function(request, initCallback) {\n  debug('init_incoming()');\n\n  var expires,\n    self = this,\n    contentType = request.getHeader('Content-Type');\n\n  // Check body and content type\n  if (request.body && (contentType !== 'application/sdp')) {\n    request.reply(415);\n    return;\n  }\n\n  // Session parameter initialization\n  this.status = C.STATUS_INVITE_RECEIVED;\n  this.from_tag = request.from_tag;\n  this.id = request.call_id + this.from_tag;\n  this.request = request;\n  this.contact = this.ua.contact.toString();\n\n  // Save the session into the ua sessions collection.\n  this.ua.sessions[this.id] = this;\n\n  // Get the Expires header value if exists\n  if (request.hasHeader('expires')) {\n    expires = request.getHeader('expires') * 1000;\n  }\n\n  /* Set the to_tag before\n   * replying a response code that will create a dialog.\n   */\n  request.to_tag = Utils.newTag();\n\n  // An error on dialog creation will fire 'failed' event\n  if (! createDialog.call(this, request, 'UAS', true)) {\n    request.reply(500, 'Missing Contact header field');\n    return;\n  }\n\n  if (request.body) {\n    this.late_sdp = false;\n  }\n  else {\n    this.late_sdp = true;\n  }\n\n  this.status = C.STATUS_WAITING_FOR_ANSWER;\n\n  // Set userNoAnswerTimer\n  this.timers.userNoAnswerTimer = setTimeout(function() {\n      request.reply(408);\n      failed.call(self, 'local',null, JsSIP_C.causes.NO_ANSWER);\n    }, this.ua.configuration.no_answer_timeout\n  );\n\n  /* Set expiresTimer\n   * RFC3261 13.3.1\n   */\n  if (expires) {\n    this.timers.expiresTimer = setTimeout(function() {\n        if(self.status === C.STATUS_WAITING_FOR_ANSWER) {\n          request.reply(487);\n          failed.call(self, 'system', null, JsSIP_C.causes.EXPIRES);\n        }\n      }, expires\n    );\n  }\n\n  // Set internal properties\n  this.direction = 'incoming';\n  this.local_identity = request.to;\n  this.remote_identity = request.from;\n\n  // A init callback was specifically defined\n  if (initCallback) {\n    initCallback(this);\n\n  // Fire 'newRTCSession' event.\n  } else {\n    newRTCSession.call(this, 'remote', request);\n  }\n\n  // The user may have rejected the call in the 'newRTCSession' event.\n  if (this.status === C.STATUS_TERMINATED) {\n    return;\n  }\n\n  // Reply 180.\n  request.reply(180, null, ['Contact: ' + self.contact]);\n\n  // Fire 'progress' event.\n  // TODO: Document that 'response' field in 'progress' event is null for\n  // incoming calls.\n  progress.call(self, 'local', null);\n};\n\n\n/**\n * Answer the call.\n */\nRTCSession.prototype.answer = function(options) {\n  debug('answer()');\n\n  options = options || {};\n\n  var idx, length, sdp, tracks,\n    peerHasAudioLine = false,\n    peerHasVideoLine = false,\n    peerOffersFullAudio = false,\n    peerOffersFullVideo = false,\n    self = this,\n    request = this.request,\n    extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [],\n    mediaConstraints = options.mediaConstraints || {},\n    mediaStream = options.mediaStream || null,\n    pcConfig = options.pcConfig || {iceServers:[]},\n    rtcConstraints = options.rtcConstraints || null,\n    rtcAnswerConstraints = options.rtcAnswerConstraints || null;\n\n  this.rtcAnswerConstraints = rtcAnswerConstraints;\n  this.rtcOfferConstraints = options.rtcOfferConstraints || null;\n\n  // Session Timers.\n  if (this.sessionTimers.enabled) {\n    if (Utils.isDecimal(options.sessionTimersExpires)) {\n      if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES) {\n        this.sessionTimers.defaultExpires = options.sessionTimersExpires;\n      }\n      else {\n        this.sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;\n      }\n    }\n  }\n\n  this.data = options.data || this.data;\n\n  // Check Session Direction and Status\n  if (this.direction !== 'incoming') {\n    throw new Exceptions.NotSupportedError('\"answer\" not supported for outgoing RTCSession');\n  } else if (this.status !== C.STATUS_WAITING_FOR_ANSWER) {\n    throw new Exceptions.InvalidStateError(this.status);\n  }\n\n  this.status = C.STATUS_ANSWERED;\n\n  // An error on dialog creation will fire 'failed' event\n  if (! createDialog.call(this, request, 'UAS')) {\n    request.reply(500, 'Error creating dialog');\n    return;\n  }\n\n  clearTimeout(this.timers.userNoAnswerTimer);\n\n  extraHeaders.unshift('Contact: ' + self.contact);\n\n  // Determine incoming media from incoming SDP offer (if any).\n  sdp = request.parseSDP();\n\n  // Make sure sdp.media is an array, not the case if there is only one media\n  if (! Array.isArray(sdp.media)) {\n    sdp.media = [sdp.media];\n  }\n\n  // Go through all medias in SDP to find offered capabilities to answer with\n  idx = sdp.media.length;\n  while(idx--) {\n    var m = sdp.media[idx];\n    if (m.type === 'audio') {\n      peerHasAudioLine = true;\n      if (!m.direction || m.direction === 'sendrecv') {\n        peerOffersFullAudio = true;\n      }\n    }\n    if (m.type === 'video') {\n      peerHasVideoLine = true;\n      if (!m.direction || m.direction === 'sendrecv') {\n        peerOffersFullVideo = true;\n      }\n    }\n  }\n\n  // Remove audio from mediaStream if suggested by mediaConstraints\n  if (mediaStream && mediaConstraints.audio === false) {\n    tracks = mediaStream.getAudioTracks();\n    length = tracks.length;\n    for (idx=0; idx<length; idx++) {\n      mediaStream.removeTrack(tracks[idx]);\n    }\n  }\n\n  // Remove video from mediaStream if suggested by mediaConstraints\n  if (mediaStream && mediaConstraints.video === false) {\n    tracks = mediaStream.getVideoTracks();\n    length = tracks.length;\n    for (idx=0; idx<length; idx++) {\n      mediaStream.removeTrack(tracks[idx]);\n    }\n  }\n\n  // Set audio constraints based on incoming stream if not supplied\n  if (!mediaStream && mediaConstraints.audio === undefined) {\n    mediaConstraints.audio = peerOffersFullAudio;\n  }\n\n  // Set video constraints based on incoming stream if not supplied\n  if (!mediaStream && mediaConstraints.video === undefined) {\n    mediaConstraints.video = peerOffersFullVideo;\n  }\n\n  // Don't ask for audio if the incoming offer has no audio section\n  if (!mediaStream && !peerHasAudioLine) {\n    mediaConstraints.audio = false;\n  }\n\n  // Don't ask for video if the incoming offer has no video section\n  if (!mediaStream && !peerHasVideoLine) {\n    mediaConstraints.video = false;\n  }\n\n  // Create a new RTCPeerConnection instance.\n  // TODO: This may throw an error, should react.\n  createRTCConnection.call(this, pcConfig, rtcConstraints);\n\n  // If a local MediaStream is given use it.\n  if (mediaStream) {\n    userMediaSucceeded(mediaStream);\n  // If at least audio or video is requested prompt getUserMedia.\n  } else if (mediaConstraints.audio || mediaConstraints.video) {\n    self.localMediaStreamLocallyGenerated = true;\n    navigator.mediaDevices.getUserMedia(mediaConstraints)\n      .then(userMediaSucceeded)\n      .catch(function(error) {\n        userMediaFailed(error);\n\n        debugerror('emit \"getusermediafailed\" [error:%o]', error);\n\n        self.emit('getusermediafailed', error);\n      });\n  // Otherwise don't prompt getUserMedia.\n  } else {\n    userMediaSucceeded(null);\n  }\n\n  // User media succeeded\n  function userMediaSucceeded(stream) {\n    if (self.status === C.STATUS_TERMINATED) { return; }\n\n    self.localMediaStream = stream;\n    if (stream) {\n      self.connection.addStream(stream);\n    }\n\n    // If it's an incoming INVITE without SDP notify the app with the\n    // RTCPeerConnection so it can do stuff on it before generating the offer.\n    if (! self.request.body) {\n      debug('emit \"peerconnection\"');\n\n      self.emit('peerconnection', {\n        peerconnection: self.connection\n      });\n    }\n\n    if (! self.late_sdp) {\n      var e = {originator:'remote', type:'offer', sdp:request.body};\n      var offer = new RTCSessionDescription({type:'offer', sdp:e.sdp});\n\n      debug('emit \"sdp\"');\n\n      self.emit('sdp', e);\n\n      self.connection.setRemoteDescription(offer)\n        .then(remoteDescriptionSucceededOrNotNeeded)\n        .catch(function(error) {\n          request.reply(488);\n          failed.call(self, 'system', null, JsSIP_C.causes.WEBRTC_ERROR);\n\n          debugerror('emit \"peerconnection:setremotedescriptionfailed\" [error:%o]', error);\n\n          self.emit('peerconnection:setremotedescriptionfailed', error);\n        });\n    }\n    else {\n      remoteDescriptionSucceededOrNotNeeded();\n    }\n  }\n\n  // User media failed\n  function userMediaFailed() {\n    if (self.status === C.STATUS_TERMINATED) { return; }\n\n    request.reply(480);\n    failed.call(self, 'local', null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);\n  }\n\n  function remoteDescriptionSucceededOrNotNeeded() {\n    connecting.call(self, request);\n    if (! self.late_sdp) {\n      createLocalDescription.call(self, 'answer', rtcSucceeded, rtcFailed, rtcAnswerConstraints);\n    } else {\n      createLocalDescription.call(self, 'offer', rtcSucceeded, rtcFailed, self.rtcOfferConstraints);\n    }\n  }\n\n  function rtcSucceeded(desc) {\n    if (self.status === C.STATUS_TERMINATED) { return; }\n\n    // run for reply success callback\n    function replySucceeded() {\n      self.status = C.STATUS_WAITING_FOR_ACK;\n\n      setInvite2xxTimer.call(self, request, desc);\n      setACKTimer.call(self);\n      accepted.call(self, 'local');\n    }\n\n    // run for reply failure callback\n    function replyFailed() {\n      failed.call(self, 'system', null, JsSIP_C.causes.CONNECTION_ERROR);\n    }\n\n    handleSessionTimersInIncomingRequest.call(self, request, extraHeaders);\n\n    request.reply(200, null, extraHeaders,\n      desc,\n      replySucceeded,\n      replyFailed\n    );\n  }\n\n  function rtcFailed() {\n    if (self.status === C.STATUS_TERMINATED) { return; }\n\n    request.reply(500);\n    failed.call(self, 'system', null, JsSIP_C.causes.WEBRTC_ERROR);\n  }\n};\n\n\n/**\n * Terminate the call.\n */\nRTCSession.prototype.terminate = function(options) {\n  debug('terminate()');\n\n  options = options || {};\n\n  var cancel_reason, dialog,\n    cause = options.cause || JsSIP_C.causes.BYE,\n    status_code = options.status_code,\n    reason_phrase = options.reason_phrase,\n    extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [],\n    body = options.body,\n    self = this;\n\n  // Check Session Status\n  if (this.status === C.STATUS_TERMINATED) {\n    throw new Exceptions.InvalidStateError(this.status);\n  }\n\n  switch(this.status) {\n    // - UAC -\n    case C.STATUS_NULL:\n    case C.STATUS_INVITE_SENT:\n    case C.STATUS_1XX_RECEIVED:\n      debug('canceling session');\n\n      if (status_code && (status_code < 200 || status_code >= 700)) {\n        throw new TypeError('Invalid status_code: '+ status_code);\n      } else if (status_code) {\n        reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';\n        cancel_reason = 'SIP ;cause=' + status_code + ' ;text=\"' + reason_phrase + '\"';\n      }\n\n      // Check Session Status\n      if (this.status === C.STATUS_NULL) {\n        this.isCanceled = true;\n        this.cancelReason = cancel_reason;\n      } else if (this.status === C.STATUS_INVITE_SENT) {\n        this.isCanceled = true;\n        this.cancelReason = cancel_reason;\n      } else if(this.status === C.STATUS_1XX_RECEIVED) {\n        this.request.cancel(cancel_reason);\n      }\n\n      this.status = C.STATUS_CANCELED;\n\n      failed.call(this, 'local', null, JsSIP_C.causes.CANCELED);\n      break;\n\n      // - UAS -\n    case C.STATUS_WAITING_FOR_ANSWER:\n    case C.STATUS_ANSWERED:\n      debug('rejecting session');\n\n      status_code = status_code || 480;\n\n      if (status_code < 300 || status_code >= 700) {\n        throw new TypeError('Invalid status_code: '+ status_code);\n      }\n\n      this.request.reply(status_code, reason_phrase, extraHeaders, body);\n      failed.call(this, 'local', null, JsSIP_C.causes.REJECTED);\n      break;\n\n    case C.STATUS_WAITING_FOR_ACK:\n    case C.STATUS_CONFIRMED:\n      debug('terminating session');\n\n      reason_phrase = options.reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';\n\n      if (status_code && (status_code < 200 || status_code >= 700)) {\n        throw new TypeError('Invalid status_code: '+ status_code);\n      } else if (status_code) {\n        extraHeaders.push('Reason: SIP ;cause=' + status_code + '; text=\"' + reason_phrase + '\"');\n      }\n\n      /* RFC 3261 section 15 (Terminating a session):\n        *\n        * \"...the callee's UA MUST NOT send a BYE on a confirmed dialog\n        * until it has received an ACK for its 2xx response or until the server\n        * transaction times out.\"\n        */\n      if (this.status === C.STATUS_WAITING_FOR_ACK &&\n          this.direction === 'incoming' &&\n          this.request.server_transaction.state !== Transactions.C.STATUS_TERMINATED) {\n\n        // Save the dialog for later restoration\n        dialog = this.dialog;\n\n        // Send the BYE as soon as the ACK is received...\n        this.receiveRequest = function(request) {\n          if(request.method === JsSIP_C.ACK) {\n            sendRequest.call(this, JsSIP_C.BYE, {\n              extraHeaders: extraHeaders,\n              body: body\n            });\n            dialog.terminate();\n          }\n        };\n\n        // .., or when the INVITE transaction times out\n        this.request.server_transaction.on('stateChanged', function(){\n          if (this.state === Transactions.C.STATUS_TERMINATED) {\n            sendRequest.call(self, JsSIP_C.BYE, {\n              extraHeaders: extraHeaders,\n              body: body\n            });\n            dialog.terminate();\n          }\n        });\n\n        ended.call(this, 'local', null, cause);\n\n        // Restore the dialog into 'this' in order to be able to send the in-dialog BYE :-)\n        this.dialog = dialog;\n\n        // Restore the dialog into 'ua' so the ACK can reach 'this' session\n        this.ua.dialogs[dialog.id.toString()] = dialog;\n\n      } else {\n        sendRequest.call(this, JsSIP_C.BYE, {\n          extraHeaders: extraHeaders,\n          body: body\n        });\n\n        ended.call(this, 'local', null, cause);\n      }\n  }\n};\n\n\nRTCSession.prototype.close = function() {\n  debug('close()');\n\n  var idx;\n\n  if (this.status === C.STATUS_TERMINATED) {\n    return;\n  }\n\n  // Terminate RTC.\n  if (this.connection) {\n    try {\n      this.connection.close();\n    } catch(error) {\n      debugerror('close() | error closing the RTCPeerConnection: %o', error);\n    }\n  }\n\n  // Close local MediaStream if it was not given by the user.\n  if (this.localMediaStream && this.localMediaStreamLocallyGenerated) {\n    debug('close() | closing local MediaStream');\n\n    Utils.closeMediaStream(this.localMediaStream);\n  }\n\n  // Terminate signaling.\n\n  // Clear SIP timers\n  for(idx in this.timers) {\n    clearTimeout(this.timers[idx]);\n  }\n\n  // Clear Session Timers.\n  clearTimeout(this.sessionTimers.timer);\n\n  // Terminate confirmed dialog\n  if (this.dialog) {\n    this.dialog.terminate();\n    delete this.dialog;\n  }\n\n  // Terminate early dialogs\n  for(idx in this.earlyDialogs) {\n    this.earlyDialogs[idx].terminate();\n    delete this.earlyDialogs[idx];\n  }\n\n  this.status = C.STATUS_TERMINATED;\n\n  delete this.ua.sessions[this.id];\n};\n\n\nRTCSession.prototype.sendDTMF = function(tones, options) {\n  debug('sendDTMF() | tones: %s', tones);\n\n  var duration, interToneGap,\n    position = 0,\n    self = this;\n\n  options = options || {};\n  duration = options.duration || null;\n  interToneGap = options.interToneGap || null;\n\n  if (tones === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // Check Session Status\n  if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_WAITING_FOR_ACK) {\n    throw new Exceptions.InvalidStateError(this.status);\n  }\n\n  // Convert to string\n  if(typeof tones === 'number') {\n    tones = tones.toString();\n  }\n\n  // Check tones\n  if (!tones || typeof tones !== 'string' || !tones.match(/^[0-9A-DR#*,]+$/i)) {\n    throw new TypeError('Invalid tones: '+ tones);\n  }\n\n  // Check duration\n  if (duration && !Utils.isDecimal(duration)) {\n    throw new TypeError('Invalid tone duration: '+ duration);\n  } else if (!duration) {\n    duration = RTCSession_DTMF.C.DEFAULT_DURATION;\n  } else if (duration < RTCSession_DTMF.C.MIN_DURATION) {\n    debug('\"duration\" value is lower than the minimum allowed, setting it to '+ RTCSession_DTMF.C.MIN_DURATION+ ' milliseconds');\n    duration = RTCSession_DTMF.C.MIN_DURATION;\n  } else if (duration > RTCSession_DTMF.C.MAX_DURATION) {\n    debug('\"duration\" value is greater than the maximum allowed, setting it to '+ RTCSession_DTMF.C.MAX_DURATION +' milliseconds');\n    duration = RTCSession_DTMF.C.MAX_DURATION;\n  } else {\n    duration = Math.abs(duration);\n  }\n  options.duration = duration;\n\n  // Check interToneGap\n  if (interToneGap && !Utils.isDecimal(interToneGap)) {\n    throw new TypeError('Invalid interToneGap: '+ interToneGap);\n  } else if (!interToneGap) {\n    interToneGap = RTCSession_DTMF.C.DEFAULT_INTER_TONE_GAP;\n  } else if (interToneGap < RTCSession_DTMF.C.MIN_INTER_TONE_GAP) {\n    debug('\"interToneGap\" value is lower than the minimum allowed, setting it to '+ RTCSession_DTMF.C.MIN_INTER_TONE_GAP +' milliseconds');\n    interToneGap = RTCSession_DTMF.C.MIN_INTER_TONE_GAP;\n  } else {\n    interToneGap = Math.abs(interToneGap);\n  }\n\n  if (this.tones) {\n    // Tones are already queued, just add to the queue\n    this.tones += tones;\n    return;\n  }\n\n  this.tones = tones;\n\n  // Send the first tone\n  _sendDTMF();\n\n  function _sendDTMF() {\n    var tone, timeout;\n\n    if (self.status === C.STATUS_TERMINATED || !self.tones || position >= self.tones.length) {\n      // Stop sending DTMF\n      self.tones = null;\n      return;\n    }\n\n    tone = self.tones[position];\n    position += 1;\n\n    if (tone === ',') {\n      timeout = 2000;\n    } else {\n      var dtmf = new RTCSession_DTMF(self);\n      options.eventHandlers = {\n        onFailed: function() { self.tones = null; }\n      };\n      dtmf.send(tone, options);\n      timeout = duration + interToneGap;\n    }\n\n    // Set timeout for the next tone\n    setTimeout(_sendDTMF, timeout);\n  }\n};\n\n\n/**\n * Mute\n */\nRTCSession.prototype.mute = function(options) {\n  debug('mute()');\n\n  options = options || {audio:true, video:false};\n\n  var\n    audioMuted = false,\n    videoMuted = false;\n\n  if (this.audioMuted === false && options.audio) {\n    audioMuted = true;\n    this.audioMuted = true;\n    toogleMuteAudio.call(this, true);\n  }\n\n  if (this.videoMuted === false && options.video) {\n    videoMuted = true;\n    this.videoMuted = true;\n    toogleMuteVideo.call(this, true);\n  }\n\n  if (audioMuted === true || videoMuted === true) {\n    onmute.call(this, {\n      audio: audioMuted,\n      video: videoMuted\n    });\n  }\n};\n\n\n/**\n * Unmute\n */\nRTCSession.prototype.unmute = function(options) {\n  debug('unmute()');\n\n  options = options || {audio:true, video:true};\n\n  var\n    audioUnMuted = false,\n    videoUnMuted = false;\n\n  if (this.audioMuted === true && options.audio) {\n    audioUnMuted = true;\n    this.audioMuted = false;\n\n    if (this.localHold === false) {\n      toogleMuteAudio.call(this, false);\n    }\n  }\n\n  if (this.videoMuted === true && options.video) {\n    videoUnMuted = true;\n    this.videoMuted = false;\n\n    if (this.localHold === false) {\n      toogleMuteVideo.call(this, false);\n    }\n  }\n\n  if (audioUnMuted === true || videoUnMuted === true) {\n    onunmute.call(this, {\n      audio: audioUnMuted,\n      video: videoUnMuted\n    });\n  }\n};\n\n\n/**\n * Hold\n */\nRTCSession.prototype.hold = function(options, done) {\n  debug('hold()');\n\n  options = options || {};\n\n  var self = this,\n    eventHandlers;\n\n  if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n    return false;\n  }\n\n  if (this.localHold === true) {\n    return false;\n  }\n\n  if (! this.isReadyToReOffer()) {\n    return false;\n  }\n\n  this.localHold = true;\n  onhold.call(this, 'local');\n\n  eventHandlers = {\n    succeeded: function() {\n      if (done) { done(); }\n    },\n    failed: function() {\n      self.terminate({\n        cause: JsSIP_C.causes.WEBRTC_ERROR,\n        status_code: 500,\n        reason_phrase: 'Hold Failed'\n      });\n    }\n  };\n\n  if (options.useUpdate) {\n    sendUpdate.call(this, {\n      sdpOffer: true,\n      eventHandlers: eventHandlers,\n      extraHeaders: options.extraHeaders\n    });\n  } else {\n    sendReinvite.call(this, {\n      eventHandlers: eventHandlers,\n      extraHeaders: options.extraHeaders\n    });\n  }\n\n  return true;\n};\n\n\nRTCSession.prototype.unhold = function(options, done) {\n  debug('unhold()');\n\n  options = options || {};\n\n  var self = this,\n    eventHandlers;\n\n  if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n    return false;\n  }\n\n  if (this.localHold === false) {\n    return false;\n  }\n\n  if (! this.isReadyToReOffer()) {\n    return false;\n  }\n\n  this.localHold = false;\n  onunhold.call(this, 'local');\n\n  eventHandlers = {\n    succeeded: function() {\n      if (done) { done(); }\n    },\n    failed: function() {\n      self.terminate({\n        cause: JsSIP_C.causes.WEBRTC_ERROR,\n        status_code: 500,\n        reason_phrase: 'Unhold Failed'\n      });\n    }\n  };\n\n  if (options.useUpdate) {\n    sendUpdate.call(this, {\n      sdpOffer: true,\n      eventHandlers: eventHandlers,\n      extraHeaders: options.extraHeaders\n    });\n  } else {\n    sendReinvite.call(this, {\n      eventHandlers: eventHandlers,\n      extraHeaders: options.extraHeaders\n    });\n  }\n\n  return true;\n};\n\n\nRTCSession.prototype.renegotiate = function(options, done) {\n  debug('renegotiate()');\n\n  options = options || {};\n\n  var self = this,\n    eventHandlers,\n    rtcOfferConstraints = options.rtcOfferConstraints || null;\n\n  if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n    return false;\n  }\n\n  if (! this.isReadyToReOffer()) {\n    return false;\n  }\n\n  eventHandlers = {\n    succeeded: function() {\n      if (done) { done(); }\n    },\n    failed: function() {\n      self.terminate({\n        cause: JsSIP_C.causes.WEBRTC_ERROR,\n        status_code: 500,\n        reason_phrase: 'Media Renegotiation Failed'\n      });\n    }\n  };\n\n  setLocalMediaStatus.call(this);\n\n  if (options.useUpdate) {\n    sendUpdate.call(this, {\n      sdpOffer: true,\n      eventHandlers: eventHandlers,\n      rtcOfferConstraints: rtcOfferConstraints,\n      extraHeaders: options.extraHeaders\n    });\n  } else {\n    sendReinvite.call(this, {\n      eventHandlers: eventHandlers,\n      rtcOfferConstraints: rtcOfferConstraints,\n      extraHeaders: options.extraHeaders\n    });\n  }\n\n  return true;\n};\n\n/**\n * Refer\n */\nRTCSession.prototype.refer = function(target, options) {\n  debug('refer()');\n\n  var self = this,\n    originalTarget = target,\n    referSubscriber,\n    id;\n\n  if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n    return false;\n  }\n\n  // Check target validity\n  target = this.ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: '+ originalTarget);\n  }\n\n  referSubscriber = new RTCSession_ReferSubscriber(this);\n  referSubscriber.sendRefer(target, options);\n\n  // Store in the map\n  id = referSubscriber.outgoingRequest.cseq;\n  this.referSubscribers[id] = referSubscriber;\n\n  // Listen for ending events so we can remove it from the map\n  referSubscriber.on('requestFailed', function() {\n    delete self.referSubscribers[id];\n  });\n  referSubscriber.on('accepted', function() {\n    delete self.referSubscribers[id];\n  });\n  referSubscriber.on('failed', function() {\n    delete self.referSubscribers[id];\n  });\n\n  return referSubscriber;\n};\n\n/**\n * In dialog Request Reception\n */\nRTCSession.prototype.receiveRequest = function(request) {\n  debug('receiveRequest()');\n\n  var contentType,\n      self = this;\n\n  if(request.method === JsSIP_C.CANCEL) {\n    /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL\n    * was in progress and that the UAC MAY continue with the session established by\n    * any 2xx response, or MAY terminate with BYE. JsSIP does continue with the\n    * established session. So the CANCEL is processed only if the session is not yet\n    * established.\n    */\n\n    /*\n    * Terminate the whole session in case the user didn't accept (or yet send the answer)\n    * nor reject the request opening the session.\n    */\n    if(this.status === C.STATUS_WAITING_FOR_ANSWER  || this.status === C.STATUS_ANSWERED) {\n      this.status = C.STATUS_CANCELED;\n      this.request.reply(487);\n      failed.call(this, 'remote', request, JsSIP_C.causes.CANCELED);\n    }\n  } else {\n    // Requests arriving here are in-dialog requests.\n    switch(request.method) {\n      case JsSIP_C.ACK:\n        if (this.status !== C.STATUS_WAITING_FOR_ACK) {\n          return;\n        }\n\n        // Update signaling status.\n        this.status = C.STATUS_CONFIRMED;\n\n        clearTimeout(this.timers.ackTimer);\n        clearTimeout(this.timers.invite2xxTimer);\n\n        if (this.late_sdp) {\n          if (!request.body) {\n            this.terminate({\n              cause: JsSIP_C.causes.MISSING_SDP,\n              status_code: 400\n            });\n            break;\n          }\n\n          var e = {originator:'remote', type:'answer', sdp:request.body};\n          var answer = new RTCSessionDescription({type:'answer', sdp:e.sdp});\n\n          this.emit('sdp', e);\n\n          this.connection.setRemoteDescription(answer)\n            .then(function() {\n              if (!self.is_confirmed) {\n                confirmed.call(self, 'remote', request);\n              }\n            })\n            .catch(function(error) {\n              self.terminate({\n                cause: JsSIP_C.causes.BAD_MEDIA_DESCRIPTION,\n                status_code: 488\n              });\n\n              self.emit('peerconnection:setremotedescriptionfailed', error);\n            });\n        }\n        else {\n          if (!this.is_confirmed) {\n            confirmed.call(this, 'remote', request);\n          }\n        }\n\n        break;\n      case JsSIP_C.BYE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          request.reply(200);\n          ended.call(this, 'remote', request, JsSIP_C.causes.BYE);\n        }\n        else if (this.status === C.STATUS_INVITE_RECEIVED) {\n          request.reply(200);\n          this.request.reply(487, 'BYE Received');\n          ended.call(this, 'remote', request, JsSIP_C.causes.BYE);\n        }\n        else {\n          request.reply(403, 'Wrong Status');\n        }\n        break;\n      case JsSIP_C.INVITE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          if (request.hasHeader('replaces')) {\n            receiveReplaces.call(this, request);\n          } else {\n            receiveReinvite.call(this, request);\n          }\n        }\n        else {\n          request.reply(403, 'Wrong Status');\n        }\n        break;\n      case JsSIP_C.INFO:\n        if(this.status === C.STATUS_CONFIRMED || this.status === C.STATUS_WAITING_FOR_ACK || this.status === C.STATUS_INVITE_RECEIVED) {\n          contentType = request.getHeader('content-type');\n          if (contentType && (contentType.match(/^application\\/dtmf-relay/i))) {\n            new RTCSession_DTMF(this).init_incoming(request);\n          }\n          else {\n            request.reply(415);\n          }\n        }\n        else {\n          request.reply(403, 'Wrong Status');\n        }\n        break;\n      case JsSIP_C.UPDATE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          receiveUpdate.call(this, request);\n        }\n        else {\n          request.reply(403, 'Wrong Status');\n        }\n        break;\n      case JsSIP_C.REFER:\n        if(this.status === C.STATUS_CONFIRMED) {\n          receiveRefer.call(this, request);\n        }\n        else {\n          request.reply(403, 'Wrong Status');\n        }\n        break;\n      case JsSIP_C.NOTIFY:\n        if(this.status === C.STATUS_CONFIRMED) {\n          receiveNotify.call(this, request);\n        }\n        else {\n          request.reply(403, 'Wrong Status');\n        }\n        break;\n      default:\n        request.reply(501);\n    }\n  }\n};\n\n\n/**\n * Session Callbacks\n */\n\nRTCSession.prototype.onTransportError = function() {\n  debugerror('onTransportError()');\n\n  if(this.status !== C.STATUS_TERMINATED) {\n    this.terminate({\n      status_code: 500,\n      reason_phrase: JsSIP_C.causes.CONNECTION_ERROR,\n      cause: JsSIP_C.causes.CONNECTION_ERROR\n    });\n  }\n};\n\n\nRTCSession.prototype.onRequestTimeout = function() {\n  debugerror('onRequestTimeout()');\n\n  if(this.status !== C.STATUS_TERMINATED) {\n    this.terminate({\n      status_code: 408,\n      reason_phrase: JsSIP_C.causes.REQUEST_TIMEOUT,\n      cause: JsSIP_C.causes.REQUEST_TIMEOUT\n    });\n  }\n};\n\n\nRTCSession.prototype.onDialogError = function() {\n  debugerror('onDialogError()');\n\n  if(this.status !== C.STATUS_TERMINATED) {\n    this.terminate({\n      status_code: 500,\n      reason_phrase: JsSIP_C.causes.DIALOG_ERROR,\n      cause: JsSIP_C.causes.DIALOG_ERROR\n    });\n  }\n};\n\n\n// Called from DTMF handler.\nRTCSession.prototype.newDTMF = function(data) {\n  debug('newDTMF()');\n\n  this.emit('newDTMF', data);\n};\n\n\nRTCSession.prototype.resetLocalMedia = function() {\n  debug('resetLocalMedia()');\n\n  // Reset all but remoteHold.\n  this.localHold = false;\n  this.audioMuted = false;\n  this.videoMuted = false;\n\n  setLocalMediaStatus.call(this);\n};\n\n\n/**\n * Private API.\n */\n\n\n/**\n * RFC3261 13.3.1.4\n * Response retransmissions cannot be accomplished by transaction layer\n *  since it is destroyed when receiving the first 2xx answer\n */\nfunction setInvite2xxTimer(request, body) {\n  var\n    self = this,\n    timeout = Timers.T1;\n\n  this.timers.invite2xxTimer = setTimeout(function invite2xxRetransmission() {\n    if (self.status !== C.STATUS_WAITING_FOR_ACK) {\n      return;\n    }\n\n    request.reply(200, null, ['Contact: '+ self.contact], body);\n\n    if (timeout < Timers.T2) {\n      timeout = timeout * 2;\n      if (timeout > Timers.T2) {\n        timeout = Timers.T2;\n      }\n    }\n    self.timers.invite2xxTimer = setTimeout(\n      invite2xxRetransmission, timeout\n    );\n  }, timeout);\n}\n\n\n/**\n * RFC3261 14.2\n * If a UAS generates a 2xx response and never receives an ACK,\n *  it SHOULD generate a BYE to terminate the dialog.\n */\nfunction setACKTimer() {\n  var self = this;\n\n  this.timers.ackTimer = setTimeout(function() {\n    if(self.status === C.STATUS_WAITING_FOR_ACK) {\n      debug('no ACK received, terminating the session');\n\n      clearTimeout(self.timers.invite2xxTimer);\n      sendRequest.call(self, JsSIP_C.BYE);\n      ended.call(self, 'remote', null, JsSIP_C.causes.NO_ACK);\n    }\n  }, Timers.TIMER_H);\n}\n\n\nfunction createRTCConnection(pcConfig, rtcConstraints) {\n  var self = this;\n\n  this.connection = new RTCPeerConnection(pcConfig, rtcConstraints);\n\n  this.connection.addEventListener('iceconnectionstatechange', function() {\n    var state = self.connection.iceConnectionState;\n\n    // TODO: Do more with different states.\n    if (state === 'failed') {\n      self.terminate({\n        cause: JsSIP_C.causes.RTP_TIMEOUT,\n        status_code: 408,\n        reason_phrase: JsSIP_C.causes.RTP_TIMEOUT\n      });\n    }\n  });\n}\n\nfunction createLocalDescription(type, onSuccess, onFailure, constraints) {\n  debug('createLocalDescription()');\n\n  var self = this;\n  var connection = this.connection;\n\n  this.rtcReady = false;\n\n  if (type === 'offer') {\n    connection.createOffer(constraints)\n      .then(createSucceeded)\n      .catch(function(error) {\n        self.rtcReady = true;\n        if (onFailure) { onFailure(error); }\n\n        debugerror('emit \"peerconnection:createofferfailed\" [error:%o]', error);\n\n        self.emit('peerconnection:createofferfailed', error);\n      });\n  }\n  else if (type === 'answer') {\n    connection.createAnswer(constraints)\n      .then(createSucceeded)\n      .catch(function(error) {\n        self.rtcReady = true;\n        if (onFailure) { onFailure(error); }\n\n        debugerror('emit \"peerconnection:createanswerfailed\" [error:%o]', error);\n\n        self.emit('peerconnection:createanswerfailed', error);\n      });\n  }\n  else {\n    throw new Error('createLocalDescription() | type must be \"offer\" or \"answer\", but \"' +type+ '\" was given');\n  }\n\n  // createAnswer or createOffer succeeded\n  function createSucceeded(desc) {\n    var listener;\n\n    connection.addEventListener('icecandidate', listener = function(event) {\n      var candidate = event.candidate;\n\n      if (! candidate) {\n        connection.removeEventListener('icecandidate', listener);\n        self.rtcReady = true;\n\n        if (onSuccess) {\n          var e = {originator:'local', type:type, sdp:connection.localDescription.sdp};\n\n          debug('emit \"sdp\"');\n\n          self.emit('sdp', e);\n          onSuccess(e.sdp);\n        }\n        onSuccess = null;\n      }\n    });\n\n    connection.setLocalDescription(desc)\n      .then(function() {\n        if (connection.iceGatheringState === 'complete') {\n          self.rtcReady = true;\n\n          if (onSuccess) {\n            var e = {originator:'local', type:type, sdp:connection.localDescription.sdp};\n\n            debug('emit \"sdp\"');\n\n            self.emit('sdp', e);\n            onSuccess(e.sdp);\n            onSuccess = null;\n          }\n        }\n      })\n      .catch(function(error) {\n        self.rtcReady = true;\n        if (onFailure) { onFailure(error); }\n\n        debugerror('emit \"peerconnection:setlocaldescriptionfailed\" [error:%o]', error);\n\n        self.emit('peerconnection:setlocaldescriptionfailed', error);\n      });\n  }\n}\n\n\n/**\n * Dialog Management\n */\nfunction createDialog(message, type, early) {\n  var dialog, early_dialog,\n    local_tag = (type === 'UAS') ? message.to_tag : message.from_tag,\n    remote_tag = (type === 'UAS') ? message.from_tag : message.to_tag,\n    id = message.call_id + local_tag + remote_tag;\n\n    early_dialog = this.earlyDialogs[id];\n\n  // Early Dialog\n  if (early) {\n    if (early_dialog) {\n      return true;\n    } else {\n      early_dialog = new Dialog(this, message, type, Dialog.C.STATUS_EARLY);\n\n      // Dialog has been successfully created.\n      if(early_dialog.error) {\n        debug(early_dialog.error);\n        failed.call(this, 'remote', message, JsSIP_C.causes.INTERNAL_ERROR);\n        return false;\n      } else {\n        this.earlyDialogs[id] = early_dialog;\n        return true;\n      }\n    }\n  }\n\n  // Confirmed Dialog\n  else {\n    this.from_tag = message.from_tag;\n    this.to_tag = message.to_tag;\n\n    // In case the dialog is in _early_ state, update it\n    if (early_dialog) {\n      early_dialog.update(message, type);\n      this.dialog = early_dialog;\n      delete this.earlyDialogs[id];\n      return true;\n    }\n\n    // Otherwise, create a _confirmed_ dialog\n    dialog = new Dialog(this, message, type);\n\n    if(dialog.error) {\n      debug(dialog.error);\n      failed.call(this, 'remote', message, JsSIP_C.causes.INTERNAL_ERROR);\n      return false;\n    } else {\n      this.dialog = dialog;\n      return true;\n    }\n  }\n}\n\n/**\n * In dialog INVITE Reception\n */\n\nfunction receiveReinvite(request) {\n  debug('receiveReinvite()');\n\n  var\n    sdp, idx, direction, m,\n    self = this,\n    contentType = request.getHeader('Content-Type'),\n    hold = false,\n    rejected = false,\n    data = {\n      request: request,\n      callback: undefined,\n      reject: reject.bind(this)\n    };\n\n  function reject(options) {\n    options = options || {};\n    rejected = true;\n\n    var\n      status_code = options.status_code || 403,\n      reason_phrase = options.reason_phrase || '',\n      extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [];\n\n    if (this.status !== C.STATUS_CONFIRMED) {\n      return false;\n    }\n\n    if (status_code < 300 || status_code >= 700) {\n      throw new TypeError('Invalid status_code: '+ status_code);\n    }\n\n    request.reply(status_code, reason_phrase, extraHeaders);\n  }\n\n  // Emit 'reinvite'.\n  this.emit('reinvite', data);\n\n  if (rejected) {\n    return;\n  }\n\n  if (request.body) {\n    this.late_sdp = false;\n    if (contentType !== 'application/sdp') {\n      debug('invalid Content-Type');\n      request.reply(415);\n      return;\n    }\n\n    sdp = request.parseSDP();\n\n    for (idx=0; idx < sdp.media.length; idx++) {\n      m = sdp.media[idx];\n\n      if (holdMediaTypes.indexOf(m.type) === -1) {\n        continue;\n      }\n\n      direction = m.direction || sdp.direction || 'sendrecv';\n\n      if (direction === 'sendonly' || direction === 'inactive') {\n        hold = true;\n      }\n      // If at least one of the streams is active don't emit 'hold'.\n      else {\n        hold = false;\n        break;\n      }\n    }\n\n    var e = {originator:'remote', type:'offer', sdp:request.body};\n    var offer = new RTCSessionDescription({type:'offer', sdp:e.sdp});\n\n    this.emit('sdp', e);\n\n    this.connection.setRemoteDescription(offer)\n      .then(doAnswer)\n      .catch(function(error) {\n        request.reply(488);\n\n        debugerror('emit \"peerconnection:setremotedescriptionfailed\" [error:%o]', error);\n\n        self.emit('peerconnection:setremotedescriptionfailed', error);\n      });\n  }\n  else {\n    this.late_sdp = true;\n    doAnswer();\n  }\n\n  function doAnswer() {\n    createSdp(\n      // onSuccess\n      function(sdp) {\n        var extraHeaders = ['Contact: ' + self.contact];\n\n        handleSessionTimersInIncomingRequest.call(self, request, extraHeaders);\n\n        if (self.late_sdp) {\n          sdp = mangleOffer.call(self, sdp);\n        }\n\n        request.reply(200, null, extraHeaders, sdp,\n          function() {\n            self.status = C.STATUS_WAITING_FOR_ACK;\n            setInvite2xxTimer.call(self, request, sdp);\n            setACKTimer.call(self);\n          }\n        );\n\n        // If callback is given execute it.\n        if (typeof data.callback === 'function') {\n          data.callback();\n        }\n      },\n      // onFailure\n      function() {\n        request.reply(500);\n      }\n    );\n  }\n\n  function createSdp(onSuccess, onFailure) {\n    if (! self.late_sdp) {\n      if (self.remoteHold === true && hold === false) {\n        self.remoteHold = false;\n        onunhold.call(self, 'remote');\n      } else if (self.remoteHold === false && hold === true) {\n        self.remoteHold = true;\n        onhold.call(self, 'remote');\n      }\n\n      createLocalDescription.call(self, 'answer', onSuccess, onFailure, self.rtcAnswerConstraints);\n    } else {\n      createLocalDescription.call(self, 'offer', onSuccess, onFailure, self.rtcOfferConstraints);\n    }\n  }\n}\n\n/**\n * In dialog UPDATE Reception\n */\nfunction receiveUpdate(request) {\n  debug('receiveUpdate()');\n\n  var\n    sdp, idx, direction, m,\n    self = this,\n    contentType = request.getHeader('Content-Type'),\n    rejected = false,\n    hold = false,\n    data = {\n      request: request,\n      callback: undefined,\n      reject: reject.bind(this)\n    };\n\n  function reject(options) {\n    options = options || {};\n    rejected = true;\n\n    var\n      status_code = options.status_code || 403,\n      reason_phrase = options.reason_phrase || '',\n      extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [];\n\n    if (this.status !== C.STATUS_CONFIRMED) {\n      return false;\n    }\n\n    if (status_code < 300 || status_code >= 700) {\n      throw new TypeError('Invalid status_code: '+ status_code);\n    }\n\n    request.reply(status_code, reason_phrase, extraHeaders);\n  }\n\n  // Emit 'update'.\n  this.emit('update', data);\n\n  if (rejected) {\n    return;\n  }\n\n  if (! request.body) {\n    var extraHeaders = [];\n    handleSessionTimersInIncomingRequest.call(this, request, extraHeaders);\n    request.reply(200, null, extraHeaders);\n    return;\n  }\n\n  if (contentType !== 'application/sdp') {\n    debug('invalid Content-Type');\n\n    request.reply(415);\n    return;\n  }\n\n  sdp = request.parseSDP();\n\n  for (idx=0; idx < sdp.media.length; idx++) {\n    m = sdp.media[idx];\n\n    if (holdMediaTypes.indexOf(m.type) === -1) {\n      continue;\n    }\n\n    direction = m.direction || sdp.direction || 'sendrecv';\n\n    if (direction === 'sendonly' || direction === 'inactive') {\n      hold = true;\n    }\n    // If at least one of the streams is active don't emit 'hold'.\n    else {\n      hold = false;\n      break;\n    }\n  }\n\n  var e = {originator:'remote', type:'offer', sdp:request.body};\n  var offer = new RTCSessionDescription({type:'offer', sdp:e.sdp});\n\n  debug('emit \"sdp\"');\n\n  this.emit('sdp', e);\n\n  this.connection.setRemoteDescription(offer)\n    .then(function() {\n      if (self.remoteHold === true && hold === false) {\n        self.remoteHold = false;\n        onunhold.call(self, 'remote');\n      } else if (self.remoteHold === false && hold === true) {\n        self.remoteHold = true;\n        onhold.call(self, 'remote');\n      }\n\n      createLocalDescription.call(self, 'answer',\n        // success\n        function(sdp) {\n          var extraHeaders = ['Contact: ' + self.contact];\n\n          handleSessionTimersInIncomingRequest.call(self, request, extraHeaders);\n          request.reply(200, null, extraHeaders, sdp);\n\n          // If callback is given execute it.\n          if (typeof data.callback === 'function') {\n            data.callback();\n          }\n        },\n        // failure\n        function() {\n          request.reply(500);\n        }\n      );\n    })\n    .catch(function(error) {\n      request.reply(488);\n\n      debugerror('emit \"peerconnection:setremotedescriptionfailed\" [error:%o]', error);\n\n      self.emit('peerconnection:setremotedescriptionfailed', error);\n    });\n}\n\n/**\n * In dialog Refer Reception\n */\nfunction receiveRefer(request) {\n  debug('receiveRefer()');\n\n  var notifier,\n      self = this;\n\n  function accept(initCallback, options) {\n    var session, replaces;\n\n    options = options || {};\n    initCallback = (typeof initCallback === 'function')? initCallback : null;\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      return false;\n    }\n\n    session = new RTCSession(this.ua);\n\n    session.on('progress', function(e) {\n      notifier.notify(e.response.status_code, e.response.reason_phrase);\n    });\n\n    session.on('accepted', function(e) {\n      notifier.notify(e.response.status_code, e.response.reason_phrase);\n    });\n\n    session.on('failed', function(e) {\n      if (e.message) {\n        notifier.notify(e.message.status_code, e.message.reason_phrase);\n      } else {\n        notifier.notify(487, e.cause);\n      }\n    });\n\n    // Consider the Replaces header present in the Refer-To URI\n    if (request.refer_to.uri.hasHeader('replaces')) {\n      replaces = decodeURIComponent(request.refer_to.uri.getHeader('replaces'));\n      options.extraHeaders = options.extraHeaders || [];\n      options.extraHeaders.push('Replaces: '+ replaces);\n    }\n\n    session.connect(request.refer_to.uri.toAor(), options, initCallback);\n  }\n\n  function reject() {\n    notifier.notify(603);\n  }\n\n  if (typeof request.refer_to === undefined) {\n    debug('no Refer-To header field present in REFER');\n    request.reply(400);\n    return;\n  }\n\n  if (request.refer_to.uri.scheme !== JsSIP_C.SIP) {\n    debug('Refer-To header field points to a non-SIP URI scheme');\n    request.reply(416);\n    return;\n  }\n\n  // reply before the transaction timer expires\n  request.reply(202);\n\n  notifier = new RTCSession_ReferNotifier(this, request.cseq);\n\n  debug('emit \"refer\"');\n\n  // Emit 'refer'.\n  this.emit('refer', {\n    request: request,\n    accept: function(initCallback, options) { accept.call(self, initCallback, options); },\n    reject: function() { reject.call(self); }\n  });\n}\n\n/**\n * In dialog Notify Reception\n */\nfunction receiveNotify(request) {\n  debug('receiveNotify()');\n\n  if (typeof request.event === undefined) {\n    request.reply(400);\n  }\n\n  switch (request.event.event) {\n    case 'refer': {\n      var id = request.event.params.id;\n      var referSubscriber = this.referSubscribers[id];\n\n      if (!referSubscriber) {\n        request.reply(481, 'Subscription does not exist');\n        return;\n      }\n\n      referSubscriber.receiveNotify(request);\n      request.reply(200);\n\n      break;\n    }\n\n    default: {\n      request.reply(489);\n    }\n  }\n}\n\n/**\n * INVITE with Replaces Reception\n */\nfunction receiveReplaces(request) {\n  debug('receiveReplaces()');\n\n  var self = this;\n\n  function accept(initCallback) {\n    var session;\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      return false;\n    }\n\n    session = new RTCSession(this.ua);\n\n    // terminate the current session when the new one is confirmed\n    session.on('confirmed', function() {\n      self.terminate();\n    });\n\n    session.init_incoming(request, initCallback);\n  }\n\n  function reject() {\n    debug('Replaced INVITE rejected by the user');\n    request.reply(486);\n  }\n\n  // Emit 'replace'.\n  this.emit('replaces', {\n    request: request,\n    accept: function(initCallback) { accept.call(self, initCallback); },\n    reject: function() { reject.call(self); }\n  });\n}\n\n/**\n * Initial Request Sender\n */\nfunction sendInitialRequest(mediaConstraints, rtcOfferConstraints, mediaStream) {\n  var self = this;\n  var request_sender = new RequestSender(self, this.ua);\n\n  this.receiveResponse = function(response) {\n    receiveInviteResponse.call(self, response);\n  };\n\n  // If a local MediaStream is given use it.\n  if (mediaStream) {\n    // Wait a bit so the app can set events such as 'peerconnection' and 'connecting'.\n    setTimeout(function() {\n      userMediaSucceeded(mediaStream);\n    });\n  // If at least audio or video is requested prompt getUserMedia.\n  } else if (mediaConstraints.audio || mediaConstraints.video) {\n    this.localMediaStreamLocallyGenerated = true;\n    navigator.mediaDevices.getUserMedia(mediaConstraints)\n      .then(userMediaSucceeded)\n      .catch(function(error)\n      {\n        userMediaFailed(error);\n\n        debugerror('emit \"getusermediafailed\" [error:%o]', error);\n\n        self.emit('getusermediafailed', error);\n      });\n  // Otherwise don't prompt getUserMedia.\n  } else {\n    userMediaSucceeded(null);\n  }\n\n  // User media succeeded\n  function userMediaSucceeded(stream) {\n    if (self.status === C.STATUS_TERMINATED) { return; }\n\n    self.localMediaStream = stream;\n    if (stream) {\n      self.connection.addStream(stream);\n    }\n\n    debug('emit \"peerconnection\"');\n\n    // Notify the app with the RTCPeerConnection so it can do stuff on it\n    // before generating the offer.\n    self.emit('peerconnection', {\n      peerconnection: self.connection\n    });\n\n    connecting.call(self, self.request);\n    createLocalDescription.call(self, 'offer', rtcSucceeded, rtcFailed, rtcOfferConstraints);\n  }\n\n  // User media failed\n  function userMediaFailed() {\n    if (self.status === C.STATUS_TERMINATED) { return; }\n\n    failed.call(self, 'local', null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);\n  }\n\n  function rtcSucceeded(desc) {\n    if (self.isCanceled || self.status === C.STATUS_TERMINATED) { return; }\n\n    self.request.body = desc;\n    self.status = C.STATUS_INVITE_SENT;\n\n    debug('emit \"sending\" [request:%o]', self.request);\n\n    // Emit 'sending' so the app can mangle the body before the request\n    // is sent.\n    self.emit('sending', {\n      request: self.request\n    });\n\n    request_sender.send();\n  }\n\n  function rtcFailed() {\n    if (self.status === C.STATUS_TERMINATED) { return; }\n\n    failed.call(self, 'system', null, JsSIP_C.causes.WEBRTC_ERROR);\n  }\n}\n\n/**\n * Reception of Response for Initial INVITE\n */\nfunction receiveInviteResponse(response) {\n  debug('receiveInviteResponse()');\n\n  var cause, dialog, e, answer,\n    self = this;\n\n  // Handle 2XX retransmissions and responses from forked requests\n  if (this.dialog && (response.status_code >=200 && response.status_code <=299)) {\n\n    /*\n     * If it is a retransmission from the endpoint that established\n     * the dialog, send an ACK\n     */\n    if (this.dialog.id.call_id === response.call_id &&\n        this.dialog.id.local_tag === response.from_tag &&\n        this.dialog.id.remote_tag === response.to_tag) {\n      sendRequest.call(this, JsSIP_C.ACK);\n      return;\n    }\n\n    // If not, send an ACK  and terminate\n    else  {\n      dialog = new Dialog(this, response, 'UAC');\n\n      if (dialog.error !== undefined) {\n        debug(dialog.error);\n        return;\n      }\n\n      dialog.sendRequest({\n          owner: {status: C.STATUS_TERMINATED},\n          onRequestTimeout: function(){},\n          onTransportError: function(){},\n          onDialogError: function(){},\n          receiveResponse: function(){}\n        }, JsSIP_C.ACK);\n\n      dialog.sendRequest({\n          owner: {status: C.STATUS_TERMINATED},\n          onRequestTimeout: function(){},\n          onTransportError: function(){},\n          onDialogError: function(){},\n          receiveResponse: function(){}\n        }, JsSIP_C.BYE);\n      return;\n    }\n\n  }\n\n  // Proceed to cancellation if the user requested.\n  if(this.isCanceled) {\n    // Remove the flag. We are done.\n    this.isCanceled = false;\n\n    if(response.status_code >= 100 && response.status_code < 200) {\n      this.request.cancel(this.cancelReason);\n    } else if(response.status_code >= 200 && response.status_code < 299) {\n      acceptAndTerminate.call(this, response);\n    }\n    return;\n  }\n\n  if(this.status !== C.STATUS_INVITE_SENT && this.status !== C.STATUS_1XX_RECEIVED) {\n    return;\n  }\n\n  switch(true) {\n    case /^100$/.test(response.status_code):\n      this.status = C.STATUS_1XX_RECEIVED;\n      break;\n\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Do nothing with 1xx responses without To tag.\n      if (!response.to_tag) {\n        debug('1xx response received without to tag');\n        break;\n      }\n\n      // Create Early Dialog if 1XX comes with contact\n      if (response.hasHeader('contact')) {\n        // An error on dialog creation will fire 'failed' event\n        if(! createDialog.call(this, response, 'UAC', true)) {\n          break;\n        }\n      }\n\n      this.status = C.STATUS_1XX_RECEIVED;\n      progress.call(this, 'remote', response);\n\n      if (!response.body) {\n        break;\n      }\n\n      debug('emit \"sdp\"');\n\n      e = {originator:'remote', type:'answer', sdp:response.body};\n      this.emit('sdp', e);\n\n      answer = new RTCSessionDescription({type:'answer', sdp:e.sdp});\n\n      this.connection.setRemoteDescription(answer)\n        .catch(function(error) {\n          debugerror('emit \"peerconnection:setremotedescriptionfailed\" [error:%o]', error);\n\n          self.emit('peerconnection:setremotedescriptionfailed', error);\n        });\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      this.status = C.STATUS_CONFIRMED;\n\n      if(!response.body) {\n        acceptAndTerminate.call(this, response, 400, JsSIP_C.causes.MISSING_SDP);\n        failed.call(this, 'remote', response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);\n        break;\n      }\n\n      // An error on dialog creation will fire 'failed' event\n      if (! createDialog.call(this, response, 'UAC')) {\n        break;\n      }\n\n      debug('emit \"sdp\"');\n\n      e = {originator:'remote', type:'answer', sdp:response.body};\n      this.emit('sdp', e);\n\n      answer = new RTCSessionDescription({type:'answer', sdp:e.sdp});\n\n      Promise.resolve()\n        .then(function() {\n          // Be ready for 200 with SDP after a 180/183 with SDP. We created a SDP 'answer'\n          // for it, so check the current signaling state.\n          if (self.connection.signalingState === 'stable') {\n            return self.connection.createOffer()\n              .then(function(offer) {\n                return self.connection.setLocalDescription(offer);\n              })\n              .catch(function(error) {\n                acceptAndTerminate.call(self, response, 500, error.toString());\n                failed.call(self, 'local', response, JsSIP_C.causes.WEBRTC_ERROR);\n\n                debugerror('emit \"peerconnection:setlocaldescriptionfailed\" [error:%o]', error);\n\n                self.emit('peerconnection:setlocaldescriptionfailed', error);\n              });\n          }\n        })\n        .then(function() {\n          self.connection.setRemoteDescription(answer)\n            .then(function() {\n              // Handle Session Timers.\n              handleSessionTimersInIncomingResponse.call(self, response);\n\n              accepted.call(self, 'remote', response);\n              sendRequest.call(self, JsSIP_C.ACK);\n              confirmed.call(self, 'local', null);\n            })\n            .catch(function(error) {\n              acceptAndTerminate.call(self, response, 488, 'Not Acceptable Here');\n              failed.call(self, 'remote', response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);\n\n              debugerror('emit \"peerconnection:setremotedescriptionfailed\" [error:%o]', error);\n\n              self.emit('peerconnection:setremotedescriptionfailed', error);\n            });\n        });\n      break;\n\n    default:\n      cause = Utils.sipErrorCause(response.status_code);\n      failed.call(this, 'remote', response, cause);\n  }\n}\n\n/**\n * Send Re-INVITE\n */\nfunction sendReinvite(options) {\n  debug('sendReinvite()');\n\n  options = options || {};\n\n  var\n    self = this,\n    extraHeaders = options.extraHeaders || [],\n    eventHandlers = options.eventHandlers || {},\n    rtcOfferConstraints = options.rtcOfferConstraints || this.rtcOfferConstraints || null,\n    succeeded = false;\n\n  extraHeaders.push('Contact: ' + this.contact);\n  extraHeaders.push('Content-Type: application/sdp');\n\n  // Session Timers.\n  if (this.sessionTimers.running) {\n    extraHeaders.push('Session-Expires: ' + this.sessionTimers.currentExpires + ';refresher=' + (this.sessionTimers.refresher ? 'uac' : 'uas'));\n  }\n\n  createLocalDescription.call(this, 'offer',\n    // success\n    function(sdp) {\n      sdp = mangleOffer.call(self, sdp);\n\n      var request = new RTCSession_Request(self, JsSIP_C.INVITE);\n\n      request.send({\n        extraHeaders: extraHeaders,\n        body: sdp,\n        eventHandlers: {\n          onSuccessResponse: function(response) {\n            onSucceeded(response);\n            succeeded = true;\n          },\n          onErrorResponse: function(response) {\n            onFailed(response);\n          },\n          onTransportError: function() {\n            self.onTransportError();  // Do nothing because session ends.\n          },\n          onRequestTimeout: function() {\n            self.onRequestTimeout();  // Do nothing because session ends.\n          },\n          onDialogError: function() {\n            self.onDialogError();  // Do nothing because session ends.\n          }\n        }\n      });\n    },\n    // failure\n    function() {\n      onFailed();\n    },\n    // RTC constraints.\n    rtcOfferConstraints\n  );\n\n  function onSucceeded(response) {\n    if (self.status === C.STATUS_TERMINATED) {\n      return;\n    }\n\n    sendRequest.call(self, JsSIP_C.ACK);\n\n    // If it is a 2XX retransmission exit now.\n    if (succeeded) { return; }\n\n    // Handle Session Timers.\n    handleSessionTimersInIncomingResponse.call(self, response);\n\n    // Must have SDP answer.\n    if(! response.body) {\n      onFailed();\n      return;\n    } else if (response.getHeader('Content-Type') !== 'application/sdp') {\n      onFailed();\n      return;\n    }\n\n    var e = {originator:'remote', type:'answer', sdp:response.body};\n    var answer = new RTCSessionDescription({type:'answer', sdp:e.sdp});\n\n    debug('emit \"sdp\"');\n\n    self.emit('sdp', e);\n\n    self.connection.setRemoteDescription(answer)\n      .then(function() {\n        if (eventHandlers.succeeded) {\n          eventHandlers.succeeded(response);\n        }\n      })\n      .catch(function(error) {\n        onFailed();\n\n        debugerror('emit \"peerconnection:setremotedescriptionfailed\" [error:%o]', error);\n\n        self.emit('peerconnection:setremotedescriptionfailed', error);\n      });\n  }\n\n  function onFailed(response) {\n    if (eventHandlers.failed) {\n      eventHandlers.failed(response);\n    }\n  }\n}\n\n/**\n * Send UPDATE\n */\nfunction sendUpdate(options) {\n  debug('sendUpdate()');\n\n  options = options || {};\n\n  var\n    self = this,\n    extraHeaders = options.extraHeaders || [],\n    eventHandlers = options.eventHandlers || {},\n    rtcOfferConstraints = options.rtcOfferConstraints || this.rtcOfferConstraints || null,\n    sdpOffer = options.sdpOffer || false,\n    succeeded = false;\n\n  extraHeaders.push('Contact: ' + this.contact);\n\n  // Session Timers.\n  if (this.sessionTimers.running) {\n    extraHeaders.push('Session-Expires: ' + this.sessionTimers.currentExpires + ';refresher=' + (this.sessionTimers.refresher ? 'uac' : 'uas'));\n  }\n\n  if (sdpOffer) {\n    extraHeaders.push('Content-Type: application/sdp');\n\n    createLocalDescription.call(this, 'offer',\n      // success\n      function(sdp) {\n        sdp = mangleOffer.call(self, sdp);\n\n        var request = new RTCSession_Request(self, JsSIP_C.UPDATE);\n\n        request.send({\n          extraHeaders: extraHeaders,\n          body: sdp,\n          eventHandlers: {\n            onSuccessResponse: function(response) {\n              onSucceeded(response);\n              succeeded = true;\n            },\n            onErrorResponse: function(response) {\n              onFailed(response);\n            },\n            onTransportError: function() {\n              self.onTransportError();  // Do nothing because session ends.\n            },\n            onRequestTimeout: function() {\n              self.onRequestTimeout();  // Do nothing because session ends.\n            },\n            onDialogError: function() {\n              self.onDialogError();  // Do nothing because session ends.\n            }\n          }\n        });\n      },\n      // failure\n      function() {\n        onFailed();\n      },\n      // RTC constraints.\n      rtcOfferConstraints\n    );\n  }\n\n  // No SDP.\n  else {\n    var request = new RTCSession_Request(self, JsSIP_C.UPDATE);\n\n    request.send({\n      extraHeaders: extraHeaders,\n      eventHandlers: {\n        onSuccessResponse: function(response) {\n          onSucceeded(response);\n        },\n        onErrorResponse: function(response) {\n          onFailed(response);\n        },\n        onTransportError: function() {\n          self.onTransportError();  // Do nothing because session ends.\n        },\n        onRequestTimeout: function() {\n          self.onRequestTimeout();  // Do nothing because session ends.\n        },\n        onDialogError: function() {\n          self.onDialogError();  // Do nothing because session ends.\n        }\n      }\n    });\n  }\n\n  function onSucceeded(response) {\n    if (self.status === C.STATUS_TERMINATED) {\n      return;\n    }\n\n    // If it is a 2XX retransmission exit now.\n    if (succeeded) { return; }\n\n    // Handle Session Timers.\n    handleSessionTimersInIncomingResponse.call(self, response);\n\n    // Must have SDP answer.\n    if (sdpOffer) {\n      if(! response.body) {\n        onFailed();\n        return;\n      } else if (response.getHeader('Content-Type') !== 'application/sdp') {\n        onFailed();\n        return;\n      }\n\n      var e = {originator:'remote', type:'answer', sdp:response.body};\n      var answer = new RTCSessionDescription({type:'answer', sdp:e.sdp});\n\n      debug('emit \"sdp\"');\n\n      self.emit('sdp', e);\n\n      self.connection.setRemoteDescription(answer)\n        .then(function() {\n          if (eventHandlers.succeeded) {\n            eventHandlers.succeeded(response);\n          }\n        })\n        .catch(function(error) {\n          onFailed();\n\n          debugerror('emit \"peerconnection:setremotedescriptionfailed\" [error:%o]', error);\n\n          self.emit('peerconnection:setremotedescriptionfailed', error);\n        });\n    }\n    // No SDP answer.\n    else {\n      if (eventHandlers.succeeded) {\n        eventHandlers.succeeded(response);\n      }\n    }\n  }\n\n  function onFailed(response) {\n    if (eventHandlers.failed) { eventHandlers.failed(response); }\n  }\n}\n\nfunction acceptAndTerminate(response, status_code, reason_phrase) {\n  debug('acceptAndTerminate()');\n\n  var extraHeaders = [];\n\n  if (status_code) {\n    reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';\n    extraHeaders.push('Reason: SIP ;cause=' + status_code + '; text=\"' + reason_phrase + '\"');\n  }\n\n  // An error on dialog creation will fire 'failed' event\n  if (this.dialog || createDialog.call(this, response, 'UAC')) {\n    sendRequest.call(this, JsSIP_C.ACK);\n    sendRequest.call(this, JsSIP_C.BYE, {\n      extraHeaders: extraHeaders\n    });\n  }\n\n  // Update session status.\n  this.status = C.STATUS_TERMINATED;\n}\n\n/**\n * Send a generic in-dialog Request\n */\nfunction sendRequest(method, options) {\n  debug('sendRequest()');\n\n  var request = new RTCSession_Request(this, method);\n  request.send(options);\n}\n\n/**\n * Correctly set the SDP direction attributes if the call is on local hold\n */\nfunction mangleOffer(sdp) {\n  var idx, length, m;\n\n  if (! this.localHold && ! this.remoteHold) {\n    return sdp;\n  }\n\n  sdp = sdp_transform.parse(sdp);\n\n  // Local hold.\n  if (this.localHold && ! this.remoteHold) {\n    debug('mangleOffer() | me on hold, mangling offer');\n    length = sdp.media.length;\n    for (idx=0; idx<length; idx++) {\n      m = sdp.media[idx];\n      if (holdMediaTypes.indexOf(m.type) === -1) {\n        continue;\n      }\n      if (!m.direction) {\n        m.direction = 'sendonly';\n      } else if (m.direction === 'sendrecv') {\n        m.direction = 'sendonly';\n      } else if (m.direction === 'recvonly') {\n        m.direction = 'inactive';\n      }\n    }\n  }\n  // Local and remote hold.\n  else if (this.localHold && this.remoteHold) {\n    debug('mangleOffer() | both on hold, mangling offer');\n    length = sdp.media.length;\n    for (idx=0; idx<length; idx++) {\n      m = sdp.media[idx];\n      if (holdMediaTypes.indexOf(m.type) === -1) {\n        continue;\n      }\n      m.direction = 'inactive';\n    }\n  }\n  // Remote hold.\n  else if (this.remoteHold) {\n    debug('mangleOffer() | remote on hold, mangling offer');\n    length = sdp.media.length;\n    for (idx=0; idx<length; idx++) {\n      m = sdp.media[idx];\n      if (holdMediaTypes.indexOf(m.type) === -1) {\n        continue;\n      }\n      if (!m.direction) {\n        m.direction = 'recvonly';\n      } else if (m.direction === 'sendrecv') {\n        m.direction = 'recvonly';\n      } else if (m.direction === 'recvonly') {\n        m.direction = 'inactive';\n      }\n    }\n  }\n\n  return sdp_transform.write(sdp);\n}\n\nfunction setLocalMediaStatus() {\n  var enableAudio = true,\n    enableVideo = true;\n\n  if (this.localHold || this.remoteHold) {\n    enableAudio = false;\n    enableVideo = false;\n  }\n\n  if (this.audioMuted) {\n    enableAudio = false;\n  }\n\n  if (this.videoMuted) {\n    enableVideo = false;\n  }\n\n  toogleMuteAudio.call(this, !enableAudio);\n  toogleMuteVideo.call(this, !enableVideo);\n}\n\n/**\n * Handle SessionTimers for an incoming INVITE or UPDATE.\n * @param  {IncomingRequest} request\n * @param  {Array} responseExtraHeaders  Extra headers for the 200 response.\n */\nfunction handleSessionTimersInIncomingRequest(request, responseExtraHeaders) {\n  if (! this.sessionTimers.enabled) { return; }\n\n  var session_expires_refresher;\n\n  if (request.session_expires && request.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES) {\n    this.sessionTimers.currentExpires = request.session_expires;\n    session_expires_refresher = request.session_expires_refresher || 'uas';\n  }\n  else {\n    this.sessionTimers.currentExpires = this.sessionTimers.defaultExpires;\n    session_expires_refresher = 'uas';\n  }\n\n  responseExtraHeaders.push('Session-Expires: ' + this.sessionTimers.currentExpires + ';refresher=' + session_expires_refresher);\n\n  this.sessionTimers.refresher = (session_expires_refresher === 'uas');\n  runSessionTimer.call(this);\n}\n\n/**\n * Handle SessionTimers for an incoming response to INVITE or UPDATE.\n * @param  {IncomingResponse} response\n */\nfunction handleSessionTimersInIncomingResponse(response) {\n  if (! this.sessionTimers.enabled) { return; }\n\n  var session_expires_refresher;\n\n  if (response.session_expires && response.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES) {\n    this.sessionTimers.currentExpires = response.session_expires;\n    session_expires_refresher = response.session_expires_refresher || 'uac';\n  }\n  else {\n    this.sessionTimers.currentExpires = this.sessionTimers.defaultExpires;\n    session_expires_refresher = 'uac';\n  }\n\n  this.sessionTimers.refresher = (session_expires_refresher === 'uac');\n  runSessionTimer.call(this);\n}\n\nfunction runSessionTimer() {\n  var self = this;\n  var expires = this.sessionTimers.currentExpires;\n\n  this.sessionTimers.running = true;\n\n  clearTimeout(this.sessionTimers.timer);\n\n  // I'm the refresher.\n  if (this.sessionTimers.refresher) {\n    this.sessionTimers.timer = setTimeout(function() {\n      if (self.status === C.STATUS_TERMINATED) { return; }\n\n      debug('runSessionTimer() | sending session refresh request');\n\n      sendUpdate.call(self, {\n        eventHandlers: {\n          succeeded: function(response) {\n            handleSessionTimersInIncomingResponse.call(self, response);\n          }\n        }\n      });\n    }, expires * 500);  // Half the given interval (as the RFC states).\n  }\n\n  // I'm not the refresher.\n  else {\n    this.sessionTimers.timer = setTimeout(function() {\n      if (self.status === C.STATUS_TERMINATED) { return; }\n\n      debugerror('runSessionTimer() | timer expired, terminating the session');\n\n      self.terminate({\n        cause: JsSIP_C.causes.REQUEST_TIMEOUT,\n        status_code: 408,\n        reason_phrase: 'Session Timer Expired'\n      });\n    }, expires * 1100);\n  }\n}\n\nfunction toogleMuteAudio(mute) {\n  var streamIdx, trackIdx, streamsLength, tracksLength, tracks,\n    localStreams = this.connection.getLocalStreams();\n\n  streamsLength = localStreams.length;\n  for (streamIdx = 0; streamIdx < streamsLength; streamIdx++) {\n    tracks = localStreams[streamIdx].getAudioTracks();\n    tracksLength = tracks.length;\n    for (trackIdx = 0; trackIdx < tracksLength; trackIdx++) {\n      tracks[trackIdx].enabled = !mute;\n    }\n  }\n}\n\nfunction toogleMuteVideo(mute) {\n  var streamIdx, trackIdx, streamsLength, tracksLength, tracks,\n    localStreams = this.connection.getLocalStreams();\n\n  streamsLength = localStreams.length;\n  for (streamIdx = 0; streamIdx < streamsLength; streamIdx++) {\n    tracks = localStreams[streamIdx].getVideoTracks();\n    tracksLength = tracks.length;\n    for (trackIdx = 0; trackIdx < tracksLength; trackIdx++) {\n      tracks[trackIdx].enabled = !mute;\n    }\n  }\n}\n\nfunction newRTCSession(originator, request) {\n  debug('newRTCSession()');\n\n  this.ua.newRTCSession({\n    originator: originator,\n    session: this,\n    request: request\n  });\n}\n\nfunction connecting(request) {\n  debug('session connecting');\n\n  debug('emit \"connecting\"');\n\n  this.emit('connecting', {\n    request: request\n  });\n}\n\nfunction progress(originator, response) {\n  debug('session progress');\n\n  debug('emit \"progress\"');\n\n  this.emit('progress', {\n    originator: originator,\n    response: response || null\n  });\n}\n\nfunction accepted(originator, message) {\n  debug('session accepted');\n\n  this.start_time = new Date();\n\n  debug('emit \"accepted\"');\n\n  this.emit('accepted', {\n    originator: originator,\n    response: message || null\n  });\n}\n\nfunction confirmed(originator, ack) {\n  debug('session confirmed');\n\n  this.is_confirmed = true;\n\n  debug('emit \"confirmed\"');\n\n  this.emit('confirmed', {\n    originator: originator,\n    ack: ack || null\n  });\n}\n\nfunction ended(originator, message, cause) {\n  debug('session ended');\n\n  this.end_time = new Date();\n\n  this.close();\n\n  debug('emit \"ended\"');\n\n  this.emit('ended', {\n    originator: originator,\n    message: message || null,\n    cause: cause\n  });\n}\n\nfunction failed(originator, message, cause) {\n  debug('session failed');\n\n  this.close();\n\n  debug('emit \"failed\"');\n\n  this.emit('failed', {\n    originator: originator,\n    message: message || null,\n    cause: cause\n  });\n}\n\nfunction onhold(originator) {\n  debug('session onhold');\n\n  setLocalMediaStatus.call(this);\n\n  debug('emit \"hold\"');\n\n  this.emit('hold', {\n    originator: originator\n  });\n}\n\nfunction onunhold(originator) {\n  debug('session onunhold');\n\n  setLocalMediaStatus.call(this);\n\n  debug('emit \"unhold\"');\n\n  this.emit('unhold', {\n    originator: originator\n  });\n}\n\nfunction onmute(options) {\n  debug('session onmute');\n\n  setLocalMediaStatus.call(this);\n\n  debug('emit \"muted\"');\n\n  this.emit('muted', {\n    audio: options.audio,\n    video: options.video\n  });\n}\n\nfunction onunmute(options) {\n  debug('session onunmute');\n\n  setLocalMediaStatus.call(this);\n\n  debug('emit \"unmuted\"');\n\n  this.emit('unmuted', {\n    audio: options.audio,\n    video: options.video\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Dialog.js":"module.exports = Dialog;\n\n\nvar C = {\n  // Dialog states\n  STATUS_EARLY:       1,\n  STATUS_CONFIRMED:   2\n};\n\n/**\n * Expose C object.\n */\nDialog.C = C;\n\n\n/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP:Dialog');\nvar SIPMessage = require('./SIPMessage');\nvar JsSIP_C = require('./Constants');\nvar Transactions = require('./Transactions');\nvar Dialog_RequestSender = require('./Dialog/RequestSender');\n\n\n// RFC 3261 12.1\nfunction Dialog(owner, message, type, state) {\n  var contact;\n\n  this.uac_pending_reply = false;\n  this.uas_pending_reply = false;\n\n  if(!message.hasHeader('contact')) {\n    return {\n      error: 'unable to create a Dialog without Contact header field'\n    };\n  }\n\n  if(message instanceof SIPMessage.IncomingResponse) {\n    state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;\n  } else {\n    // Create confirmed dialog if state is not defined\n    state = state || C.STATUS_CONFIRMED;\n  }\n\n  contact = message.parseHeader('contact');\n\n  // RFC 3261 12.1.1\n  if(type === 'UAS') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.to_tag,\n      remote_tag: message.from_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.remote_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('to').uri;\n    this.remote_uri = message.parseHeader('from').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route');\n  }\n  // RFC 3261 12.1.2\n  else if(type === 'UAC') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.from_tag,\n      remote_tag: message.to_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.local_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('from').uri;\n    this.remote_uri = message.parseHeader('to').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route').reverse();\n  }\n\n  this.owner = owner;\n  owner.ua.dialogs[this.id.toString()] = this;\n  debug('new ' + type + ' dialog created with status ' + (this.state === C.STATUS_EARLY ? 'EARLY': 'CONFIRMED'));\n}\n\n\nDialog.prototype = {\n  update: function(message, type) {\n    this.state = C.STATUS_CONFIRMED;\n\n    debug('dialog '+ this.id.toString() +'  changed to CONFIRMED state');\n\n    if(type === 'UAC') {\n      // RFC 3261 13.2.2.4\n      this.route_set = message.getHeaders('record-route').reverse();\n    }\n  },\n\n  terminate: function() {\n    debug('dialog ' + this.id.toString() + ' deleted');\n    delete this.owner.ua.dialogs[this.id.toString()];\n  },\n\n  // RFC 3261 12.2.1.1\n  createRequest: function(method, extraHeaders, body) {\n    var cseq, request;\n    extraHeaders = extraHeaders && extraHeaders.slice() || [];\n\n    if(!this.local_seqnum) { this.local_seqnum = Math.floor(Math.random() * 10000); }\n\n    cseq = (method === JsSIP_C.CANCEL || method === JsSIP_C.ACK) ? this.local_seqnum : this.local_seqnum += 1;\n\n    request = new SIPMessage.OutgoingRequest(\n      method,\n      this.remote_target,\n      this.owner.ua, {\n        'cseq': cseq,\n        'call_id': this.id.call_id,\n        'from_uri': this.local_uri,\n        'from_tag': this.id.local_tag,\n        'to_uri': this.remote_uri,\n        'to_tag': this.id.remote_tag,\n        'route_set': this.route_set\n      }, extraHeaders, body);\n\n    request.dialog = this;\n\n    return request;\n  },\n\n  // RFC 3261 12.2.2\n  checkInDialogRequest: function(request) {\n    var self = this;\n\n    if(!this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    } else if(request.cseq < this.remote_seqnum) {\n        //Do not try to reply to an ACK request.\n        if (request.method !== JsSIP_C.ACK) {\n          request.reply(500);\n        }\n        return false;\n    } else if(request.cseq > this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    }\n\n    // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-\n    if (request.method === JsSIP_C.INVITE || (request.method === JsSIP_C.UPDATE && request.body)) {\n      if (this.uac_pending_reply === true) {\n        request.reply(491);\n      } else if (this.uas_pending_reply === true) {\n        var retryAfter = (Math.random() * 10 | 0) + 1;\n        request.reply(500, null, ['Retry-After:'+ retryAfter]);\n        return false;\n      } else {\n        this.uas_pending_reply = true;\n        request.server_transaction.on('stateChanged', function stateChanged(){\n          if (this.state === Transactions.C.STATUS_ACCEPTED ||\n              this.state === Transactions.C.STATUS_COMPLETED ||\n              this.state === Transactions.C.STATUS_TERMINATED) {\n\n            request.server_transaction.removeListener('stateChanged', stateChanged);\n            self.uas_pending_reply = false;\n          }\n        });\n      }\n\n      // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted\n      if(request.hasHeader('contact')) {\n        request.server_transaction.on('stateChanged', function(){\n          if (this.state === Transactions.C.STATUS_ACCEPTED) {\n            self.remote_target = request.parseHeader('contact').uri;\n          }\n        });\n      }\n    }\n    else if (request.method === JsSIP_C.NOTIFY) {\n      // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted\n      if(request.hasHeader('contact')) {\n        request.server_transaction.on('stateChanged', function(){\n          if (this.state === Transactions.C.STATUS_COMPLETED) {\n            self.remote_target = request.parseHeader('contact').uri;\n          }\n        });\n      }\n    }\n\n    return true;\n  },\n\n  sendRequest: function(applicant, method, options) {\n    options = options || {};\n\n    var\n      extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [],\n      body = options.body || null,\n      request = this.createRequest(method, extraHeaders, body),\n      request_sender = new Dialog_RequestSender(this, applicant, request);\n\n      request_sender.send();\n\n      // Return the instance of OutgoingRequest\n      return request;\n  },\n\n  receiveRequest: function(request) {\n    //Check in-dialog request\n    if(!this.checkInDialogRequest(request)) {\n      return;\n    }\n\n    this.owner.receiveRequest(request);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Dialog/RequestSender.js":"module.exports = DialogRequestSender;\n\n/**\n * Dependencies.\n */\nvar JsSIP_C = require('../Constants');\nvar Transactions = require('../Transactions');\nvar RTCSession = require('../RTCSession');\nvar RequestSender = require('../RequestSender');\n\n\nfunction DialogRequestSender(dialog, applicant, request) {\n\n  this.dialog = dialog;\n  this.applicant = applicant;\n  this.request = request;\n\n  // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.\n  this.reattempt = false;\n  this.reattemptTimer = null;\n}\n\n\nDialogRequestSender.prototype = {\n  send: function() {\n    var\n      self = this,\n      request_sender = new RequestSender(this, this.dialog.owner.ua);\n\n    request_sender.send();\n\n    // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-\n    if ((this.request.method === JsSIP_C.INVITE || (this.request.method === JsSIP_C.UPDATE && this.request.body)) &&\n        request_sender.clientTransaction.state !== Transactions.C.STATUS_TERMINATED) {\n      this.dialog.uac_pending_reply = true;\n      request_sender.clientTransaction.on('stateChanged', function stateChanged(){\n        if (this.state === Transactions.C.STATUS_ACCEPTED ||\n            this.state === Transactions.C.STATUS_COMPLETED ||\n            this.state === Transactions.C.STATUS_TERMINATED) {\n\n          request_sender.clientTransaction.removeListener('stateChanged', stateChanged);\n          self.dialog.uac_pending_reply = false;\n        }\n      });\n    }\n  },\n\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  receiveResponse: function(response) {\n    var self = this;\n\n    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.\n    if (response.status_code === 408 || response.status_code === 481) {\n      this.applicant.onDialogError(response);\n    } else if (response.method === JsSIP_C.INVITE && response.status_code === 491) {\n      if (this.reattempt) {\n        this.applicant.receiveResponse(response);\n      } else {\n        this.request.cseq.value = this.dialog.local_seqnum += 1;\n        this.reattemptTimer = setTimeout(function() {\n          if (self.applicant.owner.status !== RTCSession.C.STATUS_TERMINATED) {\n            self.reattempt = true;\n            self.request_sender.send();\n          }\n        }, 1000);\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/RTCSession/Request.js":"module.exports = Request;\n\n/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP:RTCSession:Request');\nvar debugerror = require('debug')('JsSIP:ERROR:RTCSession:Request');\ndebugerror.log = console.warn.bind(console);\nvar JsSIP_C = require('../Constants');\nvar Exceptions = require('../Exceptions');\nvar RTCSession = require('../RTCSession');\n\n\nfunction Request(session, method) {\n  debug('new | %s', method);\n\n  this.session = session;\n  this.method = method;\n  // Instance of OutgoingRequest\n  this.outgoingRequest = null;\n\n  // Check RTCSession Status\n  if (this.session.status !== RTCSession.C.STATUS_1XX_RECEIVED &&\n    this.session.status !== RTCSession.C.STATUS_WAITING_FOR_ANSWER &&\n    this.session.status !== RTCSession.C.STATUS_WAITING_FOR_ACK &&\n    this.session.status !== RTCSession.C.STATUS_CONFIRMED &&\n    this.session.status !== RTCSession.C.STATUS_TERMINATED) {\n    throw new Exceptions.InvalidStateError(this.session.status);\n  }\n\n  /*\n   * Allow sending BYE in TERMINATED status since the RTCSession\n   * could had been terminated before the ACK had arrived.\n   * RFC3261 Section 15, Paragraph 2\n   */\n  else if (this.session.status === RTCSession.C.STATUS_TERMINATED && method !== JsSIP_C.BYE) {\n    throw new Exceptions.InvalidStateError(this.session.status);\n  }\n}\n\nRequest.prototype.send = function(options) {\n  options = options || {};\n\n  var\n    extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [],\n    body = options.body || null;\n\n  this.eventHandlers = options.eventHandlers || {};\n\n  this.outgoingRequest = this.session.dialog.sendRequest(this, this.method, {\n    extraHeaders: extraHeaders,\n    body: body\n  });\n};\n\nRequest.prototype.receiveResponse = function(response) {\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      debug('onProgressResponse');\n      if (this.eventHandlers.onProgressResponse) { this.eventHandlers.onProgressResponse(response); }\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      debug('onSuccessResponse');\n      if (this.eventHandlers.onSuccessResponse) { this.eventHandlers.onSuccessResponse(response); }\n      break;\n\n    default:\n      debug('onErrorResponse');\n      if (this.eventHandlers.onErrorResponse) { this.eventHandlers.onErrorResponse(response); }\n      break;\n  }\n};\n\nRequest.prototype.onRequestTimeout = function() {\n  debugerror('onRequestTimeout');\n  if (this.eventHandlers.onRequestTimeout) { this.eventHandlers.onRequestTimeout(); }\n};\n\nRequest.prototype.onTransportError = function() {\n  debugerror('onTransportError');\n  if (this.eventHandlers.onTransportError) { this.eventHandlers.onTransportError(); }\n};\n\nRequest.prototype.onDialogError = function() {\n  debugerror('onDialogError');\n  if (this.eventHandlers.onDialogError) { this.eventHandlers.onDialogError(); }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/RTCSession/DTMF.js":"module.exports = DTMF;\n\n\nvar C = {\n  MIN_DURATION:            70,\n  MAX_DURATION:            6000,\n  DEFAULT_DURATION:        100,\n  MIN_INTER_TONE_GAP:      50,\n  DEFAULT_INTER_TONE_GAP:  500\n};\n\n/**\n * Expose C object.\n */\nDTMF.C = C;\n\n\n/**\n * Dependencies.\n */\nvar util = require('util');\nvar events = require('events');\nvar debug = require('debug')('JsSIP:RTCSession:DTMF');\nvar debugerror = require('debug')('JsSIP:ERROR:RTCSession:DTMF');\ndebugerror.log = console.warn.bind(console);\nvar JsSIP_C = require('../Constants');\nvar Exceptions = require('../Exceptions');\nvar RTCSession = require('../RTCSession');\n\n\nfunction DTMF(session) {\n  this.owner = session;\n  this.direction = null;\n  this.tone = null;\n  this.duration = null;\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(DTMF, events.EventEmitter);\n\nDTMF.prototype.send = function(tone, options) {\n  var extraHeaders, body;\n\n  if (tone === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  this.direction = 'outgoing';\n\n  // Check RTCSession Status\n  if (this.owner.status !== RTCSession.C.STATUS_CONFIRMED &&\n    this.owner.status !== RTCSession.C.STATUS_WAITING_FOR_ACK) {\n    throw new Exceptions.InvalidStateError(this.owner.status);\n  }\n\n  // Get DTMF options\n  options = options || {};\n  extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n  this.eventHandlers = options.eventHandlers || {};\n\n  // Check tone type\n  if (typeof tone === 'string' ) {\n    tone = tone.toUpperCase();\n  } else if (typeof tone === 'number') {\n    tone = tone.toString();\n  } else {\n    throw new TypeError('Invalid tone: '+ tone);\n  }\n\n  // Check tone value\n  if (!tone.match(/^[0-9A-DR#*]$/)) {\n    throw new TypeError('Invalid tone: '+ tone);\n  } else {\n    this.tone = tone;\n  }\n\n  // Duration is checked/corrected in RTCSession\n  this.duration = options.duration;\n\n  extraHeaders.push('Content-Type: application/dtmf-relay');\n\n  body = 'Signal=' + this.tone + '\\r\\n';\n  body += 'Duration=' + this.duration;\n\n  this.owner.newDTMF({\n    originator: 'local',\n    dtmf: this,\n    request: this.request\n  });\n\n  this.owner.dialog.sendRequest(this, JsSIP_C.INFO, {\n    extraHeaders: extraHeaders,\n    body: body\n  });\n};\n\nDTMF.prototype.receiveResponse = function(response) {\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Ignore provisional responses.\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      this.emit('succeeded', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n\n    default:\n      if (this.eventHandlers.onFailed) {\n        this.eventHandlers.onFailed();\n      }\n\n      this.emit('failed', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n  }\n};\n\nDTMF.prototype.onRequestTimeout = function() {\n  debugerror('onRequestTimeout');\n  this.owner.onRequestTimeout();\n};\n\nDTMF.prototype.onTransportError = function() {\n  debugerror('onTransportError');\n  this.owner.onTransportError();\n};\n\nDTMF.prototype.onDialogError = function() {\n  debugerror('onDialogError');\n  this.owner.onDialogError();\n};\n\nDTMF.prototype.init_incoming = function(request) {\n  var body,\n    reg_tone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/,\n    reg_duration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\n\n  this.direction = 'incoming';\n  this.request = request;\n\n  request.reply(200);\n\n  if (request.body) {\n    body = request.body.split('\\n');\n    if (body.length >= 1) {\n      if (reg_tone.test(body[0])) {\n        this.tone = body[0].replace(reg_tone,'$2');\n      }\n    }\n    if (body.length >=2) {\n      if (reg_duration.test(body[1])) {\n        this.duration = parseInt(body[1].replace(reg_duration,'$2'), 10);\n      }\n    }\n  }\n\n  if (!this.duration) {\n    this.duration = C.DEFAULT_DURATION;\n  }\n\n  if (!this.tone) {\n    debug('invalid INFO DTMF received, discarded');\n  } else {\n    this.owner.newDTMF({\n      originator: 'remote',\n      dtmf: this,\n      request: request\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/RTCSession/ReferNotifier.js":"module.exports = ReferNotifier;\n\n\nvar C = {\n  event_type: 'refer',\n  body_type: 'message/sipfrag;version=2.0',\n  expires: 300\n};\n\n/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP:RTCSession:ReferNotifier');\nvar JsSIP_C = require('../Constants');\nvar RTCSession_Request = require('./Request');\n\n\nfunction ReferNotifier(session, id, expires) {\n  this.session = session;\n  this.id = id;\n  this.expires = expires || C.expires;\n  this.active = true;\n\n  // The creation of a Notifier results in an immediate NOTIFY\n  this.notify(100);\n}\n\nReferNotifier.prototype.notify = function(code, reason) {\n  debug('notify()');\n\n  var state,\n      self = this;\n\n  if (this.active === false) {\n    return;\n  }\n\n  reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n\n  if (code >= 200) {\n    state = 'terminated;reason=noresource';\n  } else {\n    state = 'active;expires='+ this.expires;\n  }\n\n  // put this in a try/catch block\n  var request = new RTCSession_Request(this.session, JsSIP_C.NOTIFY);\n  request.send({\n    extraHeaders: [\n      'Event: '+ C.event_type +';id='+ self.id,\n      'Subscription-State: '+ state,\n      'Content-Type: '+ C.body_type\n    ],\n    body: 'SIP/2.0 ' + code + ' ' + reason,\n    eventHandlers: {\n      // if a negative response is received, subscription is canceled\n      onErrorResponse: function() { self.active = false; }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/RTCSession/ReferSubscriber.js":"module.exports = ReferSubscriber;\n\n\nvar C = {\n  expires: 120\n};\n\n/**\n * Dependencies.\n */\nvar util = require('util');\nvar events = require('events');\nvar debug = require('debug')('JsSIP:RTCSession:ReferSubscriber');\nvar JsSIP_C = require('../Constants');\nvar Grammar = require('../Grammar');\nvar RTCSession_Request = require('./Request');\n\n\nfunction ReferSubscriber(session) {\n  this.session = session;\n  this.timer = null;\n  // Instance of REFER OutgoingRequest\n  this.outgoingRequest = null;\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(ReferSubscriber, events.EventEmitter);\n\nReferSubscriber.prototype.sendRefer = function(target, options) {\n  debug('sendRefer()');\n\n  var extraHeaders, eventHandlers, referTo,\n      replaces = null,\n      self = this;\n\n  // Get REFER options\n  options = options || {};\n  extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n  eventHandlers = options.eventHandlers || {};\n\n  // Set event handlers\n  for (var event in eventHandlers) {\n    this.on(event, eventHandlers[event]);\n  }\n\n  // Replaces URI header field\n  if (options.replaces) {\n    replaces = options.replaces.request.call_id;\n    replaces += ';to-tag='+ options.replaces.to_tag;\n    replaces += ';from-tag='+ options.replaces.from_tag;\n\n    replaces = encodeURIComponent(replaces);\n  }\n\n  // Refer-To header field\n  referTo = 'Refer-To: <'+ target + (replaces?'?Replaces='+ replaces:'') +'>';\n\n  extraHeaders.push(referTo);\n\n  var request = new RTCSession_Request(this.session, JsSIP_C.REFER);\n\n  this.timer = setTimeout(function() {\n    removeSubscriber.call(self);\n  }, C.expires * 1000);\n\n  request.send({\n    extraHeaders: extraHeaders,\n    eventHandlers: {\n      onSuccessResponse: function(response) {\n        self.emit('requestSucceeded', {\n          response: response\n        });\n      },\n      onErrorResponse: function(response) {\n        self.emit('requestFailed', {\n          response: response,\n          cause: JsSIP_C.causes.REJECTED\n        });\n      },\n      onTransportError: function() {\n        removeSubscriber.call(self);\n        self.emit('requestFailed', {\n          response: null,\n          cause: JsSIP_C.causes.CONNECTION_ERROR\n        });\n      },\n      onRequestTimeout: function() {\n        removeSubscriber.call(self);\n        self.emit('requestFailed', {\n          response: null,\n          cause: JsSIP_C.causes.REQUEST_TIMEOUT\n        });\n      },\n      onDialogError: function() {\n        removeSubscriber.call(self);\n        self.emit('requestFailed', {\n          response: null,\n          cause: JsSIP_C.causes.DIALOG_ERROR\n        });\n      }\n    }\n  });\n\n  this.outgoingRequest = request.outgoingRequest;\n};\n\nReferSubscriber.prototype.receiveNotify = function(request) {\n  debug('receiveNotify()');\n\n  var status_line;\n\n  if (!request.body) {\n    return;\n  }\n\n  status_line = Grammar.parse(request.body, 'Status_Line');\n\n  if(status_line === -1) {\n    debug('receiveNotify() | error parsing NOTIFY body: \"' + request.body + '\"');\n    return;\n  }\n\n  switch(true) {\n    case /^100$/.test(status_line.status_code):\n      this.emit('trying', {\n        request: request,\n        status_line: status_line\n      });\n      break;\n\n    case /^1[0-9]{2}$/.test(status_line.status_code):\n      this.emit('progress', {\n        request: request,\n        status_line: status_line\n      });\n      break;\n\n    case /^2[0-9]{2}$/.test(status_line.status_code):\n      removeSubscriber.call(this);\n      this.emit('accepted', {\n        request: request,\n        status_line: status_line\n      });\n      break;\n\n    default:\n      removeSubscriber.call(this);\n      this.emit('failed', {\n        request: request,\n        status_line: status_line\n      });\n      break;\n  }\n};\n\n// remove refer subscriber from the session\nfunction removeSubscriber() {\n  console.log('removeSubscriber()');\n  clearTimeout(this.timer);\n  this.session.referSubscriber = null;\n}\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Message.js":"module.exports = Message;\n\n\n/**\n * Dependencies.\n */\nvar util = require('util');\nvar events = require('events');\nvar JsSIP_C = require('./Constants');\nvar SIPMessage = require('./SIPMessage');\nvar Utils = require('./Utils');\nvar RequestSender = require('./RequestSender');\nvar Transactions = require('./Transactions');\nvar Exceptions = require('./Exceptions');\n\n\nfunction Message(ua) {\n  this.ua = ua;\n\n  // Custom message empty object for high level use\n  this.data = {};\n\n  events.EventEmitter.call(this);\n}\n\nutil.inherits(Message, events.EventEmitter);\n\n\nMessage.prototype.send = function(target, body, options) {\n  var request_sender, event, contentType, eventHandlers, extraHeaders,\n    originalTarget = target;\n\n  if (target === undefined || body === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // Check target validity\n  target = this.ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: '+ originalTarget);\n  }\n\n  // Get call options\n  options = options || {};\n  extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [];\n  eventHandlers = options.eventHandlers || {};\n  contentType = options.contentType || 'text/plain';\n\n  this.content_type = contentType;\n\n  // Set event handlers\n  for (event in eventHandlers) {\n    this.on(event, eventHandlers[event]);\n  }\n\n  this.closed = false;\n  this.ua.applicants[this] = this;\n\n  extraHeaders.push('Content-Type: '+ contentType);\n\n  this.request = new SIPMessage.OutgoingRequest(JsSIP_C.MESSAGE, target, this.ua, null, extraHeaders);\n\n  if(body) {\n    this.request.body = body;\n    this.content = body;\n  } else {\n    this.content = null;\n  }\n\n  request_sender = new RequestSender(this, this.ua);\n\n  this.newMessage('local', this.request);\n\n  request_sender.send();\n};\n\nMessage.prototype.receiveResponse = function(response) {\n  var cause;\n\n  if(this.closed) {\n    return;\n  }\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Ignore provisional responses.\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      delete this.ua.applicants[this];\n      this.emit('succeeded', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n\n    default:\n      delete this.ua.applicants[this];\n      cause = Utils.sipErrorCause(response.status_code);\n      this.emit('failed', {\n        originator: 'remote',\n        response: response,\n        cause: cause\n      });\n      break;\n  }\n};\n\n\nMessage.prototype.onRequestTimeout = function() {\n  if(this.closed) {\n    return;\n  }\n  this.emit('failed', {\n    originator: 'system',\n    cause: JsSIP_C.causes.REQUEST_TIMEOUT\n  });\n};\n\nMessage.prototype.onTransportError = function() {\n  if(this.closed) {\n    return;\n  }\n  this.emit('failed', {\n    originator: 'system',\n    cause: JsSIP_C.causes.CONNECTION_ERROR\n  });\n};\n\nMessage.prototype.close = function() {\n  this.closed = true;\n  delete this.ua.applicants[this];\n};\n\nMessage.prototype.init_incoming = function(request) {\n  var transaction;\n\n  this.request = request;\n  this.content_type = request.getHeader('Content-Type');\n\n  if (request.body) {\n    this.content = request.body;\n  } else {\n    this.content = null;\n  }\n\n  this.newMessage('remote', request);\n\n  transaction = this.ua.transactions.nist[request.via_branch];\n\n  if (transaction && (transaction.state === Transactions.C.STATUS_TRYING || transaction.state === Transactions.C.STATUS_PROCEEDING)) {\n    request.reply(200);\n  }\n};\n\n/**\n * Accept the incoming Message\n * Only valid for incoming Messages\n */\nMessage.prototype.accept = function(options) {\n  options = options || {};\n\n  var\n    extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [],\n    body = options.body;\n\n  if (this.direction !== 'incoming') {\n    throw new Exceptions.NotSupportedError('\"accept\" not supported for outgoing Message');\n  }\n\n  this.request.reply(200, null, extraHeaders, body);\n};\n\n/**\n * Reject the incoming Message\n * Only valid for incoming Messages\n */\nMessage.prototype.reject = function(options) {\n  options = options || {};\n\n  var\n    status_code = options.status_code || 480,\n    reason_phrase = options.reason_phrase,\n    extraHeaders = options.extraHeaders && options.extraHeaders.slice() || [],\n    body = options.body;\n\n  if (this.direction !== 'incoming') {\n    throw new Exceptions.NotSupportedError('\"reject\" not supported for outgoing Message');\n  }\n\n  if (status_code < 300 || status_code >= 700) {\n    throw new TypeError('Invalid status_code: '+ status_code);\n  }\n\n  this.request.reply(status_code, reason_phrase, extraHeaders, body);\n};\n\n/**\n * Internal Callbacks\n */\n\nMessage.prototype.newMessage = function(originator, request) {\n  if (originator === 'remote') {\n    this.direction = 'incoming';\n    this.local_identity = request.to;\n    this.remote_identity = request.from;\n  } else if (originator === 'local'){\n    this.direction = 'outgoing';\n    this.local_identity = request.from;\n    this.remote_identity = request.to;\n  }\n\n  this.ua.newMessage({\n    originator: originator,\n    message: this,\n    request: request\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Transport.js":"module.exports = Transport;\n\n/**\n * Dependencies.\n */\nvar Socket = require('./Socket');\nvar debug = require('debug')('JsSIP:Transport');\nvar debugerror = require('debug')('JsSIP:ERROR:Transport');\n\n/**\n * Constants\n */\nvar C = {\n  // Transport status\n  STATUS_CONNECTED:           0,\n  STATUS_CONNECTING:          1,\n  STATUS_DISCONNECTED:        2,\n\n  // Socket status\n  SOCKET_STATUS_READY:        0,\n  SOCKET_STATUS_ERROR:        1,\n\n  // Recovery options\n  recovery_options: {\n    min_interval: 2, // minimum interval in seconds between recover attempts\n    max_interval: 30 // maximum interval in seconds between recover attempts\n  }\n};\n\n/*\n * Manages one or multiple JsSIP.Socket instances.\n * Is reponsible for transport recovery logic among all socket instances.\n *\n * @socket JsSIP::Socket instance\n */\n\nfunction Transport(sockets, recovery_options) {\n  debug('new()');\n\n  this.status = C.STATUS_DISCONNECTED;\n\n  // current socket\n  this.socket = null;\n\n  // socket collection\n  this.sockets = [];\n\n  this.recovery_options = recovery_options || C.recovery_options;\n  this.recover_attempts = 0;\n  this.recovery_timer = null;\n\n  this.close_requested = false;\n\n  if (typeof sockets === 'undefined') {\n    throw new TypeError('Invalid argument.' +\n                        ' undefined \\'sockets\\' argument');\n  }\n\n  if (!(sockets instanceof Array)) {\n    sockets = [ sockets ];\n  }\n\n  sockets.forEach(function(socket) {\n    if (!Socket.isSocket(socket.socket)) {\n      throw new TypeError('Invalid argument.' +\n                          ' invalid \\'JsSIP.Socket\\' instance');\n    }\n\n    if (socket.weight && !Number(socket.weight)) {\n      throw new TypeError('Invalid argument.' +\n                          ' \\'weight\\' attribute is not a number');\n    }\n\n    this.sockets.push({\n      socket: socket.socket,\n      weight: socket.weight || 0,\n      status: C.SOCKET_STATUS_READY\n    });\n  }, this);\n\n  // read only properties\n  Object.defineProperties(this, {\n    via_transport:   { get: function() { return this.socket.via_transport; } },\n    url:      { get: function() { return this.socket.url;       } },\n    sip_uri:  { get: function() { return this.socket.sip_uri;   } }\n  });\n\n  // get the socket with higher weight\n  getSocket.call(this);\n}\n\n/**\n * Instance Methods\n */\n\nTransport.prototype.connect = function() {\n  debug('connect()');\n\n  if (this.isConnected()) {\n    debug('Transport is already connected');\n    return;\n  } else if (this.isConnecting()) {\n    debug('Transport is connecting');\n    return;\n  }\n\n  this.close_requested = false;\n  this.status = C.STATUS_CONNECTING;\n  this.onconnecting({ socket:this.socket, attempts:this.recover_attempts });\n\n  if (!this.close_requested) {\n    // bind socket event callbacks\n    this.socket.onconnect     = onConnect.bind(this);\n    this.socket.ondisconnect  = onDisconnect.bind(this);\n    this.socket.ondata        = onData.bind(this);\n\n    this.socket.connect();\n  }\n\n  return;\n};\n\nTransport.prototype.disconnect = function() {\n  debug('close()');\n\n  this.close_requested = true;\n  this.recover_attempts = 0;\n  this.status = C.STATUS_DISCONNECTED;\n\n  // clear recovery_timer\n  if (this.recovery_timer !== null) {\n    clearTimeout(this.recovery_timer);\n    this.recovery_timer = null;\n  }\n\n  // unbind socket event callbacks\n  this.socket.onconnect     = function() {};\n  this.socket.ondisconnect  = function() {};\n  this.socket.ondata        = function() {};\n\n  this.socket.disconnect();\n  this.ondisconnect();\n};\n\nTransport.prototype.send = function(data) {\n  debug('send()');\n\n  if (!this.isConnected()) {\n    debugerror('unable to send message, transport is not connected');\n    return false;\n  }\n\n  var message = data.toString();\n\n  debug('sending message:\\n\\n' + message + '\\n');\n  return this.socket.send(message);\n};\n\nTransport.prototype.isConnected = function() {\n  return this.status === C.STATUS_CONNECTED;\n};\n\nTransport.prototype.isConnecting = function() {\n  return this.status === C.STATUS_CONNECTING;\n};\n\n/**\n * Socket Event Handlers\n */\n\nfunction onConnect() {\n  this.recover_attempts = 0;\n  this.status = C.STATUS_CONNECTED;\n\n  // clear recovery_timer\n  if (this.recovery_timer !== null) {\n    clearTimeout(this.recovery_timer);\n    this.recovery_timer = null;\n  }\n\n  this.onconnect( {socket:this} );\n}\n\nfunction onDisconnect(error, code, reason) {\n  this.status = C.STATUS_DISCONNECTED;\n  this.ondisconnect({ socket:this.socket, error:error, code:code, reason:reason });\n\n  if (this.close_requested) {\n    return;\n  }\n\n  // update socket status\n  else {\n    this.sockets.forEach(function(socket) {\n      if (this.socket === socket.socket) {\n        socket.status = C.SOCKET_STATUS_ERROR;\n      }\n    }, this);\n  }\n\n  reconnect.call(this, error);\n}\n\nfunction onData(data) {\n  // CRLF Keep Alive response from server. Ignore it.\n  if(data === '\\r\\n') {\n    debug('received message with CRLF Keep Alive response');\n    return;\n  }\n\n  // binary message.\n  else if (typeof data !== 'string') {\n    try {\n      data = String.fromCharCode.apply(null, new Uint8Array(data));\n    } catch(evt) {\n      debug('received binary message failed to be converted into string,' +\n            ' message discarded');\n      return;\n    }\n\n    debug('received binary message:\\n\\n' + data + '\\n');\n  }\n\n  // text message.\n  else {\n    debug('received text message:\\n\\n' + data + '\\n');\n  }\n\n  this.ondata({ transport:this, message:data });\n}\n\nfunction reconnect() {\n  var k,\n  self = this;\n\n  this.recover_attempts+=1;\n\n  k = Math.floor((Math.random() * Math.pow(2,this.recover_attempts)) +1);\n\n  if (k < this.recovery_options.min_interval) {\n    k = this.recovery_options.min_interval;\n  }\n\n  else if (k > this.recovery_options.max_interval) {\n    k = this.recovery_options.max_interval;\n  }\n\n  debug('reconnection attempt: '+ this.recover_attempts +\n        '. next connection attempt in '+ k +' seconds');\n\n  this.recovery_timer = setTimeout(function() {\n    if (!self.close_requested && !(self.isConnected() || self.isConnecting())) {\n      // get the next available socket with higher weight\n      getSocket.call(self);\n\n      // connect the socket\n      self.connect();\n    }\n  }, k * 1000);\n}\n\n/**\n * get the next available socket with higher weight\n */\nfunction getSocket() {\n\n  var candidates = [];\n\n  this.sockets.forEach(function(socket) {\n    if (socket.status === C.SOCKET_STATUS_ERROR) {\n      return; // continue the array iteration\n    } else if (candidates.length === 0) {\n      candidates.push(socket);\n    } else if (socket.weight > candidates[0].weight) {\n      candidates = [socket];\n    } else if (socket.weight === candidates[0].weight) {\n      candidates.push(socket);\n    }\n  });\n\n  if (candidates.length === 0) {\n    // all sockets have failed. reset sockets status\n    this.sockets.forEach(function(socket) {\n      socket.status = C.SOCKET_STATUS_READY;\n    });\n\n    // get next available socket\n    getSocket.call(this);\n    return;\n  }\n\n  var idx = Math.floor((Math.random()* candidates.length));\n  this.socket = candidates[idx].socket;\n}\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Socket.js":"module.exports = Socket;\n\n/**\n * Interface documentation: http://jssip.net/documentation/$last_version/api/socket/\n *\n * interface Socket {\n *  attribute String via_transport\n *  attribute String url\n *  attribute String sip_uri\n *\n *  method connect();\n *  method disconnect();\n *  method send(data);\n *\n *  attribute EventHandler onconnect\n *  attribute EventHandler ondisconnect\n *  attribute EventHandler ondata\n * }\n *\n */\n\n\n/**\n * Dependencies.\n */\nvar Utils = require('./Utils');\nvar Grammar = require('./Grammar');\nvar debugerror = require('debug')('JsSIP:ERROR:Socket');\ndebugerror.log = console.warn.bind(console);\n\nfunction Socket() {}\n\nSocket.isSocket = function(socket) {\n  // Ignore if an array is given\n  if (Array.isArray(socket)) {\n    return false;\n  }\n\n  if (typeof socket === 'undefined') {\n    debugerror('undefined JsSIP.Socket instance');\n    return false;\n  }\n\n  // Check Properties\n  try {\n    if (!Utils.isString(socket.url)) {\n      debugerror('missing or invalid JsSIP.Socket url property');\n      throw new Error();\n    }\n\n    if (!Utils.isString(socket.via_transport)) {\n      debugerror('missing or invalid JsSIP.Socket via_transport property');\n      throw new Error();\n    }\n\n    if (Grammar.parse(socket.sip_uri, 'SIP_URI') === -1) {\n      debugerror('missing or invalid JsSIP.Socket sip_uri property');\n      throw new Error();\n    }\n  } catch(e) {\n    return false;\n  }\n\n  // Check Methods\n  try {\n    ['connect', 'disconnect', 'send'].forEach(function(method) {\n      if (!Utils.isFunction(socket[method])) {\n        debugerror('missing or invalid JsSIP.Socket method: ' + method);\n        throw new Error();\n      }\n    });\n  } catch(e) {\n    return false;\n  }\n\n  return true;\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Parser.js":"var Parser = {};\n\nmodule.exports = Parser;\n\n\n/**\n * Dependencies.\n */\nvar debugerror = require('debug')('JsSIP:ERROR:Parser');\ndebugerror.log = console.warn.bind(console);\nvar Grammar = require('./Grammar');\nvar SIPMessage = require('./SIPMessage');\n\n\n/**\n * Extract and parse every header of a SIP message.\n */\nfunction getHeader(data, headerStart) {\n  var\n    // 'start' position of the header.\n    start = headerStart,\n    // 'end' position of the header.\n    end = 0,\n    // 'partial end' position of the header.\n    partialEnd = 0;\n\n  //End of message.\n  if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\n    return -2;\n  }\n\n  while(end === 0) {\n    // Partial End of Header.\n    partialEnd = data.indexOf('\\r\\n', start);\n\n    // 'indexOf' returns -1 if the value to be found never occurs.\n    if (partialEnd === -1) {\n      return partialEnd;\n    }\n\n    if(!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) && data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\n      // Not the end of the message. Continue from the next position.\n      start = partialEnd + 2;\n    } else {\n      end = partialEnd;\n    }\n  }\n\n  return end;\n}\n\nfunction parseHeader(message, data, headerStart, headerEnd) {\n  var header, idx, length, parsed,\n    hcolonIndex = data.indexOf(':', headerStart),\n    headerName = data.substring(headerStart, hcolonIndex).trim(),\n    headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\n\n  // If header-field is well-known, parse it.\n  switch(headerName.toLowerCase()) {\n    case 'via':\n    case 'v':\n      message.addHeader('via', headerValue);\n      if(message.getHeaders('via').length === 1) {\n        parsed = message.parseHeader('Via');\n        if(parsed) {\n          message.via = parsed;\n          message.via_branch = parsed.branch;\n        }\n      } else {\n        parsed = 0;\n      }\n      break;\n    case 'from':\n    case 'f':\n      message.setHeader('from', headerValue);\n      parsed = message.parseHeader('from');\n      if(parsed) {\n        message.from = parsed;\n        message.from_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'to':\n    case 't':\n      message.setHeader('to', headerValue);\n      parsed = message.parseHeader('to');\n      if(parsed) {\n        message.to = parsed;\n        message.to_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'record-route':\n      parsed = Grammar.parse(headerValue, 'Record_Route');\n\n      if (parsed === -1) {\n        parsed = undefined;\n      } else {\n        length = parsed.length;\n        for (idx = 0; idx < length; idx++) {\n          header = parsed[idx];\n          message.addHeader('record-route', headerValue.substring(header.possition, header.offset));\n          message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;\n        }\n      }\n      break;\n    case 'call-id':\n    case 'i':\n      message.setHeader('call-id', headerValue);\n      parsed = message.parseHeader('call-id');\n      if(parsed) {\n        message.call_id = headerValue;\n      }\n      break;\n    case 'contact':\n    case 'm':\n      parsed = Grammar.parse(headerValue, 'Contact');\n\n      if (parsed === -1) {\n        parsed = undefined;\n      } else {\n        length = parsed.length;\n        for (idx = 0; idx < length; idx++) {\n          header = parsed[idx];\n          message.addHeader('contact', headerValue.substring(header.possition, header.offset));\n          message.headers.Contact[message.getHeaders('contact').length - 1].parsed = header.parsed;\n        }\n      }\n      break;\n    case 'content-length':\n    case 'l':\n      message.setHeader('content-length', headerValue);\n      parsed = message.parseHeader('content-length');\n      break;\n    case 'content-type':\n    case 'c':\n      message.setHeader('content-type', headerValue);\n      parsed = message.parseHeader('content-type');\n      break;\n    case 'cseq':\n      message.setHeader('cseq', headerValue);\n      parsed = message.parseHeader('cseq');\n      if(parsed) {\n        message.cseq = parsed.value;\n      }\n      if(message instanceof SIPMessage.IncomingResponse) {\n        message.method = parsed.method;\n      }\n      break;\n    case 'max-forwards':\n      message.setHeader('max-forwards', headerValue);\n      parsed = message.parseHeader('max-forwards');\n      break;\n    case 'www-authenticate':\n      message.setHeader('www-authenticate', headerValue);\n      parsed = message.parseHeader('www-authenticate');\n      break;\n    case 'proxy-authenticate':\n      message.setHeader('proxy-authenticate', headerValue);\n      parsed = message.parseHeader('proxy-authenticate');\n      break;\n    case 'session-expires':\n    case 'x':\n      message.setHeader('session-expires', headerValue);\n      parsed = message.parseHeader('session-expires');\n      if (parsed) {\n        message.session_expires = parsed.expires;\n        message.session_expires_refresher = parsed.refresher;\n      }\n      break;\n    case 'refer-to':\n    case 'r':\n      message.setHeader('refer-to', headerValue);\n      parsed = message.parseHeader('refer-to');\n      if(parsed) {\n        message.refer_to = parsed;\n      }\n      break;\n    case 'replaces':\n      message.setHeader('replaces', headerValue);\n      parsed = message.parseHeader('replaces');\n      if(parsed) {\n        message.replaces = parsed;\n      }\n      break;\n    case 'event':\n    case 'o':\n      message.setHeader('event', headerValue);\n      parsed = message.parseHeader('event');\n      if(parsed) {\n        message.event = parsed;\n      }\n      break;\n    default:\n      // Do not parse this header.\n      message.setHeader(headerName, headerValue);\n      parsed = 0;\n  }\n\n  if (parsed === undefined) {\n    return {\n      error: 'error parsing header \"'+ headerName +'\"'\n    };\n  } else {\n    return true;\n  }\n}\n\n\n/**\n * Parse SIP Message\n */\nParser.parseMessage = function(data, ua) {\n  var message, firstLine, contentLength, bodyStart, parsed,\n    headerStart = 0,\n    headerEnd = data.indexOf('\\r\\n');\n\n  if(headerEnd === -1) {\n    debugerror('parseMessage() | no CRLF found, not a SIP message');\n    return;\n  }\n\n  // Parse first line. Check if it is a Request or a Reply.\n  firstLine = data.substring(0, headerEnd);\n  parsed = Grammar.parse(firstLine, 'Request_Response');\n\n  if(parsed === -1) {\n    debugerror('parseMessage() | error parsing first line of SIP message: \"' + firstLine + '\"');\n    return;\n  } else if(!parsed.status_code) {\n    message = new SIPMessage.IncomingRequest(ua);\n    message.method = parsed.method;\n    message.ruri = parsed.uri;\n  } else {\n    message = new SIPMessage.IncomingResponse();\n    message.status_code = parsed.status_code;\n    message.reason_phrase = parsed.reason_phrase;\n  }\n\n  message.data = data;\n  headerStart = headerEnd + 2;\n\n  /* Loop over every line in data. Detect the end of each header and parse\n  * it or simply add to the headers collection.\n  */\n  while(true) {\n    headerEnd = getHeader(data, headerStart);\n\n    // The SIP message has normally finished.\n    if(headerEnd === -2) {\n      bodyStart = headerStart + 2;\n      break;\n    }\n    // data.indexOf returned -1 due to a malformed message.\n    else if(headerEnd === -1) {\n      debugerror('parseMessage() | malformed message');\n      return;\n    }\n\n    parsed = parseHeader(message, data, headerStart, headerEnd);\n\n    if(parsed !== true) {\n      debugerror('parseMessage() |', parsed.error);\n      return;\n    }\n\n    headerStart = headerEnd + 2;\n  }\n\n  /* RFC3261 18.3.\n   * If there are additional bytes in the transport packet\n   * beyond the end of the body, they MUST be discarded.\n   */\n  if(message.hasHeader('content-length')) {\n    contentLength = message.getHeader('content-length');\n    message.body = data.substr(bodyStart, contentLength);\n  } else {\n    message.body = data.substring(bodyStart);\n  }\n\n  return message;\n};\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/sanityCheck.js":"module.exports = sanityCheck;\n\n\n/**\n * Dependencies.\n */\nvar debug = require('debug')('JsSIP:sanityCheck');\nvar JsSIP_C = require('./Constants');\nvar SIPMessage = require('./SIPMessage');\nvar Utils = require('./Utils');\n\n\nvar message, ua, transport,\n  requests = [],\n  responses = [],\n  all = [];\n\n\nrequests.push(rfc3261_8_2_2_1);\nrequests.push(rfc3261_16_3_4);\nrequests.push(rfc3261_18_3_request);\nrequests.push(rfc3261_8_2_2_2);\n\nresponses.push(rfc3261_8_1_3_3);\nresponses.push(rfc3261_18_3_response);\n\nall.push(minimumHeaders);\n\n\nfunction sanityCheck(m, u, t) {\n  var len, pass;\n\n  message = m;\n  ua = u;\n  transport = t;\n\n  len = all.length;\n  while(len--) {\n    pass = all[len](message);\n    if(pass === false) {\n      return false;\n    }\n  }\n\n  if(message instanceof SIPMessage.IncomingRequest) {\n    len = requests.length;\n    while(len--) {\n      pass = requests[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  else if(message instanceof SIPMessage.IncomingResponse) {\n    len = responses.length;\n    while(len--) {\n      pass = responses[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  //Everything is OK\n  return true;\n}\n\n\n/*\n * Sanity Check for incoming Messages\n *\n * Requests:\n *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme\n *  - _rfc3261_16_3_4_ Receive a Request already sent by us\n *   Does not look at via sent-by but at jssip_id, which is inserted as\n *   a prefix in all initial requests generated by the ua\n *  - _rfc3261_18_3_request_ Body Content-Length\n *  - _rfc3261_8_2_2_2_ Merged Requests\n *\n * Responses:\n *  - _rfc3261_8_1_3_3_ Multiple Via headers\n *  - _rfc3261_18_3_response_ Body Content-Length\n *\n * All:\n *  - Minimum headers in a SIP message\n */\n\n// Sanity Check functions for requests\nfunction rfc3261_8_2_2_1() {\n  if(message.s('to').uri.scheme !== 'sip') {\n    reply(416);\n    return false;\n  }\n}\n\nfunction rfc3261_16_3_4() {\n  if(!message.to_tag) {\n    if(message.call_id.substr(0, 5) === ua.configuration.jssip_id) {\n      reply(482);\n      return false;\n    }\n  }\n}\n\nfunction rfc3261_18_3_request() {\n  var len = Utils.str_utf8_length(message.body),\n  contentLength = message.getHeader('content-length');\n\n  if(len < contentLength) {\n    reply(400);\n    return false;\n  }\n}\n\nfunction rfc3261_8_2_2_2() {\n  var tr, idx,\n    fromTag = message.from_tag,\n    call_id = message.call_id,\n    cseq = message.cseq;\n\n  // Accept any in-dialog request.\n  if(message.to_tag) {\n    return;\n  }\n\n  // INVITE request.\n  if (message.method === JsSIP_C.INVITE) {\n    // If the branch matches the key of any IST then assume it is a retransmission\n    // and ignore the INVITE.\n    // TODO: we should reply the last response.\n    if (ua.transactions.ist[message.via_branch]) {\n      return false;\n    }\n    // Otherwise check whether it is a merged request.\n    else {\n      for(idx in ua.transactions.ist) {\n        tr = ua.transactions.ist[idx];\n        if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n          reply(482);\n          return false;\n        }\n      }\n    }\n  }\n  // Non INVITE request.\n  else {\n    // If the branch matches the key of any NIST then assume it is a retransmission\n    // and ignore the request.\n    // TODO: we should reply the last response.\n    if (ua.transactions.nist[message.via_branch]) {\n      return false;\n    }\n    // Otherwise check whether it is a merged request.\n    else {\n      for(idx in ua.transactions.nist) {\n        tr = ua.transactions.nist[idx];\n        if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n          reply(482);\n          return false;\n        }\n      }\n    }\n  }\n}\n\n// Sanity Check functions for responses\nfunction rfc3261_8_1_3_3() {\n  if(message.getHeaders('via').length > 1) {\n    debug('more than one Via header field present in the response, dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_3_response() {\n  var\n    len = Utils.str_utf8_length(message.body),\n    contentLength = message.getHeader('content-length');\n\n    if(len < contentLength) {\n      debug('message body length is lower than the value in Content-Length header field, dropping the response');\n      return false;\n    }\n}\n\n// Sanity Check functions for requests and responses\nfunction minimumHeaders() {\n  var\n    mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'],\n    idx = mandatoryHeaders.length;\n\n  while(idx--) {\n    if(!message.hasHeader(mandatoryHeaders[idx])) {\n      debug('missing mandatory header field : ' + mandatoryHeaders[idx] + ', dropping the response');\n      return false;\n    }\n  }\n}\n\n// Reply\nfunction reply(status_code) {\n  var to,\n    response = 'SIP/2.0 ' + status_code + ' ' + JsSIP_C.REASON_PHRASE[status_code] + '\\r\\n',\n    vias = message.getHeaders('via'),\n    length = vias.length,\n    idx = 0;\n\n  for(idx; idx < length; idx++) {\n    response += 'Via: ' + vias[idx] + '\\r\\n';\n  }\n\n  to = message.getHeader('To');\n\n  if(!message.to_tag) {\n    to += ';tag=' + Utils.newTag();\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + message.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + message.call_id + '\\r\\n';\n  response += 'CSeq: ' + message.cseq + ' ' + message.method + '\\r\\n';\n  response += '\\r\\n';\n\n  transport.send(response);\n}\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/WebSocketInterface.js":"module.exports = WebSocketInterface;\n\n/**\n * Dependencies.\n */\nvar Grammar = require('./Grammar');\nvar debug = require('debug')('JsSIP:WebSocketInterface');\nvar debugerror = require('debug')('JsSIP:ERROR:WebSocketInterface');\ndebugerror.log = console.warn.bind(console);\n\nfunction WebSocketInterface(url) {\n  debug('new() [url:\"%s\"]', url);\n\n  var sip_uri = null;\n  var via_transport = null;\n\n  this.ws = null;\n\n  // setting the 'scheme' alters the sip_uri too (used in SIP Route header field)\n  Object.defineProperties(this, {\n    via_transport: {\n      get: function() { return via_transport; },\n      set: function(transport) {\n        via_transport = transport.toUpperCase();\n      }\n    },\n    sip_uri:  { get: function() { return sip_uri; }},\n    url:      { get: function() { return url; }}\n  });\n\n  var parsed_url = Grammar.parse(url, 'absoluteURI');\n\n  if (parsed_url === -1) {\n    debugerror('invalid WebSocket URI: ' + url);\n    throw new TypeError('Invalid argument: ' + url);\n  } else if(parsed_url.scheme !== 'wss' && parsed_url.scheme !== 'ws') {\n    debugerror('invalid WebSocket URI scheme: ' + parsed_url.scheme);\n    throw new TypeError('Invalid argument: ' + url);\n  } else {\n    sip_uri = 'sip:' + parsed_url.host +\n      (parsed_url.port ? ':' + parsed_url.port : '') + ';transport=ws';\n    this.via_transport = parsed_url.scheme;\n  }\n}\n\nWebSocketInterface.prototype.connect = function () {\n  debug('connect()');\n\n  if (this.isConnected()) {\n    debug('WebSocket ' + this.url + ' is already connected');\n    return;\n  } else if (this.isConnecting()) {\n    debug('WebSocket ' + this.url + ' is connecting');\n    return;\n  }\n\n  if (this.ws) {\n    this.disconnect();\n  }\n\n  debug('connecting to WebSocket ' + this.url);\n\n  try {\n    this.ws = new WebSocket(this.url, 'sip');\n\n    this.ws.binaryType = 'arraybuffer';\n\n    this.ws.onopen    = onOpen.bind(this);\n    this.ws.onclose   = onClose.bind(this);\n    this.ws.onmessage = onMessage.bind(this);\n    this.ws.onerror   = onError.bind(this);\n  } catch(e) {\n    onError.call(this, e);\n  }\n};\n\nWebSocketInterface.prototype.disconnect = function() {\n  debug('disconnect()');\n\n  if (this.ws) {\n    // unbind websocket event callbacks\n    this.ws.onopen    = function() {};\n    this.ws.onclose   = function() {};\n    this.ws.onmessage = function() {};\n    this.ws.onerror   = function() {};\n\n    this.ws.close();\n    this.ws = null;\n  }\n};\n\nWebSocketInterface.prototype.send = function(message) {\n  debug('send()');\n\n  if (this.isConnected()) {\n    this.ws.send(message);\n    return true;\n  } else {\n    debugerror('unable to send message, WebSocket is not open');\n    return false;\n  }\n};\n\nWebSocketInterface.prototype.isConnected = function() {\n  return this.ws && this.ws.readyState === this.ws.OPEN;\n};\n\nWebSocketInterface.prototype.isConnecting = function() {\n  return this.ws && this.ws.readyState === this.ws.CONNECTING;\n};\n\n\n/**\n * WebSocket Event Handlers\n */\n\nfunction onOpen() {\n  debug('WebSocket ' + this.url + ' connected');\n\n  this.onconnect();\n}\n\nfunction onClose(e) {\n  debug('WebSocket ' + this.url + ' closed');\n\n  if (e.wasClean === false) {\n    debug('WebSocket abrupt disconnection');\n  }\n\n  var data = {\n    socket: this,\n    error: !e.wasClean,\n    code: e.code,\n    reason: e.reason\n  };\n\n  this.ondisconnect(data);\n}\n\nfunction onMessage(e) {\n  debug('received WebSocket message');\n\n  this.ondata(e.data);\n}\n\nfunction onError(e) {\n  debugerror('WebSocket ' + this.url + ' error: '+ e);\n}\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/gulpfile.js":"/**\n * Dependencies.\n */\nvar browserify = require('browserify');\nvar vinyl_source_stream = require('vinyl-source-stream');\nvar vinyl_buffer = require('vinyl-buffer');\nvar gulp = require('gulp');\nvar gutil = require('gulp-util');\nvar jshint = require('gulp-jshint');\nvar uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar header = require('gulp-header');\nvar expect = require('gulp-expect-file');\nvar nodeunit = require('gulp-nodeunit-runner');\nvar fs = require('fs');\nvar path = require('path');\nvar exec = require('child_process').exec;\n\nconst PKG = require('./package.json');\n\n// gulp-header.\nconst BANNER = fs.readFileSync('banner.txt').toString();\nconst BANNER_OPTIONS = {\n\tpkg: PKG,\n\tcurrentYear: (new Date()).getFullYear()\n};\n\n// gulp-expect-file options.\nconst EXPECT_OPTIONS = {\n\tsilent: true,\n\terrorOnFailure: true,\n\tcheckRealFile: true\n};\n\n\ngulp.task('lint', function() {\n\tvar src = ['gulpfile.js', 'lib/**/*.js', 'test/**/*.js'];\n\n\treturn gulp.src(src)\n\t\t.pipe(expect(EXPECT_OPTIONS, src))\n\t\t.pipe(jshint('.jshintrc'))\n\t\t.pipe(jshint.reporter('jshint-stylish', {verbose: true}))\n\t\t.pipe(jshint.reporter('fail'));\n});\n\n\ngulp.task('browserify', function() {\n\treturn browserify([path.join(__dirname, PKG.main)], {\n\t\tstandalone: PKG.title\n\t}).bundle()\n\t\t.pipe(vinyl_source_stream(PKG.name + '.js'))\n\t\t.pipe(vinyl_buffer())\n\t\t.pipe(header(BANNER, BANNER_OPTIONS))\n\t\t.pipe(gulp.dest('dist/'));\n});\n\n\ngulp.task('uglify', function() {\n\tvar src = 'dist/' + PKG.name + '.js';\n\n\treturn gulp.src(src)\n\t\t.pipe(expect(EXPECT_OPTIONS, src))\n\t\t.pipe(uglify())\n\t\t.pipe(header(BANNER, BANNER_OPTIONS))\n\t\t.pipe(rename(PKG.name + '.min.js'))\n\t\t.pipe(gulp.dest('dist/'));\n});\n\n\ngulp.task('test', function() {\n\t// var src = 'test/*.js';\n\tvar src = [\n\t\t'test/test-classes.js',\n\t\t'test/test-normalizeTarget.js',\n\t\t'test/test-parser.js',\n\t\t'test/test-properties.js'\n\t\t// 'test/test-UA-no-WebRTC.js'\n\t];\n\n\treturn gulp.src(src)\n\t\t.pipe(expect(EXPECT_OPTIONS, src))\n\t\t.pipe(nodeunit({reporter: 'default'}));\n});\n\n\ngulp.task('grammar', function(cb) {\n\tvar local_pegjs = path.resolve('./node_modules/.bin/pegjs');\n\tvar Grammar_pegjs = path.resolve('lib/Grammar.pegjs');\n\tvar Grammar_js = path.resolve('lib/Grammar.js');\n\n\tgutil.log('grammar: compiling Grammar.pegjs into Grammar.js...');\n\n\texec(local_pegjs + ' ' + Grammar_pegjs + ' ' + Grammar_js,\n\t\tfunction(error, stdout, stderr) {\n\t\t\tif (error) {\n\t\t\t\tcb(new Error(stderr));\n\t\t\t}\n\t\t\tgutil.log('grammar: ' + gutil.colors.yellow('done'));\n\n\t\t\t// Modify the generated Grammar.js file with custom changes.\n\t\t\tgutil.log('grammar: applying custom changes to Grammar.js...');\n\n\t\t\tvar grammar = fs.readFileSync('lib/Grammar.js').toString();\n\t\t\tvar modified_grammar = grammar.replace(/throw new this\\.SyntaxError\\(([\\s\\S]*?)\\);([\\s\\S]*?)}([\\s\\S]*?)return result;/, 'new this.SyntaxError($1);\\n        return -1;$2}$3return data;');\n\n\t\t\tmodified_grammar = modified_grammar.replace(/\\s+$/mg, '');\n\t\t\tfs.writeFileSync('lib/Grammar.js', modified_grammar);\n\t\t\tgutil.log('grammar: ' + gutil.colors.yellow('done'));\n\t\t\tcb();\n\t\t}\n\t);\n});\n\n\ngulp.task('devel', gulp.series('grammar'));\ngulp.task('dist', gulp.series('lint', 'test', 'browserify', 'uglify'));\ngulp.task('default', gulp.series('dist'));\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/lib/Subscriber.js":"// JsSIP.Subscriber = function(ua) {\n//   this.logger = ua.getLogger('jssip.subscriber')\n// };\n\n// JsSIP.Subscriber.prototype = {\n//   initSubscriber: function(){\n//     this.N = null;\n//     this.subscriptions = {};\n//   },\n\n//   timer_N: function(){\n//     this.close();\n//   },\n\n//   close: function() {\n//     var subscription;\n\n//     if (this.state !== 'terminated') {\n//       this.logger.log('terminating Subscriber');\n\n//       this.state = 'terminated';\n//       window.clearTimeout(this.N);\n\n//       for (subscription in this.subscriptions) {\n//         this.subscriptions[subscription].unsubscribe();\n//       }\n\n//       //Delete subscriber from ua.sessions\n//       delete this.ua.sessions[this.id];\n\n//       this.onTerminate();\n//     }\n//   },\n\n//   onSubscriptionTerminate: function(subscription) {\n\n//     delete this.subscriptions[subscription.id];\n\n//     if (Object.keys(this.subscriptions).length === 0) {\n//       this.close();\n//     }\n//   },\n\n//   subscribe: function() {\n//     var subscriber, from_tag, expires;\n\n//     if (['notify_wait', 'pending', 'active', 'terminated'].indexOf(this.state) !== -1) {\n//       this.logger.error('subscription is already on');\n//       return;\n//     }\n\n//     subscriber = this;\n//     from_tag = JsSIP.Utils.newTag();\n\n//     new function() {\n//       this.request = subscriber.createSubscribeRequest(null,{from_tag:from_tag});\n//       var request_sender = new JsSIP.RequestSender(this, subscriber.ua);\n\n//       this.receiveResponse = function(response) {\n//         switch(true) {\n//           case /^1[0-9]{2}$/.test(response.status_code): // Ignore provisional responses.\n//             break;\n//           case /^2[0-9]{2}$/.test(response.status_code):\n//             expires = response.s('Expires');\n\n//             if (expires && expires <= subscriber.expires) {\n//               window.clearTimeout(subscriber.N);\n//               subscriber.N = window.setTimeout(\n//                 function() {subscriber.timer_N();},\n//                 (expires * 1000)\n//               );\n//               // Save route set and to tag for backwards compatibility (3265)\n//               subscriber.route_set_2xx =  response.getHeaderAll('record-route').reverse();\n//               subscriber.to_tag_2xx = response.s('to').tag;\n//               subscriber.initial_local_seqnum = parseInt(response.s('cseq').value,10);\n//             }\n//             else {\n//               subscriber.close();\n\n//               if (!expires) {\n//                 this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');\n//                 subscriber.onFailure(null, JsSIP.C.EXPIRES_HEADER_MISSING);\n//               } else {\n//                 this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the indicated in the request');\n//                 subscriber.onFailure(null, JsSIP.C.INVALID_EXPIRES_HEADER);\n//               }\n//             }\n//             break;\n//           default:\n//             subscriber.close();\n//             subscriber.onFailure(response,null);\n//             break;\n//         }\n//       };\n\n//       this.onRequestTimeout = function() {\n//         subscriber.onFailure(null, JsSIP.C.causes.REQUEST_TIMEOUT);\n//       };\n\n//       this.onTransportError = function() {\n//         subscriber.onFailure(null, JsSIP.C.causes.CONNECTION_ERROR);\n//       };\n\n//       this.send = function() {\n//         subscriber.id = this.request.headers['Call-ID'] + from_tag;\n//         subscriber.ua.sessions[subscriber.id] = subscriber;\n//         subscriber.state = 'notify_wait';\n//         subscriber.N = window.setTimeout(\n//           function() {subscriber.timer_N();},\n//           (JsSIP.Timers.T1 * 64)\n//         );\n//         request_sender.send();\n//       };\n//       this.send();\n//     };\n\n//   },\n\n//   unsubscribe: function() {\n//     this.close();\n//   },\n\n//   /**\n//   * Every Session needs a 'terminate' method in order to be called by JsSIP.UA\n//   * when user fires JsSIP.UA.close()\n//   */\n//   terminate: function() {\n//     this.unsubscribe();\n//   },\n\n//   refresh: function() {\n//     var subscription;\n\n//     for (subscription in this.subscriptions) {\n//       this.subscriptions[subscription].subscribe();\n//     }\n//   },\n\n//   receiveRequest: function(request) {\n//     var subscription_state, expires;\n\n//     if (!this.matchEvent(request)) {\n//       return;\n//     }\n\n//     subscription_state = request.s('Subscription-State');\n//     expires = subscription_state.expires || this.expires;\n\n//     switch (subscription_state.state) {\n//       case 'pending':\n//       case 'active':\n//         //create the subscription.\n//         window.clearTimeout(this.N);\n//         new JsSIP.Subscription(this, request, subscription_state.state, expires);\n//         break;\n//       case 'terminated':\n//         if (subscription_state.reason) {\n//           this.logger.log('terminating subscription with reason '+ subscription_state.reason);\n//         }\n//         window.clearTimeout(this.N);\n//         this.close();\n//         break;\n//     }\n//   },\n\n//   matchEvent: function(request) {\n//     var event;\n\n//     // Check mandatory header Event\n//     if (!request.hasHeader('Event')) {\n//       this.logger.warn('missing Event header');\n//       return false;\n//     }\n//     // Check mandatory header Subscription-State\n//     if (!request.hasHeader('Subscription-State')) {\n//       this.logger.warn('missing Subscription-State header');\n//       return false;\n//     }\n\n//     // Check whether the event in NOTIFY matches the event in SUBSCRIBE\n//     event = request.s('event').event;\n\n//     if (this.event !== event) {\n//       this.logger.warn('event match failed');\n//       request.reply(481, 'Event Match Failed');\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   }\n// };\n\n// JsSIP.Subscription = function (subscriber, request, state, expires) {\n\n//     this.id = null;\n//     this.subscriber = subscriber;\n//     this.ua = subscriber.ua;\n//     this.state = state;\n//     this.expires = expires;\n//     this.dialog = null;\n//     this.N = null;\n//     this.error_codes  = [404,405,410,416,480,481,482,483,484,485,489,501,604];\n\n//     //Create dialog and pass the request to receiveRequest method.\n//     if (this.createConfirmedDialog(request,'UAS')) {\n//       this.id = this.dialog.id.toString();\n//       this.subscriber.subscriptions[this.id] = this;\n\n//       /* Update the route_set\n//       * If the endpoint responded with a 2XX to the initial subscribe\n//       */\n//       if (request.from_tag === this.subscriber.to_tag_2xx) {\n//         this.dialog.route_set = this.subscriber.route_set_2xx;\n//       }\n\n//       this.dialog.local_seqnum = this.subscriber.initial_local_seqnum;\n\n//       this.receiveRequest(request, true);\n//     }\n// };\n\n// JsSIP.Subscription.prototype = {\n//   timer_N: function(){\n//     if (this.state === 'terminated') {\n//       this.close();\n//     } else if (this.state === 'pending') {\n//       this.state = 'terminated';\n//       this.close();\n//     } else {\n//       this.subscribe();\n//     }\n//   },\n\n//   close: function() {\n//     this.state = 'terminated';\n//     this.terminateDialog();\n//     window.clearTimeout(this.N);\n//     this.subscriber.onSubscriptionTerminate(this);\n//   },\n\n//   createConfirmedDialog: function(message, type) {\n//     var local_tag, remote_tag, id, dialog;\n\n//     // Create a confirmed dialog given a message and type ('UAC' or 'UAS')\n//     local_tag = (type === 'UAS') ? message.to_tag : message.from_tag;\n//     remote_tag = (type === 'UAS') ? message.from_tag : message.to_tag;\n//     id = message.call_id + local_tag + remote_tag;\n\n//     dialog = new JsSIP.Dialog(this, message, type);\n\n//     if(dialog) {\n//       this.dialog = dialog;\n//       return true;\n//     }\n//     // Dialog not created due to an error\n//     else {\n//       return false;\n//     }\n//   },\n\n//   terminateDialog: function() {\n//     if(this.dialog) {\n//       this.dialog.terminate();\n//       delete this.dialog;\n//     }\n//   },\n\n//   receiveRequest: function(request, initial) {\n//     var subscription_state,\n//       subscription = this;\n\n//     if (!initial && !this.subscriber.matchEvent(request)) {\n//       this.logger.warn('NOTIFY request does not match event');\n//       return;\n//     }\n\n//     request.reply(200, JsSIP.C.REASON_200, [\n//       'Contact: <'+ this.subscriber.contact +'>'\n//     ]);\n\n//     subscription_state = request.s('Subscription-State');\n\n//     switch (subscription_state.state) {\n//       case 'active':\n//         this.state = 'active';\n//         this.subscriber.receiveInfo(request);\n//         /* falls through */\n//       case 'pending':\n//         this.expires = subscription_state.expires || this.expires;\n//         window.clearTimeout(subscription.N);\n//         subscription.N = window.setTimeout(\n//           function() {subscription.timer_N();},\n//           (this.expires * 1000)\n//         );\n//         break;\n//       case 'terminated':\n//         if (subscription_state.reason) {\n//           this.logger.log('terminating subscription with reason '+ subscription_state.reason);\n//         }\n//         this.close();\n//         this.subscriber.receiveInfo(request);\n//         break;\n//     }\n//   },\n\n//   subscribe: function() {\n//     var expires,\n//       subscription = this;\n\n//     new function() {\n//       this.request = subscription.subscriber.createSubscribeRequest(subscription.dialog);\n\n//       var request_sender = new JsSIP.RequestSender(this, subscription.subscriber.ua);\n\n//       this.receiveResponse = function(response) {\n//         if (subscription.error_codes.indexOf(response.status_code) !== -1) {\n//           subscription.close();\n//           subscription.subscriber.onFailure(response, null);\n//         } else {\n//           switch(true) {\n//             case /^1[0-9]{2}$/.test(response.status_code): // Ignore provisional responses.\n//               break;\n//             case /^2[0-9]{2}$/.test(response.status_code):\n//               expires = response.s('Expires');\n\n//               if (expires && expires <= subscription.expires) {\n//                 window.clearTimeout(subscription.N);\n//                 subscription.N = window.setTimeout(\n//                   function() {subscription.timer_N();},\n//                   (expires * 1000)\n//                 );\n//               }else {\n//                 subscription.close();\n\n//                 if (!expires) {\n//                   this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');\n//                   subscription.subscriber.onFailure(null, JsSIP.C.EXPIRES_HEADER_MISSING);\n//                 } else {\n//                   this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the indicated in the request');\n//                   subscription.subscriber.onFailure(null, JsSIP.C.INVALID_EXPIRES_HEADER);\n//                 }\n//               }\n//               break;\n//             default:\n//               subscription.close();\n//               subscription.subscriber.onFailure(response,null);\n//               break;\n//           }\n//         }\n//       };\n\n//       this.send = function() {\n//         window.clearTimeout(subscription.N);\n//         subscription.N = window.setTimeout(\n//           function() {subscription.timer_N();},\n//           (JsSIP.Timers.T1 * 64)\n//         );\n//         request_sender.send();\n//       };\n\n//       this.onRequestTimeout = function() {\n//         subscription.subscriber.onFailure(null, JsSIP.C.causes.REQUEST_TIMEOUT);\n//       };\n\n//       this.onTransportError = function() {\n//         subscription.subscriber.onFailure(null, JsSIP.C.causes.CONNECTION_ERROR);\n//       };\n\n//       this.send();\n//     };\n//   },\n\n//   unsubscribe: function() {\n//     var subscription = this;\n\n//     this.state = 'terminated';\n\n//     new function() {\n//       this.request = subscription.subscriber.createSubscribeRequest(subscription.dialog);\n//       this.request.setHeader('Expires', 0);\n\n//       var request_sender = new JsSIP.RequestSender(this, subscription.subscriber.ua);\n\n//       //Don't care about response.\n//       this.receiveResponse = function(){};\n\n//       this.send = function() {\n//         window.clearTimeout(subscription.N);\n//         subscription.N = window.setTimeout(\n//           function() {subscription.timer_N();},\n//           (JsSIP.Timers.T1 * 64)\n//         );\n//         request_sender.send();\n//       };\n\n//       this.onRequestTimeout = function() {\n//         subscription.subscriber.onFailure(null, JsSIP.C.causes.REQUEST_TIMEOUT);\n//       };\n//       this.onTransportError = function() {\n//         subscription.subscriber.onFailure(null, JsSIP.C.causes.CONNECTION_ERROR);\n//       };\n\n//       this.send();\n//     };\n//   }\n// };\n","/home/travis/build/npmtest/node-npmtest-jssip/node_modules/jssip/NO_GIT/publish.js":"#!/usr/bin/env node\n\n\nvar exit = process.exit;\nvar version = require('../package.json').version;\nvar shell = require('shelljs')\nvar fs = require('fs-extra');\nvar path = require('path');\nvar ret;\n\n\nvar PATH_TRYIT_JSSIP = '/Users/ibc/src/tryit-jssip';\nvar PATH_JSSIP_WEB = '/Users/ibc/src/JsSIP_web';\n\n\n\n//console.log('>>> delete dist/ folder:');\n\n//fs.deleteSync('dist/');\n\n\n//console.log('>>> gulp:');\n\n//ret = shell.exec('gulp').code;\n//if (ret) { exit(1); }\n\n\nconsole.log('>>> git tag & push (version %s):', version);\n\nret = shell.exec('git tag -a ' + version + ' -m \"' + version + '\"').code;\nif (ret) { exit(1); }\n\nret = shell.exec('git push && git push --tags').code;\nif (ret) { exit(1); }\n\n\nconsole.log('>>> npm publish:');\n\nret = shell.exec('npm publish').code;\nif (ret) { exit(1); }\n\n\nconsole.log('>>> update tryit-jssip:');\n\nret = shell.exec('cd ' + PATH_TRYIT_JSSIP + ' && ./NO_GIT/upload.sh').code;\nif (ret) { exit(1); }\n\n\nconsole.log('>>> update JsSIP_web:');\n\nfs.copySync('dist/jssip.js', path.join(PATH_JSSIP_WEB, 'content/download/releases/jssip-' + version + '.js'));\nfs.copySync('dist/jssip.min.js', path.join(PATH_JSSIP_WEB, 'content/download/releases/jssip-' + version + '.min.js'));\n\nvar my_lib = fs.readFileSync(path.join(PATH_JSSIP_WEB, 'lib/my_lib.rb')).toString();\nvar my_lib_new = my_lib.replace(/@jssip_last_full_version = .*/, '@jssip_last_full_version = \"' + version + '\"');\nfs.writeFileSync(path.join(PATH_JSSIP_WEB, 'lib/my_lib.rb'), my_lib_new, 'utf8');\n\nret = shell.exec('cd ' + PATH_JSSIP_WEB + ' && git pull && git add content && git commit -a -m \"' + version + '\" && git push').code;\nif (ret) { exit(1); }\n\nret = shell.exec('cd ' + PATH_JSSIP_WEB + ' && ./upload.sh').code;\nif (ret) { exit(1); }\n\nconsole.log('>>> done');\n"}